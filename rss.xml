<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mike Kim 개발 블로그</title>
  
  
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://kys9261.github.io/"/>
  <updated>2021-11-11T01:46:09.495Z</updated>
  <id>https://kys9261.github.io/</id>
  
  <author>
    <name>Mike Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>네이버 스포츠 실시간 응원 클론하기 - 분석</title>
    <link href="https://kys9261.github.io/2021/11/11/programming/playground/naver-sports-cheering-clone-1/"/>
    <id>https://kys9261.github.io/2021/11/11/programming/playground/naver-sports-cheering-clone-1/</id>
    <published>2021-11-10T17:24:39.000Z</published>
    <updated>2021-11-11T01:46:09.495Z</updated>
    
    <content type="html"><![CDATA[<p>최근 가을야구가 진행되고 있는 와중에 오랜만에 네이버에서 야구 중계를 봤는데요.<br>페이지 왼쪽 상단에 응원하는 팀을 선택하는 영역의 숫자가 실시간으로 바뀌는게 눈에 들어왔습니다.<br>갑자기 해당 기능이 어떻게 동작하는지 궁금해졌습니다. <del>쓸데없는 호기심 발동!</del></p><p><img src="https://user-images.githubusercontent.com/7028715/141162632-14d01ae1-00f2-48f1-8b42-352c1a68ddf3.png" alt="네이버 스포츠 응원팀 선택하기"></p><h1 id="네트워크-요청을-열어보자"><a href="#네트워크-요청을-열어보자" class="headerlink" title="네트워크 요청을 열어보자"></a>네트워크 요청을 열어보자</h1><p>그래서 자연스럽게 크롬 개발자 콘솔을 열어서 통신이 어떻게 진행되고 있는지 보았는데요. </p><p><img src="https://user-images.githubusercontent.com/7028715/141098588-447cb15e-e733-4a6f-b6ab-c6bb0147cf8c.png" alt="엄청난 양의 네트워크 요청"></p><p>그래서 저 데이터를 다 확인하기보다는 예상으로는 API로 데이터를 받아올거 같아서 <code>Fetch/XHR</code>(비동기 통신) 탭을 눌러서 데이터를 확인해보았습니다. </p><p>근데 이상한점이 있었던게 데이터가 주기적으로 변경되는거면 API 호출 기록이 지속적으로 추가 됐을거 같은데 추가되는 네트워크 요청은 영상 스트리밍 관련된 요청이었고, 그 전에 요청된 데이터에는 응원 갯수를 노출시켜줄만한 데이터는 안보였습니다.</p><p>그래서 저 데이터가 자바스크립트를 이용해 임의로 만든게 아닐까 하는 의심을 해보았습니다. 네이버가 그렇게 대충 구현하지는 않았을거 같지만 정확하게 데이터를 어떻게 가져오는지 모르는 상황이라 그런 생각이 들었습니다.</p><p><code>JS</code>(JavaScript)탭을 눌러서 뭔가 저 기능에 영향이 있을법한 코드가 있는지 찾아보던 와중에 </p><p><img src="https://user-images.githubusercontent.com/7028715/141100348-8e153d9d-c17f-4d60-8383-f93c3a597761.png" alt="의심이 가는 부분을 찾았다"></p><p>의심이 가는 이름이 있는 요청을 찾았습니다. 뭔가 <code>sportsLike</code>라는 이름이 저 기능과 어울리는거 같은데? 라는 생각이 들었씁니다.</p><p>두개의 요청중 처음은 인증을 위한 토큰을 받아오고 있었고, 두번째 요청이 제가 원하는 데이터랑 부합했습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/141102111-44b69571-313e-4540-b8c8-0d4ca0227aab.png" alt="응원과 관련된 데이터!"></p><p>제일 상단의 빨간의 <code>contentsId</code>는 해당 경기의 ID 같았습니다. </p><p><img src="https://user-images.githubusercontent.com/7028715/141102339-b2168c0a-19db-43fb-9682-0b5332edd240.png" alt="중계페이지 URL에도 있다!"></p><p>중계 페이지 URL에도 <code>contentsId</code>와 동일한 값이 있었습니다.</p><p>그 다음 빨간박스의 <code>reactions</code>가 실제 응원 갯수를 초기화 해주는 데이터 같았습니다. 여러개의 필드가 있었지만 다른건 어떨때 사용되는지 정확히는 모르겠고, 우선 <code>noLimit</code>의 <code>count</code>가 처음 설정될 응원 갯수고, <code>userCount</code>는 제가 누른 수를 의미하는거 같았습니다.<br>응원 버튼을 누를때마다 저 카운트가 올라가는것을 확인했습니다.</p><p>우선은 저렇게 데이터를 확인했는데 아직 해소가 되지 않은 의문이 있습니다. 바로 <code>실시간으로 바뀌는 응원수는 어디서 오는것인가?</code>였는데요 제가 모르는 다른 데이터가 있을거 같아서 네트워크 탭의 다른 항목들을 뒤쳐보기로 했습니다.</p><p>그중에 <code>WS</code>(웹소켓)탭에 갔는데 웹소켓 요청이 1개 있었습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/141103378-ea236fc4-609e-4529-9e5a-66d58fbecb7e.png" alt="웹소켓 요청이 1개 있다?!"></p><p>웹소켓 요청이 있었다는걸 알게된 순간 <code>아! 웹소켓을 이용해 실시간 통신을 하고 있었구나!</code>라고 생각했습니다.</p><h1 id="웹소켓-통신-데이터-분석"><a href="#웹소켓-통신-데이터-분석" class="headerlink" title="웹소켓 통신 데이터 분석"></a>웹소켓 통신 데이터 분석</h1><p>요청 URL 확인해서 얻은 정보가 있는데 <code>프로토콜은 wss</code>로 https와 같이 인증서 처리가 된 프로토콜 입니다.<br><code>URL에 socket.io</code>가 있는걸로 보아서 socket.io로 구현이 된거 같습니다. 그리고 쿼리스트링에 EIO=3, transport=websocket 두개의 데이터가 있는데 <code>EIO=3은 Engine.io 버젼이 3</code>이라는 뜻이고,<br><code>transport=websocket은 websocket으로 통신하겠다</code>는 의미입니다. <a href="https://socket.io/docs/v4/client-options/#query">참고</a></p><p>자세한 내용은 Websocket과 socket.io를 정리하면서 다시한번 다루겠습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/141105436-8d324a5d-e58f-4384-9198-e94f1e943637.png" alt="요청 URL로 정보를 얻었다!"></p><p>아래 이미지가 실제로 서버랑 데이터를 주고받는 데이터인데요.<br>가볍게 한번 살펴보도록 하겠습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/141105549-65140f56-2f2a-4235-896a-3b93b28289d6.png" alt="스크린샷 2021-11-10 오후 8 26 14"></p><p>실제로 데이터를 주고받는걸 보면 왼쪽의 빨간색 화살표는 서버 to 클라이언트, 파란색 화살표는 클라이언트 to 서버 데이터를 표현하는 것입니다.</p><p>데이터 패킷은 정해진 타입과 페이로드로 나누는데요 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2[&quot;test&quot;,42]</span><br><span class="line">||</span><br><span class="line">|└─ JSON-encoded payload</span><br><span class="line">└─ packet type (2 =&gt; EVENT)</span><br></pre></td></tr></table></figure><p>패킷타입이 숫자로 되어있는데 1개나 2개냐에 따라 조금 다른데요<br>1개 일경우엔 <a href="https://github.com/socketio/engine.io-protocol#packet">Engine.io의 패킷타입</a>이고, 2개일땐 앞자리는 Engine.io의 패킷타입, 뒷자리는 <a href="https://github.com/socketio/socket.io-protocol#packet-types">Socket.io의 패킷타입</a> 입니다.</p><p>각 숫자가 의마하는 바가 다르니 알고 있으면 데이터 분석에 도움이 될거 같습니다.</p><ul><li>Engine.io와 Socket.io의 차이에 대해서는 나중에 포스팅 하겠습니다.</li></ul><table><thead><tr><th>데이터</th><th>설명</th></tr></thead><tbody><tr><td>⬇️ 0{…}</td><td>0:open -&gt; Engine.io 서버로부터 새로운 통신을 시작한다는 데이터를 받습니다.</td></tr><tr><td>⬇️ 40</td><td>4:message / 0:open -&gt; <a href="https://socket.io/docs/v4/namespaces/">namespace</a> 연결 요청입니다.</td></tr><tr><td>⬆️ 42[“join”, {….}]</td><td>4:message / 2:event -&gt; 서버 join 이벤트 발생.</td></tr><tr><td>⬇️ 42[“cheer”, {….}]</td><td>4:message / 2:cheer -&gt; 클라이언트 cheer 이벤트 발생.</td></tr><tr><td>⬆️ 2</td><td>2:ping -&gt; 서버로 ping</td></tr><tr><td>⬇️ 3</td><td>3:pong -&gt; 서버로부터 pong</td></tr></tbody></table><p>간단하게 설명했는데 자세한 내용은 <a href="https://github.com/socketio/socket.io-protocol#sample-session">공식 문서</a>를 확인하시면 더 좋을거 같습니다.</p><p>네이버는 위와 같은 형태로 데이터를 주고받는데요. EIO가 3일때 해당하는 얘기고, EIO=4가 현재 최신 버젼인데 조금 차이가 있습니다.</p><p>우선 서버와 클라간 응답을 체크하는 2(ping), 3(pong)의 순서가<br>Engine.io v3일땐 클라(ping) -&gt; 서버(pong)이었는데, Engine.io v4부터는 서버(ping) -&gt; 클라(pong)으로 변경되었습니다. <a href="https://github.com/socketio/engine.io-protocol#difference-between-v3-and-v4">참고</a></p><p>주기적으로 ping, pong을 하는 이유는 서버와 클라간에 <a href="https://github.com/socketio/socket.io-protocol#sample-session">통신이 지속적으로 가능한지 확인</a>하는 목적인데 클라이언트에서 ping을 요청하는 주기에 대한 신뢰성이 떨어진다고 합니다. timeout의 발생원인이 클라이언트 측에서의 타이머 지연이라고 판단하는거 같습니다.</p><ul><li>ping을 날리는 주기와 타임아웃시간은 맨처음 통신을 맺을때 데이터에 포함되어있습니다.(pingInterval, pingTimeout)</li></ul><p>네이버에서 구현할땐 Engine.io v3를 사용하였고, 업데이트를 진행한거 같지 않지만 Engine.io v3와 Engine.io v4의 기능이나 성능적인 차이가 크게 없는거 같아서 큰 문제는 없을거 같습니다.</p><ul><li>Engine.io버젼과 Socket.io의 버젼은 별개입니다.</li></ul><h1 id="분석한-내용-정리"><a href="#분석한-내용-정리" class="headerlink" title="분석한 내용 정리"></a>분석한 내용 정리</h1><p>지금까지 제가 분석한 내용을 도식화 하면 아래와 같은데요<br>JS탭에 있었던 첫번째 요청과 관련된 내용(인증토큰 처리)은 제외했습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/141153873-1f7b885d-291a-4a6f-86d9-2001a08b38fb.png"></p><p>그리고 웹소켓 연결 요청은 점선으로 되어있는데요. socket.io의 기본적인 연결은 Long Polling으로 부터 시작합니다. Long Polling을 이용해 서버와 websocket 통신이 가능한지 먼저 체크를 하고, 통신이 가능하면 웹소켓으로 통신 방식을 <a href="https://socket.io/docs/v4/how-it-works/#upgrade-mechanism">업그레이드</a> 합니다.</p><p>그렇게 될경우 네트워크 요청 목록에 아래와 같이 5개의 요청이 발생하게 됩니다.</p><p><img src="https://socket.io/assets/images/network-monitor-2e47dbe233100aa290595f8687a9fcba.png" alt="일반적인 socket.io 연결 요청 목록"></p><p>하지만 네이버 스포츠 페이지에서 본 요청 목록엔 websocket연결 뿐이었는데요 (4번째 요청),<br>클라이언트 쪽에서 소켓 요청을 할때 option값 중에 <a href="https://socket.io/docs/v4/client-options/#transports">transports를 websocket</a>으로만 설정하면<br>Long Polling을 이용한 연결을 비활성화 합니다. 그래서 1개의 요청만 남아있는것입니다.</p><p>다만 Long Polling을 비활성화는 이유에 대해서 정확하게 이해는 못했는데요, <a href="https://socket.io/docs/v4/using-multiple-nodes/">공식 문서</a>를 보았을때는 여러 Socket.io 서버를 구성해서 사용할때 여러개의 Long Polling요청이 각기 다른 서버로 전송될 경우 세션ID (sid)를 식별하지 못하는 문제가 발생을 하게됩니다. 그래서 서버와 클라이언트간 1:1로 연결(<a href="https://socket.io/docs/v4/using-multiple-nodes/#enabling-sticky-session">고정세션</a>)을 시키기 위해 Long Polling을 이용하지 않고 websocket을 이용해 연결을 시도하는것이고, 어떤 서버에 연결될지는 로드밸런싱 솔루션을 이용해 처리를 해야한다고 하는거 같았습니다. </p><h1 id="응원하기"><a href="#응원하기" class="headerlink" title="응원하기"></a>응원하기</h1><p>마지막으로 제가 응원하는 팀을 클릭했을때도 JSONP를 이용해 데이터를 보내고 callback을 통해 데이터를 받아와 처리하는것 같이 보였습니다.<br><img src="https://user-images.githubusercontent.com/7028715/141160901-ec386931-2f32-4948-9039-a996f90c93d0.png" alt="팀 응원 - 요청 값"></p><p>요청값 중에 <code>pool이 nolimit</code>인걸 보아하니 투표수에 제한이 없는거 같고, 응답 필드의 <code>nolimitUserCount가 3</code>으로 제가 지금까지 눌렀던 횟수의 총합이 응답으로 오는거 같았습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/141160896-cdd83041-9d4a-4d3d-b997-0e126acc9f54.png" alt="팀 응원 - 응답 값"></p><p>투표는 로그인을 해야 진행이 되기때문에 로그인한 유저의 정보를 이용해 투표한 기록을 가지고 있는거 같았습니다.</p><h1 id="궁금증"><a href="#궁금증" class="headerlink" title="궁금증"></a>궁금증</h1><p>이 글을 적으면서도 이해가 안되는 부분은 <code>왜 JS로 데이터 초기값을 요청했을까?</code> 라는 부분 입니다.</p><p>뭔가 응답값을 보았을때 callback으로 감싸져서 오는걸 보아하니 JSONP로 요청을 한거 같은데. 제가 알기론 JSONP는 CORS문제를 해결하기위해 사용한다 인데요. JSONP로 요청하지 않고 서버에서 Response Header에 Access-Control-Allow-Headers를 설정하거나, 서브도메인은 naver.com으로 같으므로 document.domain을 이용한 처리도 가능하지 않았을까 생각이 됩니다. (document.domain은 더이상 사용하지 않는게 좋다 라고 하네요. <a href="https://runebook.dev/en/docs/dom/document/domain">참고</a></p><p>아니면 네이버 스포츠를 개발하는 팀과, socket.io 서버를 개발하는 팀이 달라서 뭔가 socket.io 개발팀에서 JSONP를 이용해 도메인이 다른 팀에서도 사용해서 처리할 수 있게끔 callback으로 감싸서 내려주는 공통화 처리를 해둔게 아닐까 라는 생각도 해보았습니다. (응답의 구조를 보아하니 스포츠 경기 뿐만 아니라, 다른 곳에서도 사용이 가능한 공통 응원(투표) 시스템이지 않을까 라는 추측…)</p><p>다음 포스팅은 요구사항을 리스트업 하고, 설계를 해보는 작업을 해보도록 하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최근 가을야구가 진행되고 있는 와중에 오랜만에 네이버에서 야구 중계를 봤는데요.&lt;br&gt;페이지 왼쪽 상단에 응원하는 팀을 선택하는 영역의 숫자가 실시간으로 바뀌는게 눈에 들어왔습니다.&lt;br&gt;갑자기 해당 기능이 어떻게 동작하는지 궁금해졌습니다. &lt;d
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Playground" scheme="https://kys9261.github.io/categories/Programming/Playground/"/>
    
    
      <category term="websocket" scheme="https://kys9261.github.io/tags/websocket/"/>
    
      <category term="socket.io" scheme="https://kys9261.github.io/tags/socket-io/"/>
    
      <category term="네이버 스포츠 응원" scheme="https://kys9261.github.io/tags/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8A%A4%ED%8F%AC%EC%B8%A0-%EC%9D%91%EC%9B%90/"/>
    
  </entry>
  
  <entry>
    <title>Long Polling으로 구현한 채팅</title>
    <link href="https://kys9261.github.io/2021/11/09/programming/playground/long-polling-chatting/"/>
    <id>https://kys9261.github.io/2021/11/09/programming/playground/long-polling-chatting/</id>
    <published>2021-11-08T15:00:00.000Z</published>
    <updated>2021-11-09T02:07:53.119Z</updated>
    
    <content type="html"><![CDATA[<p>지난번에 Polling과 Long Polling을 구현한 <a href="https://kys9261.github.io/2021/11/08/programming/playground/polling-and-long-polling-sample/">간단한 샘플</a>을 만들어 보았습니다. </p><p>그런데 Long Polling의 샘플이 좀 아쉬운거 같았습니다. 그때는 서버가 5초 뒤 응답을 해주는 형태로 구현을 했는데, Long Polling 보다는<br>단순히 서버에서 요청을 처리하는 시간이 오래걸리는 것과 비슷한 형태인거 같아서 Long Polling을 이용한 채팅을 새로 만들었습니다.</p><p>샘플 코드가 동작하는것을 영상으로도 찍어두었습니다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/Pmkdb2P3MDY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>서버는 두개의 API를 가지고 있습니다.</p><ul><li>GET : /chat/:id - 서버에서 응답을 받기위한 Long Polling용 API입니다. (id는 클라를 식별하기 위해 받는걸로 했습니다.)</li><li>POST : /chat - 클라에서 받은 요청을 다시 다른 클라이언트로 보내기 위해 사용하는 API 입니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resList = [];</span><br><span class="line"><span class="comment">// 클라이언트에서 최초에 Long Polling 연결을 위한 API 입니다.</span></span><br><span class="line">app.get(<span class="string">&quot;/chat/:id&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.name = req.params.id; <span class="comment">// id는 로깅을 위한 클라이언트 식별용으로 받았습니다.</span></span><br><span class="line">    resList.push(res);        <span class="comment">// resList에 응답 객체를 추가만 해줍니다. </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;polling-&quot;</span>+req.params.id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클라이언트에서 채팅을 입력했을때 호출되는 API 입니다.</span></span><br><span class="line">app.post(<span class="string">&quot;/chat&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> body = req.body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> user <span class="keyword">of</span> resList) &#123;</span><br><span class="line">        user.send(body);       <span class="comment">// resList에 있는 응답 객체에게 응답을 보냅니다.</span></span><br><span class="line">        <span class="built_in">console</span>.log(body.type + <span class="string">&quot; (To: &quot;</span>+body.name +<span class="string">&quot;/From: &quot;</span>+user.name+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    resList = []; <span class="comment">// resList를 비워줍니다.</span></span><br><span class="line">    res.send();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>polling 요청과, 요청된 메시지가 어느곳에서 와서 어느곳으로 가는지 로그를 남깁니다.  </p><p><img src="https://user-images.githubusercontent.com/7028715/140779883-6b0f8f49-8669-41a4-a9d9-3cba4810b909.png"></p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    longPolling();                  <span class="comment">// Long Polling을 시작합니다.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> join(), <span class="number">1000</span>); <span class="comment">// longPolling() 이후 바로 join()을 호출했더니 상황에 따라 join이 먼저 처리되는 경우도 있어 1초의 시간을 두고 호출되게 처리했습니다.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이름을 입력받아 식별자로 사용합니다.</span></span><br><span class="line"><span class="keyword">let</span> name = prompt(<span class="string">&quot;input your name&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;h3&quot;</span>).append(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exit = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> longPolling = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/chat/&quot;</span>+name,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">10000</span>, <span class="comment">// timeout은 10초로 설정하고, timeout 일때는 다시 longPolling()을 호출합니다.</span></span><br><span class="line">        <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, opts</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (exit) &#123; <span class="comment">// 종료 flag가 true일때 더이상 서버로 요청을 하지 않습니다.</span></span><br><span class="line">                xhr.abort(); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            printChatting(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (XMLHttpRequest.readyState == <span class="number">0</span> &amp;&amp; textStatus !== <span class="string">&quot;timeout&quot;</span>) &#123; <span class="comment">// 서버와 연결이 안되었으나 timeout이 아닌경우만 종료처리합니다.</span></span><br><span class="line">                exit = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">complete</span>: longPolling <span class="comment">// ajax처리가 종료되면 다시 longPolling()을 호출합니다. (ajax lifecycle 참고)</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;polling&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 처음 채팅방 입장시 메시지를 남깁니다.</span></span><br><span class="line"><span class="keyword">let</span> join = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;welcomeMsg&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/chat&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;join&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 서버에서 받은 응답값을 이용해 채팅창에 출력하는 함수입니다.</span></span><br><span class="line"><span class="keyword">let</span> printChatting = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data.type === <span class="string">&quot;welcomeMsg&quot;</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;.chat_log ul&quot;</span>).append(<span class="string">&quot;&lt;p style=&#x27;color: blue;&#x27;&gt;&quot;</span> + (data.name === name ? <span class="string">&quot;방에 입장했습니다.&quot;</span> : data.name + <span class="string">&quot;님이 방에 입장했습니다.&quot;</span>) + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.type === <span class="string">&quot;chattingMsg&quot;</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;.chat_log ul&quot;</span>).append(<span class="string">&quot;&lt;p&gt;&quot;</span> + (data.name === name ? <span class="string">&quot;나&quot;</span> : data.name) + <span class="string">&quot; : &quot;</span> + data.message + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 채팅 입력후 전송버튼을 눌렀을때 API 호출을 합니다.</span></span><br><span class="line">$(<span class="string">&quot;#btn_send&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">message</span>: $(<span class="string">&quot;#chat_input&quot;</span>).val(),</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;chattingMsg&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/chat&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: data,</span><br><span class="line">        <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#chat_input&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>처음 LongPolling을 요청후, welcomeMsg를 날립니다.<br>그 이후부터 채팅이 없어도 지속적으로 API를 호출하고, 10초의 타임아웃 이후에도 계속 API를 호출합니다.<br>가장 마지막으로 호출된 API는 서버의 응답이 있을때까지 <code>대기중</code> 으로 처리됩니다</p><p><img src="https://user-images.githubusercontent.com/7028715/140781974-1423e7cf-a3e0-432d-abec-ae5cfaa75b29.png"></p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>간단하게 Long Polling을 이용한 채팅을 구현해 보았는데, 많은 인원이 참여하는 채팅이나, 여러개의 방이 존재하는 채팅방을 Long Polling을 이용해서 구현하기에는 조금 어렵지 않을까 라는 생각이 들었습니다. 페이스북에서 구현한 채팅은 iframe 형태로 구현이 되었다고 하는데 그 방법은 어떻게 처리가 되는지도 한번 알아보면 좋을거 같습니다.</p><p>위에서 사용된 샘플 코드는 <a href="https://github.com/kys9261/playgrounds/tree/main/long-polling-chatting">여기</a>에 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;지난번에 Polling과 Long Polling을 구현한 &lt;a href=&quot;https://kys9261.github.io/2021/11/08/programming/playground/polling-and-long-polling-sample/&quot;&gt;간단
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Playground" scheme="https://kys9261.github.io/categories/Programming/Playground/"/>
    
    
      <category term="Long Polling" scheme="https://kys9261.github.io/tags/Long-Polling/"/>
    
      <category term="chatting" scheme="https://kys9261.github.io/tags/chatting/"/>
    
      <category term="채팅" scheme="https://kys9261.github.io/tags/%EC%B1%84%ED%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Polling &amp; Long Polling 간단 샘플</title>
    <link href="https://kys9261.github.io/2021/11/08/programming/playground/polling-and-long-polling-sample/"/>
    <id>https://kys9261.github.io/2021/11/08/programming/playground/polling-and-long-polling-sample/</id>
    <published>2021-11-08T07:06:01.000Z</published>
    <updated>2021-11-08T15:40:45.278Z</updated>
    
    <content type="html"><![CDATA[<p>얼마전 실시간 통신을 구현하는 방법에 대해 간단하게 소개한적이 있는데요.<br>그 내용들을 바탕으로 아주 간단하게 샘플을 작성해보았습니다.</p><h2 id="Polling"><a href="#Polling" class="headerlink" title="Polling"></a>Polling</h2><p>클라이언트 페이지에서 2초마다 한번씩 API를 호출합니다.<br>서버에서는 최초 요청시 healthCheck 함수를 실행합니다.<br>healCheck 함수는 10초 뒤에 메시지를 설정합니다.</p><p>매 2초마다 요청을 하다 10초 뒤에 요청에서 설정된 메시지를 리턴합니다.<br>클라에서는 메시지가 있는 응답이 오면 요청을 종료합니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/140712665-19dd0632-de68-413d-87d2-66c333200b79.png"></p><p>서버에서 처리가 완료되었으나 클라의 요청이 아직 오지 않은 상황이면, 이미지의 빨간 부분처럼 데이터의 변경을 클라가 알아차리기까지의 딜레이가 발생 할수 있습니다.</p><p>샘플을 위해 요청을 종료처리 했지만, 서비스에 따라서 지속적으로 요청을 날려서 데이터를 받아오게 처리하면 됩니다.</p><p>샘플에서는 단순히 서버가 10초뒤에 메시지만 설정하는 형태로 구현이 되었지만.<br>실제로는 DB에 갔다오거나, 메시지큐를 확인하는 등의 처리를 하면 되지 않을까 합니다.</p><ul><li>Server  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oneTimeFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// API 요청이 들어오면 응답을 보내주고, 처음 요청시 healthCheack 함수를 실행합니다.</span></span><br><span class="line">app.get(<span class="string">&quot;/xhr_polling&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123; <span class="attr">msg</span>: message, <span class="attr">status</span>: <span class="number">200</span> &#125;);</span><br><span class="line">    healthCheck();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">healthCheck</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// API가 최초 호출시 해당 함수가 1번만 실행되게 한다.</span></span><br><span class="line">    <span class="keyword">if</span> (oneTimeFlag) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    oneTimeFlag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10초 뒤에 서버에 변경사항이 생긴다.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      message = <span class="string">&quot;Server update!!!!&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>&nbsp;</li><li>Client  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tryCnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> polling = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/xhr_polling&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data.msg.length != <span class="number">0</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;#server_status&quot;</span>).text(<span class="string">&quot;UPDATE&quot;</span>);</span><br><span class="line">                <span class="comment">// 샘플에서는 서버에 변경된 데이터가 있으면 요청을 중단한다.  </span></span><br><span class="line">                <span class="built_in">clearInterval</span>(polling);</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">&quot;#log&quot;</span>).append(<span class="string">&quot;&lt;p&gt;&quot;</span> + tryCnt++ + <span class="string">&quot; : &quot;</span> + data.msg + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">2000</span>); <span class="comment">// 2초에 한번씩 요청한다.</span></span><br></pre></td></tr></table></figure></li></ul><p>응답에 메시지가 있기전 까지는 빈 메시지를 출력하고, 2초 간격으로 호출합니다.<br>메시지가 있을때 메시지를 출력하고 호출을 중단합니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/140708017-63f9e4dc-1926-4259-8a02-1c04df741bf4.png"></p><h2 id="Long-Polling"><a href="#Long-Polling" class="headerlink" title="Long Polling"></a>Long Polling</h2><p>클라이언트에서 요청이 있을때 바로 응답을 하지 않고 데이터 변경이 있을때까지 대기하다 응답합니다.<br>샘플에서는 5초 후에 응답을 하게 구현을 했는데 이렇게 시간을 걸어서 동작하는 방식은 좀 안맞는거 같지만 우선 간단하게 구현해 보고자 해서 만들었습니다.<br>롱폴링을 이용한 채팅을 구현할땐 응답 대기열에 추가하고, 신규 메시지가 발생하면 그때 응답을 하는 형태로 구현하면 될거 같습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/140712672-e95dbae9-da11-41ca-8785-9ce9771f3c5c.png"></p><ul><li>Server<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/xhr_long_polling&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = loremIpsum();</span><br><span class="line">        res.json(&#123; <span class="attr">msg</span>: message, <span class="attr">status</span>: <span class="number">200</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>&nbsp;  </li><li>Client<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tryCnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">longPolling</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/xhr_long_polling&quot;</span>,</span><br><span class="line">        <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, opts</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 샘플에서는 5번 까지만 요청하고 종료한다.</span></span><br><span class="line">            <span class="keyword">if</span> (tryCnt &gt; <span class="number">4</span>) &#123;</span><br><span class="line">                xhr.abort();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#log&quot;</span>).append(<span class="string">&quot;&lt;p&gt;&quot;</span> + tryCnt++ + <span class="string">&quot; : &quot;</span> + data.msg + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 응답이 오거나 에러가 발생하면 complete 이벤트가 발생. 다시 longPolling 요청을 한다</span></span><br><span class="line">        <span class="attr">complete</span>: longPolling</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><p>요청후 5초 동안 대기후 응답을 받고, 응답을 받자마자 다시 대기하는 모습을 볼 수 있었습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/140712840-73a139c7-2f86-40ee-ac5a-a2b1732ce9b0.png"></p><p>샘플에서 사용된 코드는 <a href="https://github.com/kys9261/playgrounds/tree/main/polling-and-long-polling">여기</a>서 확인 하실 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;얼마전 실시간 통신을 구현하는 방법에 대해 간단하게 소개한적이 있는데요.&lt;br&gt;그 내용들을 바탕으로 아주 간단하게 샘플을 작성해보았습니다.&lt;/p&gt;
&lt;h2 id=&quot;Polling&quot;&gt;&lt;a href=&quot;#Polling&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Playground" scheme="https://kys9261.github.io/categories/Programming/Playground/"/>
    
    
      <category term="Long Polling" scheme="https://kys9261.github.io/tags/Long-Polling/"/>
    
      <category term="Polling" scheme="https://kys9261.github.io/tags/Polling/"/>
    
  </entry>
  
  <entry>
    <title>클라이언트와 서버간 실시간 통신을 하는 방법</title>
    <link href="https://kys9261.github.io/2021/11/08/programming/web/server-to-client-network-on-web/"/>
    <id>https://kys9261.github.io/2021/11/08/programming/web/server-to-client-network-on-web/</id>
    <published>2021-11-08T01:00:00.000Z</published>
    <updated>2021-11-08T04:49:30.694Z</updated>
    
    <content type="html"><![CDATA[<p>우리가 인터넷을 사용할때는 주로 http 통신을 이용해 서버에 데이터를 요청 합니다. 그럼 서버는 클라이언트의 요청에 맞춰서 데이터를 다시 돌려주곤 하죠.<br>이게 일반적으로 서버와 클라이언트가 데이터를 주고받는 과정입니다. 하지만 여기서 중요한 포인트는 <code>클라이언트의 요청이 있기 전까지는 서버는 어떠한 데이터도 줄 수 없다</code>는 사실입니다.</p><p>하지만 채팅같은 서비스의 경우엔 다른사람이 입력한 내용을 클라이언트가 요청할때만 받아오는게 아니고 계속해서 실시간으로 받아 볼수 있어야 하는데요. 이러한 서비스를 구현하기 위해 다양한 방법들이 존재합니다.</p><p>일반적으로 실시간 통신을 구현하는 방법중에 하나는 단방향 통신을 이용해 실시간으로 데이터를 가져오게 구현하는 방법과, 다른 하나는 양방향 통신을 이용해 서버가 클라이언트로 데이터를 먼저 주는 방식을 사용하는 것입니다. </p><p>단방향 통신을 사용하는 방식에는 대표적으로 Polling, Long Polling, SSE가<br>(Server-Sent Events) 있습니다.</p><h2 id="Polling과-Long-Polling"><a href="#Polling과-Long-Polling" class="headerlink" title="Polling과 Long Polling"></a>Polling과 Long Polling</h2><p><img src="https://user-images.githubusercontent.com/7028715/140646437-3f2721ea-520f-413a-8df2-f52447eb7b78.png" alt="Polling vs Long Polling"><br>출처 : <a href="https://hpbn.co/xmlhttprequest/#polling-longpolling">https://hpbn.co/xmlhttprequest/#polling-longpolling</a></p><h2 id="Polling"><a href="#Polling" class="headerlink" title="Polling"></a>Polling</h2><p>폴링 방식은 http 통신을 <code>주기적</code>으로 날려서 서버에서 클라이언트로 전달할 메시지를 빠르게 가져오는 형태입니다.<br>이미지 왼쪽에 표현된 방식이 폴링 인데요. <code>GET /poll</code>을 서버로 계속 날려서 업데이트된 내용이 있는지 주기적으로 체크합니다.</p><p>장점</p><ul><li>구현이 쉽다.(ajax 통신을 주기적으로 요청하는것 만으로도 구현 가능)</li></ul><p>단점</p><ul><li>폴링 주기가 짧으면 서버에 부하가 발생할 수 있다.</li><li>타이밍에 따라 실시간성이 떨어진다.(이미지 처럼 서버의 응답 이후 서버에 업데이트 내용이 발생하면, 클라이언트의 요청이 있기 전까지 업데이트 내용을 전달하지 못하는 상황이 발생한다.)</li></ul><h2 id="Long-Polling"><a href="#Long-Polling" class="headerlink" title="Long Polling"></a>Long Polling</h2><p>롱 폴링은 폴링 방식의 단점을 개선하기 위한 방식인데 클라이언트에서 서버에 요청을 날리면 서버에서 바로 응답이 해주는게 아니고, 업데이트 내용이 생기면 응답을 해주는 방식입니다. 클라에서는 응답을 받으면 다시 서버로 업데이트된 사항을 요청합니다.(업데이트된 내용이 없어서 timeout이 발생했을때도 다시 요청합니다.)</p><p>하지만 업데이트가 빈번하게 발생하는 상황이라면 폴링 방식과 크게 다르지 않기 때문에 데이터 업데이트가 자주 발생하지 않는 상황에서 폴링에 비해 유리하다고 할수 있습니다. </p><p>지금은 어떻게 처리되는지는 모르겠지만 Facebook 채팅이 Long Polling을 이용해 구현되었다고 합니다. <a href="http://thedreamping.com/">링크</a></p><p>장점</p><ul><li>폴링에 비해 좀더 실시간에 가까운 통신을 구현할 수 있다.</li></ul><p>단점</p><ul><li>서버에서 응답할 내용이 있을때 까지 커넥션을 유지해야해서 클라이언트의 수 가 많아질경우 서버의 부하가 발생한다.(polling과 유사)</li><li>동시에 많은 수의 연결이 요청되고, 반복되면 서버에 갑작스런 부하가 발생할 수 있다.(ex. 100명이 접속해 채팅을 하면 100개의 request가 동시에 서버로 요청 된다.)</li></ul><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p><img src="https://user-images.githubusercontent.com/7028715/139591163-a93b21a3-4d44-4545-81a3-5d2652f7ec4a.png" alt="Poling과 SSE, Websock의 통신 흐름"><br>출처 : <a href="https://hpbn.co/websocket/#transport-flow">https://hpbn.co/websocket/#transport-flow</a></p><p>SSE는 Server-Sent Events의 약어로 서버와 한번 커넥션을 맺어두면 서버에서 클라이언트로 지속적으로 데이터를 푸시하는 형태로 동작합니다.</p><p>HTML5의 등장과 함께 표준화된 기술입니다. 따라서 IE를 제외한 대부분의 브라우저에서 지원을 하고 있습니다. <a href="https://caniuse.com/eventsource">지원 범위</a> </p><p>주기적으로 클라이언트에게 어떤 알림을 처리해야할때 사용하면 좋을거 같습니다. (ex. 키워드 알림, 댓글 알림)</p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>위에 소개했던 기술과 다르게 WebSocket은 양방향 통신을 가능하게 해주는 기술입니다. 클라에서도 언제든지 서버로 요청을 날릴 수 있고, 서버에서도 언제든지 클라이언트로 응답을 보낼 수 있습니다.</p><p>WebSocket은 IE를 포함한 거의 모든 브라우저에서 동작하기 때문에 호환성에 대한 걱정을 하지 않아도 됩니다. <a href="https://caniuse.com/mdn-api_websocket">지원 범위</a></p><p>장점</p><ul><li>양방향 통신을 구현할 수 있다.</li></ul><p>단점</p><ul><li>다른 방식에 비해 커넥션 비용이 많이 든다.</li></ul><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>웹 환경에서의 실시간 통신을 구현하는 방식에 대해 간단하게 알아보았습니다. 위 글을 정리하면서 느낀건 ‘어떤 방식이 더 뛰어나다’가 아닌 내가 구현하려는 서비스의 특징과, 서버 상황에 맞는 올바른 기술을 선택하는것이 중요 하다고 생각이 됩니다.</p><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><a href="https://d2.naver.com/helloworld/1052">https://d2.naver.com/helloworld/1052</a></li><li><a href="https://kuimoani.tistory.com/entry/%EC%9B%B9%EC%B1%84%ED%8C%85-%EA%B5%AC%ED%98%84%EC%8B%9C-Long-Polling-%EB%B0%A9%EC%8B%9D%EA%B3%BC-Polling%EB%B0%A9%EC%8B%9D-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0">https://kuimoani.tistory.com/entry/%EC%9B%B9%EC%B1%84%ED%8C%85-%EA%B5%AC%ED%98%84%EC%8B%9C-Long-Polling-%EB%B0%A9%EC%8B%9D%EA%B3%BC-Polling%EB%B0%A9%EC%8B%9D-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0</a></li><li><a href="https://adrenal.tistory.com/20">https://adrenal.tistory.com/20</a></li><li><a href="https://medium.com/@icehongssii/%EA%B9%9C%EC%B0%8D%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%83%81%EC%8B%9D-2-2-http%EB%A5%BC-%EB%84%98%EC%96%B4%EC%84%9C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9websocket-c49125e1b5a0">https://medium.com/@icehongssii/%EA%B9%9C%EC%B0%8D%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%83%81%EC%8B%9D-2-2-http%EB%A5%BC-%EB%84%98%EC%96%B4%EC%84%9C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9websocket-c49125e1b5a0</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events">https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events</a></li><li><a href="https://spoqa.github.io/2014/01/20/sse.html">https://spoqa.github.io/2014/01/20/sse.html</a></li><li><a href="https://boxfoxs.tistory.com/403">https://boxfoxs.tistory.com/403</a></li><li><a href="https://hpbn.co/">https://hpbn.co/</a></li><li><a href="https://velog.io/@nomorebuild/SSEServer-Sent-Events-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0">https://velog.io/@nomorebuild/SSEServer-Sent-Events-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0</a></li><li><a href="http://clearpal7.blogspot.com/2016/06/vs.html">http://clearpal7.blogspot.com/2016/06/vs.html</a></li><li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=youreme&amp;logNo=110162110369">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=youreme&amp;logNo=110162110369</a></li><li><a href="https://velog.io/@hustle-dev/JavaScript-Long-Polling">https://velog.io/@hustle-dev/JavaScript-Long-Polling</a></li><li><a href="https://www.baeldung.com/spring-server-sent-events">https://www.baeldung.com/spring-server-sent-events</a></li><li><a href="https://boxfoxs.tistory.com/403">https://boxfoxs.tistory.com/403</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events</a></li><li><a href="https://javacan.tistory.com/entry/spring-webflux-server-sent-event-1">https://javacan.tistory.com/entry/spring-webflux-server-sent-event-1</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우리가 인터넷을 사용할때는 주로 http 통신을 이용해 서버에 데이터를 요청 합니다. 그럼 서버는 클라이언트의 요청에 맞춰서 데이터를 다시 돌려주곤 하죠.&lt;br&gt;이게 일반적으로 서버와 클라이언트가 데이터를 주고받는 과정입니다. 하지만 여기서 중요
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Web" scheme="https://kys9261.github.io/categories/Programming/Web/"/>
    
    
      <category term="websocket" scheme="https://kys9261.github.io/tags/websocket/"/>
    
      <category term="http" scheme="https://kys9261.github.io/tags/http/"/>
    
      <category term="polling" scheme="https://kys9261.github.io/tags/polling/"/>
    
      <category term="long polling" scheme="https://kys9261.github.io/tags/long-polling/"/>
    
      <category term="ajax" scheme="https://kys9261.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>2021 핵토버페스트 첫 참가기!</title>
    <link href="https://kys9261.github.io/2021/10/20/programming/life/2021-hacktoberfest/"/>
    <id>https://kys9261.github.io/2021/10/20/programming/life/2021-hacktoberfest/</id>
    <published>2021-10-19T15:00:01.000Z</published>
    <updated>2021-11-08T03:08:03.909Z</updated>
    
    <content type="html"><![CDATA[<p>얼마전 탈잉에서 개발자들/개발자를 준비하는 사람들을 위한 <a href="https://taling.me/Talent/Detail/38586">온라인 클래스</a>를 오픈한적이 있었는데요. 커리어 성장에 관한 내용을 주제로 5명의 연사분들이 강연을 해주셨는데 아주 유익했던 시간이었습니다! 강연중에 오픈소스로 성장하는 방법과 발표를 통해 성장하는 방법의 내용을 들으면서 <code>핵토버페스트</code> 라는 행사에 대해서 알게 되었는데요, 마침 10월에 진행하는 행사인데 마침 강연도 10월 1일에 진행이되어서 한번 참가를 해봐야겠다는 생각을 가지고 핵토버 사이트에 들어가서 일단 가입(?) 부터 합니다.  </p><p><img src="https://user-images.githubusercontent.com/7028715/137503879-dd352510-d0fb-4ef9-a91a-8df7eb29eed7.png"></p><p>메인페이지 가운데에 Start Hacking을 눌러서 일단 시작해봅니다. github나 gitlab의 아이디로 진행을 하는데 github로 진행하면 아래와 같이 제 github 프사와 함께<br>완료된 PR, 진행중인 PR 갯수가 나옵니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/137504914-3689af3e-04bd-4c07-912c-71da6d646cf2.png"></p><p>그리고 Participant Goal 옆에 희미하게 꽃? 4개가 있는데, 4개 모두 불이 들어오면 핵토버페스트 완료(?) 인거 같습니다.(아직 0개라 잘 모르겠…)<br>공식 홈페이지에서 할 수 있는건 저것 뿐인거 같습니다.</p><p>핵토버페스트의 역사는 이미 다른 블로그나 <a href="https://www.youtube.com/channel/UC8sdj22dFgUj32ce0sAtK2Q">유튜브</a>를 통해서 알 수 있어서 여기서 소개하지는 않고, 그래도 아주 간단하게 요약하면.  </p><h1 id="10월에-PR-4개를-올리고-머지가-되면-티셔츠를-줍니다"><a href="#10월에-PR-4개를-올리고-머지가-되면-티셔츠를-줍니다" class="headerlink" title="10월에 PR 4개를 올리고, 머지가 되면 티셔츠를 줍니다!"></a><strong>10월에 PR 4개를 올리고, 머지가 되면 티셔츠를 줍니다!</strong></h1><p>인데 생각보다 쉽네? 라고 생각하면서 이참에 오픈소스 활동을 해봐야지! <del>(티셔츠에 눈이멀어)</del> 시작했지만 생각보다 만만하지 않다는걸 느꼈습니다. 지금은 PR 4개를 모두 처리하고 최종 완료(머지후 14일후 최종 완료 됩니다.)를 기다리고 있는데 한번 후기를 적어볼까 합니다.</p><h2 id="첫-핵토버페스트-PR의-경험"><a href="#첫-핵토버페스트-PR의-경험" class="headerlink" title="첫 핵토버페스트 PR의 경험"></a>첫 핵토버페스트 PR의 경험</h2><p>평소에 오픈소스 기여 활동을 활발히 하지 않은 저로써는 어떤것부터 시작해야할지 막막했습니다. 그래서 우선은 핵토버페스트 정보를 얻을 수 있는 사이트들을 찾으면서 저 같이 오픈소스에 기여한 경험이 없는 사람이 가볍게 기여할 수 있는 저장소에 대한 정보를 수집하기 시작했는데 <a href="https://www.hacktoberfestkorea.com/">한국인들을 위한 핵토버페스트 사이트</a>가 있는것을 알게 되었습니다. 한국어로 아주 친절하게 핵토버페스트의 정보, 규칙, 다른분들의 후기, 초보자들을 위한 PR방법, 그리고 쉬운 한글/영문 프로젝트의 목록들이 적혀있었는데요. 안그래도 처음으로 시도 해볼법한 프로젝트를 찾고 있던중 이었는데 마음이 한결 편해지면서 영문 프로젝트중 아주 간단하게 자신의 프로필을 올리면 되는 <a href="https://github.com/Binary-Cumates/Hacktoberfest-21-Open-First-PR">저장소</a>에 첫 핵토버페스트 PR을 날려보기로 합니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/137524425-e64a4dfa-a872-4dbd-9899-7049649904e6.png"></p><p>PR을 올린지 얼마 되지 않아 저장소 관리자가 <code>hacktoberfest-accepted</code>라는 라벨을 추가해주며 저장소에 제 커밋을 머지해줬습니다.</p><p>드디어 핵토버페스트의 첫 PR!! 오픈소스 활동이라고 하기엔 너무 단순하고도, 핵토버페스트의 취지와는 살짝 맞지않는 저장소에 PR이지만 그래도 나름 첫 핵토버페스트에 첫 PR이라 나름 신난 상태였는데요.</p><p>핵토버페스트에 단순히 PR카운트를 올리려고 비슷한 저장소에만 PR을 올리는 형태의 사례가 많았나봅니다.<br>제가 첫 PR을 올린 저장소는 핵토버페스트에서 제외된 저장소로 나왔고, 결국 카운팅에 포함되지 않았습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/137525458-0422110b-55d1-4cba-a7c7-f05707252e3b.png"></p><p>한국 핵토버페스트 사이트를 보니 작년까지는 위와 비슷한 저장소들도 인정해줬는데 올해부터는 정책이 좀 변경된거 같았습니다. 공식 홈페이지에도 <a href="https://hacktoberfest.digitalocean.com/resources/qualitystandards">PR품질에 대한 가이드</a>를 제공해주고 있었습니다.</p><p>정상적인 오픈소스 활동이 아니라고 판단되는 경우엔 저장소 뿐만아니라 PR자체도 반영이 안될 수 있는거 같습니다. 그렇게 저의 첫 핵토버페스트 PR경험은 이렇게 금방 끝이 났습니다.</p><p>제 첫 PR이 아쉽게 카운팅이 되지 못하고, 저장소도 핵토버페스트에서 제외가 되었지만 오히려 이걸 또 새로운 PR의 기회로 삼으면 좋을거 같다는 생각이 들었습니다. 아직 한국 핵토버페스트 사이트에는 제외된 저장소를 초보자용 프로젝트로 안내하고 있어서 이걸 수정하는 PR을 날리자!!(위기는 기회인가?!) 라는 생각으로 빠르게 문서를 수정해 PR을 날렸습니다! </p><p>하지만!!!</p><p><img src="https://user-images.githubusercontent.com/7028715/137529887-42b33fde-aa1e-48dc-9a7e-79bcdbf9e844.png"></p><p>이미 다른분이 저보다 먼저 PR을 날리셨고 제 PR은 closed 되면서 또 한번 끝나버렸습니다.<br>이렇게 두번의 PR이 아쉽게 끝나고나자 “그냥 무분별하게 PR을 날리면 안되겠구나”라는 생각이 들었습니다.</p><p>내가 작업한 결과물이 빛을 발하기 위해서는 이미 진행되고 있는 이슈인지, 정상적인 저장소인지, 활발하게 활동하는 저장소인지 등등 을 살펴서 PR을 날리는게 시간과 노력을 아낄 수 있는거 같습니다. <del>이후에 시간과 노력을 헛되이쓴 사례가 또 나옵니다.</del></p><h2 id="이슈를-찾아-헤메는-github의-개발자"><a href="#이슈를-찾아-헤메는-github의-개발자" class="headerlink" title="이슈를 찾아 헤메는 github의 개발자?"></a>이슈를 찾아 헤메는 github의 개발자?</h2><p>평소에 오픈소스 활동을 하지 않다가 갑자기 오픈소스 활동을 하려고 하면 어떤것부터 시작해야할지 엄청 막막합니다. 오픈소스 활동하시는 분들의 얘기를 들어보면 ‘평소에 자주 사용하는 라이브러리를 우선 살펴봐라’ 라고 하시는데요.</p><p>개발을 하면서 수많은 라이브러리들을 사용만 했지 그 오픈소스 활동을 해야겠다는 생각은 해본적이 없었습니다. 그러다보니 어떤 오픈소스를 선택해야할지 너무 막막했습니다. 그래서 우선 github에서 어떤 오픈소스가 있는지, 핵토버페스트에 참여하는 오픈소스는 어떤게 있는지 확인해보기로 했습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/138098001-2ca0415d-d605-4831-a329-b40fd9b2d91f.png"></p><p>github 검색 기능중에는 Topic을 검색하는 기능이 있는데 키워드를 hacktoberfest 또는 hacktoberfest2021를 검색해서 핵토퍼페스트에 참가하는 프로젝트들을 찾을 수 있었습니다.<br>그리고 필터를 이용해서 제가 주로 사용하는 언어, 그리고 최근 업데이트가 진행되었던 목록 순서로 정렬을 했습니다. 핵토버페스트가 8번째 진행되면서 예전에 hacktoberfest 토픽을 추가해두고 유지보수를 더이상 하지 않는 프로젝트도 많아서 최근 업데이트 된 기준으로 정렬을 했습니다. 하지만 쉬워보이는 이슈면 이미 다른 사람들이 달려들어서 달라고 손을 듭니다. 내가 해볼까 하면 이미 누군가 진행하고 있고 그렇게 다른 이슈를 찾아 또 여행을 떠납니다…</p><p><img src="https://user-images.githubusercontent.com/7028715/138104872-7b58fcb2-15e9-4fd9-a22c-3e96f5e06654.png"></p><p>핵토버페스트 기간이라 그런가 평소에도 다른 개발자분들이 열심히 오픈소스 활동을 하는지 궁금해하며.. 열심히 깃허브에서 이슈를 찾았습니다.</p><h2 id="이슈를-처리할땐-손들고-하자"><a href="#이슈를-처리할땐-손들고-하자" class="headerlink" title="이슈를 처리할땐 손들고 하자!!"></a>이슈를 처리할땐 손들고 하자!!</h2><p>리스트를 쭉 보면서 설명과 스타의 갯수를 보면서 제가 작업 할 수 있을만한 프로젝트가 있는지 찾아봤습니다. 이름은 한번씩 들어본 프로젝트들의 저장소도 보이고, 처음보지만 활발하게 사용되고 있는 저장소들도 보였는데요. </p><p><img src="https://user-images.githubusercontent.com/7028715/138100213-160608b6-93a1-4cc6-ac84-12622ad6c205.png"></p><p>그 목록들 중에서 흥미가 있을법한 프로젝트를 찾았습니다. 물론 이슈의 제목만 봤을때 쉽게 처리 할 수 있을거 같았습니다. <code>ToolJet</code>라는 프로젝트인테 코드 없이 간단한 리더보드 같은 내부 시스템을 만들 수 있는 툴인거 같았습니다. 리액트로 만들어졌는데, 저는 리액트 경험은 없지만 기본적인 프론트엔드 지식으로도 간단한 이슈 정도는 처리 할 수 있을거 같아서 이 프로젝트를 선택하고 이슈를 찾았는데.</p><p>리액트 경험이 없어서 프로젝트를 열어서 분석해보고 이슈가 발생되는 원인과 처리를 해보고 있는도중 누군가 해당 이슈에 손을 들어서 가져가 버렸습니다. 처음엔 손을 들까 말까 고민도 했지만 괜히 손들었다가 못한다고 하면 민망할까봐 일단 좀더 해당 이슈를 분석해보고 손을 들려고 했지만 이미 늦어버렸습니다.  </p><p>물론 손을 든다고 해당 이슈가 처리되지 않는 경우도 있긴 합니다. 본인이 처리하겠다고 손을 들었다가 잠수를 타는 경우도 있더라구요. 그럴땐 코멘트로 손을 살며시 내리면 다른 사람들이 다시 가져가 더라구요. 핵토버페스트 관련 영상중에 <a href="https://www.youtube.com/watch?v=VcTX14dr658">아웃사이더님의 영상에</a>서도 이슈는 손들고 해라 라는 내용이 나오는데… 망설이고 고민하는 바람에 제가 이 이슈를 분석하고, 수정하면서 들인 시간은 그렇게 날아가버렸습니다.</p><h2 id="이슈를-어떻게-하면-더-빠르고-편하게-찾을까"><a href="#이슈를-어떻게-하면-더-빠르고-편하게-찾을까" class="headerlink" title="이슈를 어떻게 하면 더 빠르고 편하게 찾을까?"></a>이슈를 어떻게 하면 더 빠르고 편하게 찾을까?</h2><p>이슈를 한참 찾아헤메고, 다른사람이 먼저 처리해버리고 그러한 경험을 몇번 하다보니 이슈를 어떻게 찾는게 좋을까 라는 생각을 했습니다. 그래서 이것저것 찾아보다 두가지 방법을 알아냈는데요.</p><h4 id="1-CodeTriage-서비스를-이용하자"><a href="#1-CodeTriage-서비스를-이용하자" class="headerlink" title="1. CodeTriage 서비스를 이용하자."></a>1. CodeTriage 서비스를 이용하자.</h4><p>오픈소스에 활동에 대한 자료들을 찾아보던중 <a href="https://www.codetriage.com/">CodeTriage</a>라는 서비스를 알게 되었는데요.</p><p><img src="https://user-images.githubusercontent.com/7028715/138108563-71cca765-5faa-4426-ab0f-78ae51da1664.png"></p><p>이 서비스는 관심있는 오픈소스 프로젝트를 선택해두면 매일 해결되지 않은 이슈 3개를 매일로 보내줍니다. 이슈 모니터링 서비스? 라고 봐야할거 같은데요.<br>이런 서비스를 이용해서 평소에 관심있던 프로젝트에 올라오는 이슈를 보고 참여하면 핵토버페스트가 끝난뒤에도 오픈소스 활동에 큰 도움이 될거라고 생각합니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/138108552-9356729d-bf25-4a69-b199-59d797614afc.png"></p><h4 id="2-githb의-issue검색을-활용하자"><a href="#2-githb의-issue검색을-활용하자" class="headerlink" title="2. githb의 issue검색을 활용하자"></a>2. githb의 issue검색을 활용하자</h4><p>github를 사용해온지 꽤나 오래되었지만 상단의 메뉴를 이용해 무언가를 해볼 일이 없었는데요. 저장소에 붙은 토픽이나, 이슈에 붙은 라벨에 대해서 알게되면서 특정 라벨이 붙은 이슈를 검색하면 되겠구나 라는 생각이 들었습니다. 주로 핵토버페스트에 참가하는 저장소에서 이슈에 <code>hacktoberfest</code> 라벨을 추가하고 프로젝트에 익숙하지 않은 개발자들을 위해 아주 간단한 이슈들은 <code>good first issue</code> 라는 라벨을 붙여서 식별을 쉽게 해주고 있었습니다.(good first issue, beginner-friendly 등 라벨 초심자를 위한 다양한 라벨이 사용되고 있습니다.) 그래서 저는 검색창에<br><code>label:hacktoberfest label:&quot;good first issue&quot;</code> (두 키워드를 AND로 검색합니다. 쌍따옴표는 공백을 처리하기 위함입니다.)를 입력해서<br>두 라벨이 함께 붙어있는 이슈를 검색했구요. 기본적인 정렬이 Newest(최신순)이어서 최근 올라온 이슈들을 아주 빠르게 확인이 가능합니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/138110608-46145cb6-fdaa-477e-8343-afe354480b66.png"></p><p>검색을 통해 github의 모든 이슈를 한눈에 보고 제목을 읽으면서 해볼 수 있겠다 생각이 드는것, 할당된 사람이 없는것, 코멘트가 안달려있는것 위주로 찾아가서 해봐야겠다고 마음 먹으면 바로 손을 들고 이슈를 처리 했습니다. 핵토버페스트가 아무래도 선착순으로 티셔츠를 주는 행사다보니 이런 방식으로 이슈를 찾아 처리하면 좋을거 같습니다. (행사의 취지에는 살짝 어긋나는 형태의 오픈소스 활동인거 같기도 하지만, 오픈소스 활동을 경험해보고 싶은 초심자에게는 좋은 방법이 아닐까 생각해봅니다.)</p><h2 id="이슈는-우리-가까이에-있습니다"><a href="#이슈는-우리-가까이에-있습니다" class="headerlink" title="이슈는 우리 가까이에 있습니다"></a>이슈는 우리 가까이에 있습니다</h2><p>위에 소개했던 내용처럼 하나의 PR을 날리기 위해서 많은 시간과 노력을 투자했는데요. 생각해보면 오픈소스 활동이란건 어떤 코드를 리팩토링해서 개선하는것 뿐만아니라, 오타수정, 문서번역 등등 단순한 작업들도 포함이 됩니다. 핵토버페스트라는 행사를 처음 알게된 후 자주 들어갔던 <a href="https://www.hacktoberfestkorea.com/">핵토버페스트 한국 홈페이지</a>도 github의 page기능을 이용해 서비스가 되고 있었고, <a href="https://github.com/phg98/hacktoberfestkorea/issues">저장소에 issue</a>도 몇개 있었습니다. 사이트는 <a href="https://www.mkdocs.org/">mkdocs</a>라는 마크다운 문서를 이용해 페이지를 만들어주는 문서화 툴을 이용해 생성되었는데요. 이 툴로 만들어지면서 발생했던 간단한 마크업 이슈가 등록이 되어있어서 mkdocs는 잘 모르지만 수정이 그리 어려울거 같지 않아서 이슈를 분석하고 두개의 이슈를 처리했습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/138114181-7f2c1eca-3f6c-40fb-9e54-3e56a77935c1.png"></p><p>사실 그동안 외국 저장소만 찾아가면서 나는 기능추가나 성능개선 같은 거창한 이슈를 처리해야겠다는 생각으로 돌아다녔지만 현실은 쉽지만 않았고, 내가 할 수 있는 능력에서 하자 라는 생각으로 변했습니다.<br>이름을 한번쯤은 들어봤을 라이브러리를 선택하기 보다는 페이지나 정보위주의 저장소에 우선적으로 관심을 가지면서, 핵토버페스트가 끝나더라도 평소 사용중인 오픈소스에 대해 관심을 가져간다면 누구나 다 알법한 프로젝트의 컨트리뷰터로 활동 하는 날이 오지 않을까 생각해봅니다.</p><h2 id="핵토버페스트-목표-달성"><a href="#핵토버페스트-목표-달성" class="headerlink" title="핵토버페스트 목표 달성!"></a>핵토버페스트 목표 달성!</h2><p>핵토버페스트를 시작한지 약 1주일만에 4개의 PR을 모두 채웠습니다. 4개 이상의 PR이 카운팅 되면 아래와 같이 축하한다는 메일이 옵니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/138116305-28619924-ddd4-479c-8d4e-192c4c4eaf8c.png"></p><p>처음으로 참가해본 핵토버페스트인데 오픈소스 활동에 관심을 가지고 행동해본게 처음이라 배운것도 많고 뭔가 뿌듯하기도 합니다. 아직 참여 안해보신 분들은 한번씩은 해보시면 좋은 경험이 될거라고 생각합니다.</p><h2 id="모든-PR-Complete-리워드-안내"><a href="#모든-PR-Complete-리워드-안내" class="headerlink" title="모든 PR Complete!! 리워드 안내!!"></a>모든 PR Complete!! 리워드 안내!!</h2><p>날린 모든 PR이 머지된뒤 14일이 지나서 Total Complete가 4개가 되었고, 위에 꽃 모양이 모두 채워졌습니다!</p><p><img src="https://user-images.githubusercontent.com/7028715/138604663-3a2ab401-afa5-4ec0-b57d-e3fbbc6b9287.png"></p><p>PR목록이 있던 위치에 핵토버페스트 리워드에 대한 안내를 해주고 있습니다! 링크를 누르면 리워드에 대한 안내페이지로 넘어가고.<br>그 하단엔 리딤코드와 함께 <code>DEV 뱃지</code>에 대한 내용도 획인하는 버튼이 있습니다.<br>(뱃지에 대한건 제일 아래 쓰겠습니다.)</p><p><img src="https://user-images.githubusercontent.com/7028715/138604930-256d7861-04d2-4e6e-8cee-02ed64fa5cb8.png"></p><p>리워드에 대한 내용은 처음 보는데 공용/여성용 티셔츠, 나무심기 셋중에 하나 선택을 하게 됩니다. 탄소 중립을 위해 티셔츠 대신 나무심기 옵션을 추가해준게 아주 좋은거 같습니다! 하지만 저는 첫 핵토버페스트라서 그래도 기념으로 티셔츠로 선택했습니다! <del>벗어날 수 없는 티셔츠의 유혹</del></p><p><img src="https://user-images.githubusercontent.com/7028715/138604700-76c64e45-5068-4316-8e23-0468b24e0d68.png"><br><img src="https://user-images.githubusercontent.com/7028715/138604699-c76792bd-daf3-4143-b4a5-7976bf3c78e9.png"></p><p>내년에는 저도 탄소중립에 참여하게 위헤 나무를 심어봐야겠습니다!<br>그리고 <code>DEV 뱃지</code>는 뭔지 잘 모르겠습니다ㅠㅠ</p><p><img src="https://user-images.githubusercontent.com/7028715/138605126-d0b5220b-5d57-4719-82e0-4260f63115fb.png"></p><p><a href="https://shop.dev.to/products/dev-hacktoberfest-badge">2021핵토버페스티벌 뱃지</a> 상품을 추가로 주는거 같은데 뭔가 설명에는 그냥 DEV 프로필에 뱃지가 나타날거다 라고 써있어서 뭔가 온라인에서 표시되는 뱃지 같은데.</p><p><img src="https://user-images.githubusercontent.com/7028715/138605490-7683f04a-c5b8-49eb-8bf8-7253806153cf.png"></p><p>가격이 무려 256달러?? 아무나 못사게 하려고 비싸게 해둔건지 아니면 다른 무언가가 있는지 모르겠습니다. 결제할때 주소입력도 받던데. 오프라인 뱃지는 아니겠죠..? (아시는분 있으면 댓글 달아주세요!!)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;얼마전 탈잉에서 개발자들/개발자를 준비하는 사람들을 위한 &lt;a href=&quot;https://taling.me/Talent/Detail/38586&quot;&gt;온라인 클래스&lt;/a&gt;를 오픈한적이 있었는데요. 커리어 성장에 관한 내용을 주제로 5명의 연사분들이 강연
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Life" scheme="https://kys9261.github.io/categories/Programming/Life/"/>
    
    
      <category term="github" scheme="https://kys9261.github.io/tags/github/"/>
    
      <category term="핵토버페스트" scheme="https://kys9261.github.io/tags/%ED%95%B5%ED%86%A0%EB%B2%84%ED%8E%98%EC%8A%A4%ED%8A%B8/"/>
    
      <category term="hacktoberfest" scheme="https://kys9261.github.io/tags/hacktoberfest/"/>
    
      <category term="오픈소스" scheme="https://kys9261.github.io/tags/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>gson에서 필드를 제외하는방법</title>
    <link href="https://kys9261.github.io/2021/10/13/programming/java/gson-exclude-field/"/>
    <id>https://kys9261.github.io/2021/10/13/programming/java/gson-exclude-field/</id>
    <published>2021-10-13T14:18:54.000Z</published>
    <updated>2021-10-18T02:18:20.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>Spring Boot를 사용해서 개발을 하면 API의 응답/결과 값을 처리할때 기본적으로 Jackson 라이브러리를 이용해 JSON와 POJO간 변환 처리를 진행합니다. 하지만 gson을 이용해 변환을 처리하게 할 수 도 있습니다. Jackson도 물론 좋은 라이브러리지만 gson이 더 성능이 좋아서 그렇게 하시는분들도 있는거 같더라구요. <a href="https://www.overops.com/blog/the-ultimate-json-library-json-simple-vs-gson-vs-jackson-vs-json/">JSON 라이브러리 벤치마크</a></p><p>회사에서도 현재 그렇게 사용하고 있습니다. 맨 처음 프로젝트를 설정하신 분의 의도와 히스토리는 정확히는 모르겠지만 아마도 성능의 문제로 하지 않았을까 싶습니다.</p><p>어쨌든! gson을 이용해서 API 결과값을 전달할때 항상 요청받는 사항들이 있습니다. “A 필드 안쓰는데 안내려주시면 안돼요?”, “B 필드 빼고 내려주세요” 라는 이야기인데요 사용하지도 않는 필드가 내려오는게 보기에 좋지 않을 수도 있고, 불필요하게 페이로드가 커져서 일 수도 있을거 같습니다. <del>(사실 안물어봤어요… 명확한 이유가 있나 한번 물어봐야겠습니다)</del></p><p>그럼 gson을 이용해 직렬화/역직렬화 할때 필드를 제거하는 방법에 대해 알아볼까 합니다.</p><p>&nbsp;</p><h2 id="방법-0-DTO와-Payload를-분리"><a href="#방법-0-DTO와-Payload를-분리" class="headerlink" title="방법 0 - DTO와 Payload를 분리"></a>방법 0 - DTO와 Payload를 분리</h2><p>특정 기술을 사용하는 방법은 아니고 단순하게 생각해서 요청으로 받을 DTO와 응답으로 돌려줄 DTO(payload라고 부르겠습니다)를 분리하여서 처리하는 방식을 선택할 수 있습니다. </p><p>payload에는 노출할 필드만 두고 DTO에는 모든 필드를 두고 처리한다면 요구사항 처럼 특정 필드만 노출이 안되게끔 처리가 가능할 수 있을거 같습니다.</p><p>DTO를 payload로 매핑할때는 <a href="https://github.com/modelmapper/modelmapper">ModelMapper</a>를 이용해서 데이터를 매핑하면 좀더 수월하게 처리 할 수 있을거 같습니다.</p><p>&nbsp;</p><h2 id="방법-1-transient-키워드-사용"><a href="#방법-1-transient-키워드-사용" class="headerlink" title="방법 1 - transient 키워드 사용"></a>방법 1 - transient 키워드 사용</h2><p>gson의 github 이슈를 보면 종종 Expose는 있는데 왜 반대 되는건 없냐! 만들어달라! NotExpose나 Exclude를 만들어달라! 하는 <a href="https://github.com/google/gson/issues/1489">이슈</a>가 가끔씩 있습니다. java 키워드중 transient를 쓰라고 하는 답변이 있는데요. </p><p><strong>transient</strong> 키워드를 필드앞에 적어두면 직렬화 되지 않는다고 합니다.<br>JVM에서 해당 키워드가 있는 필드는 기존의 값을 무시하고 변수타입의 기본값으로 대체된다 라고 하는데.(참고 마지막 링크에 해당 내용이 있습니다) 기본값도 값이 있는거 아닌가?(0은 null이 아닌것처럼) 라는 생각이 들었습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/137171314-29cdf2f6-f1b8-45ad-8fb2-9c5ecb9d85cf.png" alt="스크린샷 2021-10-14 오전 1 05 02"></p><p>필드 선언시 transient 키워드를 함께 사용해주면 응답값에서 해당 필드가 제외됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> String description;</span><br></pre></td></tr></table></figure><p>** transient 키워드랑 static or final 키워드를 같이 사용할경우 직렬화가 되는 <a href="https://www.geeksforgeeks.org/transient-keyword-java/">예제</a>가 있습니다. java I/O스트림을 이용해서 직렬화/역직렬화를 수행시엔 직렬화가 됩니다.</p><p>gson사용시엔 gson에서 transient 키워드를 한번 더 걸러서 직렬화에서 제외합니다. <a href="https://github.com/google/gson/blob/aa5554e69a2d5ee7e557b3cc1f5d68275fd4c1ab/gson/src/main/java/com/google/gson/internal/Excluder.java#L152">참고</a></p><p><strong>참고</strong></p><ul><li><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.1.3">https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.1.3</a></li><li><a href="https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/jdk.jdi/share/classes/com/sun/tools/jdi/VMModifiers.java#L28">https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/jdk.jdi/share/classes/com/sun/tools/jdi/VMModifiers.java#L28</a></li><li><a href="https://www.baeldung.com/java-transient-keyword">https://www.baeldung.com/java-transient-keyword</a></li><li><a href="https://en.wikibooks.org/wiki/Java_Programming/Keywords/transient">https://en.wikibooks.org/wiki/Java_Programming/Keywords/transient</a></li><li><a href="https://www.geeksforgeeks.org/transient-keyword-java/">https://www.geeksforgeeks.org/transient-keyword-java/</a></li></ul><p>&nbsp;</p><h2 id="방법-2-Expose-사용"><a href="#방법-2-Expose-사용" class="headerlink" title="방법 2 - @Expose 사용"></a>방법 2 - @Expose 사용</h2><p>gson에서는 <a href="https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/Expose.html">Expose</a>라는 어노테이션을 제공해주는데 말 그대로 해당필드를 직렬화/역직렬화시 노출 시켜준다는 어노테이션 입니다.</p><p>하지만 기본적으로 해당 어노테이션이 없어도 모든 필드가 다 노출되는데, 어노테이션을 사용하려면 Gson을 처음 초기화할때 excludeFieldsWithoutExposeAnnotation() 메소드를 사용해 줘야합니다. 그래야 해당 어노테이션이 붙은 필드만 노출이되게 동작합니다.</p><p>그럼 위와 같은 내용으로 excludeFieldsWithoutExposeAnnotation()를 이용해 gson을 초기화 해주고, 노출시키고 싶지 않은 필드에만 @Expose를 안 넣으면 됩니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Expose</span></span><br><span class="line">    <span class="keyword">private</span> String id; <span class="comment">// 노출</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 비노출</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 방법대로면 gson에서 제공해주는 어노테이션으로 특정 필드가 노출되지 않게 처리할 수 있지만, 예를들어 필드가 100개인데 1개만 노출시키지 않겠다고 하면 99개의 필드에 @Expose를 붙여야하는 번거로움이 있습니다 -&gt; 그래서 반대되는 기능을 만들어달라고 하는거 같습니다.</p><p>여기서 생각해봐야할게 그럼 왜 gson은 반대되는 기능을 하는 어노테이션을 안만들었을까 하는 건데요.</p><p><a href="http://www.yunsobi.com/blog/652">다른 분들의 의견</a>을 참고하자면 @Expose를 사용하지 않고 처리할경우 필드가 추가되고, 해당 필드가 보안상 노출되지 않아야 하는 필드라면 개발자 따로 비노출 처리를 해야하고 실수로 그 처리를 하지 않게되면 보안상 이슈가 발생한다. 그래서 노출할 필드만 명시적으로 처리하는거 같다 라는 의견이 있었습니다.</p><p>&nbsp;</p><h2 id="방법-3-ExclusionStrategy-사용"><a href="#방법-3-ExclusionStrategy-사용" class="headerlink" title="방법 3 - ExclusionStrategy 사용"></a>방법 3 - ExclusionStrategy 사용</h2><p>제외 전략을 개발자가 직접 구현해 gson 초기화시 설정을 할 수 있습니다.</p><p>구현 방법 순서는 다음과 같습니다.</p><ol><li>비노출필드에 사용될 annotation 생성</li><li>ExclusionStrategy 구현</li><li>gson 초기화시 추가</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 비노출필드에 사용될 annotation 생성</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Exclude &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. ExclusionStrategy 구현</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcludeStrategy</span> <span class="keyword">implements</span> <span class="title">ExclusionStrategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkipField</span><span class="params">(FieldAttributes f)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Exclude 어노테이션이 있는 필드는 true를 반환합니다.</span></span><br><span class="line">        Exclude annotation = f.getAnnotation(Exclude.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 필드 비노출 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 필드 노출</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkipClass</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. gson 초기화시 추가 -&gt; setExclusionStrategies()</span></span><br><span class="line"><span class="comment">// Spring Boot에서 사용하는것처럼 GsonHttpMessageConverter 빈을 등록하고 Gson을 만들때 2번에서 만든 제외 전략을 추가합니다.</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigure</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GsonHttpMessageConverter <span class="title">gsonHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">                .setExclusionStrategies(<span class="keyword">new</span> ExcludeStrategy())</span><br><span class="line">                .create();</span><br><span class="line"></span><br><span class="line">        GsonHttpMessageConverter gsonHttpMessageConverter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">        gsonHttpMessageConverter.setGson(gson);</span><br><span class="line">        <span class="keyword">return</span> gsonHttpMessageConverter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 형태로 처리되면 API의 요청과 응답값을 처리할때 @Exclude annotation이 붙은 필드는 모두 비노출 처리됩니다.</p><p>테스트를 해봅시다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Exclude</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String b; <span class="comment">// 이 필드만 비노출 합니다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TestDTO <span class="title">exclude</span><span class="params">(<span class="meta">@RequestBody</span> TestDTO testDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 역직렬화 결과 출력</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Deserialize-&quot;</span> + testDTO.getA());</span><br><span class="line">    System.out.println(<span class="string">&quot;Deserialize-&quot;</span> + testDTO.getB());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 직렬화때 어떻게 처리되나 확인해봅니다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TestDTO(<span class="string">&quot;Serialize-A&quot;</span>,<span class="string">&quot;Serialize-B&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman을 이용해서 아래와 같이 요청을 날리면 응답은 필드 a만 옵니다. (필드 b는 비노출 처리됩니다.)<br><img src="https://user-images.githubusercontent.com/7028715/137346130-127ae890-b2a4-4de8-aac7-da6047c9d289.png" alt="스크린샷 2021-10-15 오전 12 10 57"></p><p>요청을 받는 컨트롤러에는 b필드가 null로 처리 됩니다.<br><img src="https://user-images.githubusercontent.com/7028715/137346140-38645619-9b5e-4e2d-ae76-7b6273b1c3e7.png" alt="스크린샷 2021-10-15 오전 12 11 34"></p><p>@Exclude 가 붙은 필드 b만 요청(역직렬화)과 응답(직렬화)에서 제외되어서 처리됩니다.</p><p>&nbsp;</p><h2 id="방법-3-1"><a href="#방법-3-1" class="headerlink" title="방법 3-1"></a>방법 3-1</h2><p>방법 3처럼 처리가 되면 직렬화와 역직렬화시 모두 필드가 비노출 처리가 되는데 직렬화 할때만 처리하거나 역직렬화 할때만 처리하거나 하고싶은 경우가 있을 수 있습니다.</p><p>setExclusionStrategies()는 직렬화/역직렬화에 모두 적용되는 전략을 설정하는거라면 아래 두 함수를 잘 이용하면 직렬화/역직렬화 각각 다른 전략을 사용해서 필드를 비노출 처리 할 수도 있습니다.</p><ul><li><a href="https://www.javadoc.io/static/com.google.code.gson/gson/2.8.2/com/google/gson/GsonBuilder.html#addSerializationExclusionStrategy-com.google.gson.ExclusionStrategy-">addSerializationExclusionStrategy</a> : 직렬화에만 적용할 전략을 설정</li><li><a href="https://www.javadoc.io/static/com.google.code.gson/gson/2.8.2/com/google/gson/GsonBuilder.html#addDeserializationExclusionStrategy-com.google.gson.ExclusionStrategy-">addDeserializationExclusionStrategy</a> : 역직렬화에만 적용할 전략을 설정</li></ul><p>&nbsp;</p><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><a href="http://www.yunsobi.com/blog/652">http://www.yunsobi.com/blog/652</a></li><li><a href="https://howtodoinjava.com/gson/gson-exclude-or-ignore-fields/">https://howtodoinjava.com/gson/gson-exclude-or-ignore-fields/</a></li><li><a href="https://www.baeldung.com/gson-exclude-fields-serialization">https://www.baeldung.com/gson-exclude-fields-serialization</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;Spring Boot를 사용해서 개발을 하면 API의 응답/결과 값을 처리할때 기본적으로 Jackson 라이브러리를 이용해 J
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kys9261.github.io/categories/Programming/Java/"/>
    
    
      <category term="gson" scheme="https://kys9261.github.io/tags/gson/"/>
    
      <category term="expose" scheme="https://kys9261.github.io/tags/expose/"/>
    
      <category term="exclude" scheme="https://kys9261.github.io/tags/exclude/"/>
    
      <category term="nonexpose" scheme="https://kys9261.github.io/tags/nonexpose/"/>
    
  </entry>
  
  <entry>
    <title>책 - 클린코드 (5장/형식 맞추기, 6장/객체와 자료 구조)</title>
    <link href="https://kys9261.github.io/2021/10/11/programming/study/book-cleancode/book-clean-code-05-06/"/>
    <id>https://kys9261.github.io/2021/10/11/programming/study/book-cleancode/book-clean-code-05-06/</id>
    <published>2021-10-11T09:22:38.000Z</published>
    <updated>2021-11-07T12:51:12.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5장-형식-맞추기"><a href="#5장-형식-맞추기" class="headerlink" title="5장 - 형식 맞추기"></a>5장 - 형식 맞추기</h1><h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>5장에서는 형식 맞추기로 소개가 되어있지만 가독성 높은 코드를 작성하기 위한 컨벤션 맞추기 라고 봐도 될거 같습니다. 적절한 행의 길이를 맞추고, 변수들끼리 모아두고, 빈 행으로 개념을 분리 하는 등의 방법을 소개하면서 코드를 가독성 높게 만드는 방법을 알려주고 있습니다.</p><p>형식이란건 사실 개발자 개개인에 따라 취향이 확고하게 나뉠 수 있다고 생각이 되는데요<br>아래 코드를 보았을때 저는 1의 형식을 선호하지만 가끔씩 2의 형식을 더 선호하는 사람을 보았습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>) </span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기능상에 문제는 없지만 이런 취향의 차이가 코드에 반영되면 협업을 할때 생산성에 영향이 있을거 같아서 협업을 할때는 컨벤션을 정해두고 그걸 맞춰서 작성하면 좋을거 같습니다.</p><p>제가 일하는 회사에서는 따로 컨벤션을 정해두고 사용하고 있지는 않는데요 일반적으로 다 비슷한 형태의 형식으로 작업이 이뤄지지만 공통의 컨벤션을 적용할 수 있는 방법이 있다면(ex. <a href="https://subicura.com/2016/07/11/coding-convention.html">linter</a> 같은) 좀더 효율성이 좋아지지 않을까 생각을 해보았습니다.</p><p>&nbsp;<br>&nbsp;  </p><h2 id="강의-내용"><a href="#강의-내용" class="headerlink" title="강의 내용"></a>강의 내용</h2><p>포맷팅이 중요한 이유</p><ul><li>가독성에 필수적이다</li></ul><p>클린코드 포맷팅</p><ul><li>적절한 길이 유지</li><li>밀접한 개념은 가까이</li></ul><p>Java Class Declarations</p><ul><li>클래스 선언 순서 (public —&gt; private 순서)</li></ul><p>Team Coding Convention</p><ul><li><a href="https://google.github.io/styleguide/javaguide.html">구글</a></li><li><a href="https://naver.github.io/hackday-conventions-java/">네이버</a></li></ul><p>&nbsp;<br>&nbsp;<br>&nbsp;  </p><h1 id="6장-객체와-자료-구조"><a href="#6장-객체와-자료-구조" class="headerlink" title="6장 - 객체와 자료 구조"></a>6장 - 객체와 자료 구조</h1><h2 id="소감-1"><a href="#소감-1" class="headerlink" title="소감"></a>소감</h2><p>클래스를 만들때 객체지향적으로 생각해서 필드와 클래스를 만드는데 단순히 조회와 설정 함수만 가지고 있는 클래스를 많이 만들었던거 같습니다. 객체지향의 개념은 알고있지만 그걸 제대로 구현하는것은 쉽지 않다는 생각을 했습니다. 책에 나오는 디미터의 법칙과, 기차 충돌에 대한 내용을 읽으면서 ‘나도 저런 코드 작성한적이 있었던거 같은데?’라는 생각도 많이 했습니다. 객체와 자료구조를 구분해서 작성해야하는데 거의 대부분 자료 전달 객체인 형태로(DTO)로 많이 구현했던거 같았습니다. private 필드와 public getter,setter를 습관적으로 만들면서, 기차충돌 형태의 코드가 발생하게끔 만들었던거 같았습니다.</p><h2 id="강의내용"><a href="#강의내용" class="headerlink" title="강의내용"></a>강의내용</h2><p>자료구조 vs 객체</p><ul><li>자료구조 : 데이터 그 자체(조회와 설정만)</li><li>객체 : 비지니스 로직 관련(자료는 숨기고, 추상화된 함수만)   </li></ul><p>객체 - 디미터 법칙</p><ul><li><p>클래스 C의 메서드 f는 다음과 같은 객체의 메서드만 호출해야한다.  </p><ul><li>클래스C  </li><li>자신이 생성한 객체  </li><li>자신의 인수로 넘어온 객체  </li><li>C 인스턴스 변수에 저장된 객체  </li></ul></li><li><p>기차 충돌</p></li></ul><p>DTO</p><ul><li>로직없이 필드만 갖는다</li><li>getter/setter</li></ul><p>Active Record</p><ul><li>Database row를 객체에 맵핑하는 패턴</li><li>Active Record vs Data Mapper<ul><li>Active Record : row + db 접근을 포함 (ROR)</li><li>Data Mapper : row / db 접근 분리 (Hibernate)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;5장-형식-맞추기&quot;&gt;&lt;a href=&quot;#5장-형식-맞추기&quot; class=&quot;headerlink&quot; title=&quot;5장 - 형식 맞추기&quot;&gt;&lt;/a&gt;5장 - 형식 맞추기&lt;/h1&gt;&lt;h2 id=&quot;소감&quot;&gt;&lt;a href=&quot;#소감&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="클린코드" scheme="https://kys9261.github.io/tags/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>책 - 클린코드 (4장/주석)</title>
    <link href="https://kys9261.github.io/2021/10/05/programming/study/book-cleancode/book-clean-code-04/"/>
    <id>https://kys9261.github.io/2021/10/05/programming/study/book-cleancode/book-clean-code-04/</id>
    <published>2021-10-05T11:19:50.000Z</published>
    <updated>2021-10-05T14:21:10.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3장-주석"><a href="#3장-주석" class="headerlink" title="3장 - 주석"></a>3장 - 주석</h1><h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>주석이랑 코드랑은 별개로 움직여서 코드와의 동기화(?)를 개발자가 직접적으로 신경써야 하는 부분이 단점으로 느껴지긴 하지만 개인적으로 다른 사람이 읽었을때 혼란스럽게 만드는 주석외에는 다 좋은 주석이지 않을까 생각이 됩니다. </p><p>물론 주석이 없어야 명확하고 잘짠 코드라고 할수 있겠지만, 실무를 진행하다 보면 한번에 좋은 코드를 짜기란 어렵기 때문입니다. 코드가 완벽하지 않아도 주석을 이용해 해당 코드에 대한 이해도를 증가 시킬 수 있는 주석이라면 얼마든지 환영이지만, 나중엔 그 주석을 없앨 수 있도록 리팩토링 하는 습관을 길러야한다고 생각이 됩니다만. 사실 이것또한 쉽지 않은거 같습니다.(실무에서 엄청난 양의 TODO를 목격하였지만 시간이 지나도 그 TODO는 지워지지 않았습니다…) </p><p>주석을 사용함으로써 얻는 단점이나 장점은 개인마다 각각의 생각이 있을 수 있으므로 정확하게 가이드 하기는 어렵지만 본인이 필요하다고 생각하는 주석을 작성하고 그 주석이 꼭 필요한지, 다른 방식(함수의 이름을 잘 쓴다던지..) 으로 대체할 수 없는지 고민해보면 주석을 좋은 방향으로 사용할 수 있지 않을까 생각해봅니다.</p><p>&nbsp;<br>&nbsp;</p><h2 id="강의-내용"><a href="#강의-내용" class="headerlink" title="강의 내용"></a>강의 내용</h2><p>주석을 최대한 쓰지말자</p><ul><li>주석은 나쁜 코드를 보완하지 못한다.</li><li>주석은 방치된다.</li></ul><p>좋은 주석</p><ul><li>구현에 대한 정보를 제공한다. (ex. 정규식)</li><li>의도와 중요성을 설명한다.</li><li>TODO, FIXME</li></ul><p>주석보다 annotation</p><ul><li>@Deprecated</li><li>@NotThreadSafe</li></ul><p>JavaDoc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3장-주석&quot;&gt;&lt;a href=&quot;#3장-주석&quot; class=&quot;headerlink&quot; title=&quot;3장 - 주석&quot;&gt;&lt;/a&gt;3장 - 주석&lt;/h1&gt;&lt;h2 id=&quot;소감&quot;&gt;&lt;a href=&quot;#소감&quot; class=&quot;headerlink&quot; title=&quot;소감&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="클린코드" scheme="https://kys9261.github.io/tags/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>책 - 클린코드 (3장/함수)</title>
    <link href="https://kys9261.github.io/2021/09/23/programming/study/book-cleancode/book-clean-code-03/"/>
    <id>https://kys9261.github.io/2021/09/23/programming/study/book-cleancode/book-clean-code-03/</id>
    <published>2021-09-23T08:44:56.000Z</published>
    <updated>2021-10-05T11:20:46.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3장-함수"><a href="#3장-함수" class="headerlink" title="3장 - 함수"></a>3장 - 함수</h1><h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>안좋은 코드의 사례를 들면서 어떻게 하면 좋은 함수를 작성할 수 있는지에 대해 설명을 하는데 다 읽고나서 생각해보면 결국 앞장에서 나왔던것처럼 ‘읽기좋은 함수가 좋은 코드다’.</p><p>함수는 한 가지의 일만 해야하고, 이름을 잘 지어야하고, 무분별한 인수 사용을 줄여서 함수의 이름과 인수의 이름만으로 무슨 동작을 하는지 알 수 있어야하고, 에러코드 대신 Exception을 사용해 처리하라 등의 방법을 안내하면서 결국 함수를 간단 명료하게 만드는게 좋다! 라는 걸로 결론이 지어지면서 이전에 읽었던 ‘리팩토링’을 번갈아 가면서 보아도 좋을거 같다는 생각을 했습니다.</p><p>  그 책에도 함수를 어떻게 좋은 코드로 리팩토링 할 수있는지, 어떤 함수가 냄새가 나는 코드인지 에 대해 설명이 나와있어서 ‘클린코드’는 추상화 라고 하면 ‘리팩토링’은 구현체 라고 할 수 있지 않을까 생각 해보았습니다.</p><p>&nbsp;<br>&nbsp;  </p><h2 id="강의-내용"><a href="#강의-내용" class="headerlink" title="강의 내용"></a>강의 내용</h2><p>객제지향 설계의 5가지 원칙 - SOLID</p><ul><li>SPR(단일 책임 원칙) : 하나의 클래스는 하나의 책임만 가져야 한다.</li><li>OCP(개방-폐쇄 원칙) : 소프트웨어 요소는 확장에는 열려있으나 변경에는 닫혀 있어야한다.</li><li>LSP(리스코프 치환 원칙) : 서브 타입은 언제나 기반 타입으로 교체할 수 있어야 한다.</li><li>ISP(인터페이스 분리 원칙) : 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.</li><li>DIP(의존성 역전 원칙) : 상위 모델은 하위 모델에 의존하면 안된다. 둘 다 추상화에 의존해야한다. 추상화는 세부 사항에 의존해서는 안된다. 세부 사항은 추상화에 따라 달라진다. </li></ul><p>함수 리팩터링</p><ul><li>기능을 구현하는 서투른 함수를 작성한다.</li><li>테스트 코드를 작성한다.</li><li>리팩터링 한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3장-함수&quot;&gt;&lt;a href=&quot;#3장-함수&quot; class=&quot;headerlink&quot; title=&quot;3장 - 함수&quot;&gt;&lt;/a&gt;3장 - 함수&lt;/h1&gt;&lt;h2 id=&quot;소감&quot;&gt;&lt;a href=&quot;#소감&quot; class=&quot;headerlink&quot; title=&quot;소감&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="클린코드" scheme="https://kys9261.github.io/tags/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>책 - 클린코드 (1장/깨끗한 코드, 2장/의미 있는 이름)</title>
    <link href="https://kys9261.github.io/2021/09/22/programming/study/book-cleancode/book-clean-code-01-02/"/>
    <id>https://kys9261.github.io/2021/09/22/programming/study/book-cleancode/book-clean-code-01-02/</id>
    <published>2021-09-22T07:29:56.000Z</published>
    <updated>2021-10-05T11:20:44.857Z</updated>
    
    <content type="html"><![CDATA[<p>항상 개발관련된 서적을 읽어야지 읽어야지 하면서도 사놓고 잘 안읽게 되더라구요.<br>개발 서적 뿐만아니라 책을 읽는게 예전과는 다르게 엄청난 집중력과 노력이 필요하게 되어버렸습니다.</p><p>그래도 제 성장을 위해서는 싫어도 해야한다고 생각을 했었고, 마음은 먹었으나 행동이 따르기는 쉽지 않아서 금융치료를 결정했습니다!</p><p>제로베이스 에서 한달 한권 이라는 테마로 개발서적을 같이 읽는 과정을 진행하더라구요.<br><a href="https://zero-base.co.kr/category_dev_camp/cleancode_1book">클린코드 과정</a></p><p>물론 제가 혼자서 열심히 읽었으면 돈을 아낄수도 있겠지만 스스로가 쉽지 않음을 알기에 수강을 결정했습니다.</p><p>&nbsp;</p><h1 id="1장-깨끗한-코드"><a href="#1장-깨끗한-코드" class="headerlink" title="1장 - 깨끗한 코드"></a>1장 - 깨끗한 코드</h1><h2 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h2><p>1장에서는 나쁜 코드는 무엇이고, 왜 나쁜 코드는 나쁜가. 어떤 코드가 깨끗한 코드인가 에 대한 내용을 다루고 있습니다. 나쁜 코드는 프로젝트의 생산성을 저하시키고, 나아가서는 프로젝트가 실패하는 원인이 될 수 있다고 생각합니다. 사실 회사에서 일을 하면서 내가 짠 코드가 완벽하게 깨끗한 코드가 아님을 알면서도 “시간이 부족해서”, “당장은 중요하지 않아서” 등의 핑계로 나쁜 코드를 짜놓고도 방치하는 경우가 종종 있었고, “나중에 시간날때 리팩토링 해야지” 라고 마음을 먹어도 프로젝트가 종료되면 어느새 머리속에서 잊어버리는 경우가 많았습니다. 책에 나와있듯이 돌아가는 나쁜 코드에 우선 안도감을 가지면서 나중에 정리하겠다고 했지만, 나중은 결코 오지 않는다 라는 얘기가 스스로에게 좀 찔리는 이야기었습니다.</p><p>모든코드를 처음부터 완벽하게 깨끗한 코드로 짜는건 힘들다고 생각합니다. 하지만 처음부터 좀더 고민해보고, 깨끗한 코드를 작성하려는 생각을 가지고 개발을 한다면 더 깨끗한 코드를 작성 할 수 있는 기반이 되지 않을까 생각을 합니다. </p><p>그리고 책에서는 다양한 개발자가 말하는 깨끗한 코드는 무엇인가 에 대해 이야기 하고 있는데. 얘기를 정리해보면 읽기쉽고, 누가 보아도 이해가 되는 코드, 유지보수가 쉽게 되어있는 코드를 깨끗한 코드라고 얘기하는거 같습니다. 내가 작업한 코드가 과연 깨끗한 코드인가에 대한 반성과 함께 이 책을 읽음으로써 앞으로는 좀더 깨끗한 코드를 작성하기 위해 더 적극적인 노력을 해야겠다 라는 생각이 들었습니다.<br>&nbsp;<br>&nbsp;  </p><h2 id="강의-내용"><a href="#강의-내용" class="headerlink" title="강의 내용"></a>강의 내용</h2><p>나쁜코드는 무엇인가?</p><ul><li>성능이 나쁜코드</li><li>의미가 모호한 코드</li><li>중복된 코드</li></ul><p>나쁜 코드가 안좋은 이유</p><ul><li>작은 나쁜 코드가 점점 쌓이면서 프로젝트에 영향을 준다. -&gt; 깨진 유리창 법칙<br>(내가 나쁜 코드를 작성하면, 동료도 내 나쁜 코드를 보고 나쁜 코드를 추가할 가능성이 있다)</li><li>팀의 생산성을 저하시키고, 기술 부채를 만든다</li><li>새로운 시스템을 만들어야 한다 -&gt; 구 시스템의 유지보수와, 신 시스템의 개발을 현실적으로 어렵다(구 시스템의 새로운 요구사항을 신 시스템에도 계속해서 적용해야한다)</li></ul><p>나쁜 코드를 짜는 이유</p><ul><li>일정이 촉박해서</li><li>영향범위가 넓다(사이트 이펙트를 걱정해 소극적으로(?) 개발한다)</li></ul><p>클린코드는 무엇인가?</p><ul><li>효율적인 코드</li><li>한가지를 제대로 하는 코드 -&gt; SRP(단일 책임 원칙)</li><li>읽기 쉬운 코드</li><li>성능이 좋은 코드</li><li>가독성 좋은 코드</li><li>중복이 제거된 코드</li></ul><p>&nbsp;</p><h1 id="2장-의미-있는-이름"><a href="#2장-의미-있는-이름" class="headerlink" title="2장 - 의미 있는 이름"></a>2장 - 의미 있는 이름</h1><h2 id="소감-1"><a href="#소감-1" class="headerlink" title="소감"></a>소감</h2><p>개발하면서 가장 많이 시간을 투자하는 부분이 이름 짓기 입니다.</p><p>변수명, 함수명 등등 개발을 하면서 지어야할 이름이 정말 많은데 이것들이 깨끗한 코드가 진행되는 첫걸음인거 같습니다. 이름만 보았을때 명확하게 이 변수가 어떤값을 가지는지, 함수가 어떤 동작을 하는지 파악하지 못한다면 개발자는 해당 로직을 파악하고, 이 함수가 어디서 호출되는지, 변수의 값은 어디서 할당되는지를 다 파악을 해야해서 사용하는것은 물론 리팩토링 까지도 쉽지 않게 됩니다. </p><p>이 부분을 읽으면서 최근에 읽었던 개발 서적인 마틴 파울러의 ‘리팩터링’에도 코드에서 악취가 나는 사례로 변수나 함수 이름이 명확하지 않을때가 있었던걸로 기억합니다. </p><p>회사에서 일을하면서 변수 이름을 지을때 한글로 먼저 적어두고 그걸 다시 번역기를 돌려서 지을때가 종종 있는데 이러한 경우에도 어떤 단어를 선택하느냐에 따라서 읽는 사람에 따라 의미가 조금은 달라 질 수도 있어서 이름 선택을 신중하게 해야할거 같습니다. </p><p>제가 있는 회사는 은행권이라 은행권에서 사용되는 용어를 정리해놓은 사전 같은게 존재하는데요. 예를들어 특정 코드값이 들어가는 변수명을 Code로 사용하지 않고 cd라고 이름을 정해두고, 모든 개발자가 그 사전에서 정의된 이름을 조합해 변수명을 만들게 되는데요. 물론 모든 개발자들이 공통적인 변수이름을 만드는 부분에서는 좋지만 변수 이름만 보았을때 정확하게 어떤 뜻인지 파악하기 힘들어서 사전을 열어서 검색해보는 불편함도 물론 존재를 합니다. 이 방식이 좋다 나쁘다 판단 하기는 어렵지만 모든 개발자들이 이름을 지을때 공통적으로 사용할 이름사전 같은게 있다면 유지보수나 리팩토링 할때 훨씬더 일괸된 코드를 작성하는데 도움이 될거 같다는 생각을 해보았고. </p><p>저도 제가 작업한 코드중에서 함수명이 조금은 모호한것들, Data, Info같은 뭔가 애매한 이름을 사용해서 클래스, 함수 명을 지었던 경험이 있었어서 앞으로 개발을 하면서는 좀더 명확한 이름을 선택해야겠다 노력을 해야할거 같고, 누구나 다 알것이라고 생각하는 이름의 경우엔 줄여서 쓰는 경우가 종종 있었는데요 예를들어 calculator를 calc라고 적는다던지 하는 경우에도 되도록이면 풀 네임을 적는 습관을 기르도록 노력해야할거 같다는 생각이 들었습니다.</p><h2 id="강의-내용-1"><a href="#강의-내용-1" class="headerlink" title="강의 내용"></a>강의 내용</h2><p>의미가 분명한 이름 짓기</p><ul><li>변수명을 명확하게</li><li>변수들을 클래스로 묶으면 더 뜻이 명확해진다</li><li>루프속에 변수이름도 잘 정하자(fot문에서 int i 보단 명확한 이름으로) -&gt; foreach나 lambda 에서는 변수가 필요 없으니 방식을 변경하는것도 좋을듯</li><li>통일성 있는 단어 사용하기</li><li>변수명에 타입 넣지 않기 (ex. accountArray -&gt; accounts / nameString -&gt; name)</li></ul><p>구글 스타일 가이드 - <a href="https://google.github.io/styleguide/javaguide.html#s5-naming">네이밍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;항상 개발관련된 서적을 읽어야지 읽어야지 하면서도 사놓고 잘 안읽게 되더라구요.&lt;br&gt;개발 서적 뿐만아니라 책을 읽는게 예전과는 다르게 엄청난 집중력과 노력이 필요하게 되어버렸습니다.&lt;/p&gt;
&lt;p&gt;그래도 제 성장을 위해서는 싫어도 해야한다고 생각
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="클린코드" scheme="https://kys9261.github.io/tags/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>LocalDate 테스트 하기 (LocalDate를 mock 해보자)</title>
    <link href="https://kys9261.github.io/2021/09/07/programming/java/localdate-test/"/>
    <id>https://kys9261.github.io/2021/09/07/programming/java/localdate-test/</id>
    <published>2021-09-07T10:39:22.000Z</published>
    <updated>2021-09-19T07:21:24.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="발단"><a href="#발단" class="headerlink" title="발단"></a>발단</h2><p>얼마전 LocalDate를 이용한 테스트 케이스를 작성하다가 고민이 생겼습니다.<br>테스트할 함수는 파라미터로 받은 LocalDate를 오늘날짜와 비교하는 함수였는데요 아래는 샘플코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBeforeTarget</span><span class="params">(LocalDate targetDate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//작성일 기준으로 LocalDate.now()는 2021-09-07입니다.</span></span><br><span class="line">    <span class="keyword">return</span> LocalDate.now().isBefore(targetDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>날짜를 받고, 오늘 날짜랑 비교해서 오늘날짜가 targetDate 이전이면 true, 이후면 false를 리턴하게 되는데.<br>테스트 코드는 아래와 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Utils utils = <span class="keyword">new</span> Utils();</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isBeforeTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDate targetDate = LocalDate.of(<span class="number">2021</span>, <span class="number">9</span>, <span class="number">8</span>);</span><br><span class="line">    assertThat(utils.isBeforeTarget(targetDate), is(<span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>작성일 기준으로 오늘은 9월 7일이고, targetDate는 9월 8일이라 오늘은 targetDate 전 입니다. 그래서 true를 반환할거고 이 테스트코드는 통과하게 됩니다.</p><p>여기까지는 별 문제가 없었는데…  </p><p>isBeforeTarget 함수에서 오늘을 기준으로 비교를 하다보니 이 테스트 코드는 내일부터는 fail로 바뀌게 될것입니다.<br>targetDate가 고정이라고 해도 LocalDate.now()가 매일매일 바뀔것이기 때문이죠.<br>그럼 테스트코드에서는 LocalDate.now()의 결과물이 항상 같은 날짜가 나오면 문제가 해결될거 같았습니다.  </p><p>일반적으로 사용되는 @Mock 어노테이션을 이용해 LocalDate를 모킹하고 now 메소드 호출시에 임의의 날짜를 반환하게 작업하면 되겠지 라는 생각이었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LocalDate NOW = LocalDate.of(<span class="number">2021</span>, <span class="number">9</span> ,<span class="number">1</span>); <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Utils utils = <span class="keyword">new</span> Utils();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line">LocalDate localDate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now 메소드가 호출되면 [1]에서 선언한 고정된 날짜를 반환하게 하고 싶었습니다.</span></span><br><span class="line">    <span class="comment">// static 메소드라 LocalDate.now()를 호출해야하는데 mocking된 객체를 사용해야 할거 같았습니다.</span></span><br><span class="line">    when(localDate.now()).thenReturn(NOW);  </span><br><span class="line"></span><br><span class="line">    LocalDate targetDate = LocalDate.of(<span class="number">2021</span>, <span class="number">9</span>, <span class="number">6</span>);</span><br><span class="line">    assertThat(utils.isBeforeTarget(targetDate), is(<span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>아래와 같은 에러가 발생을 했는데요;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.mockito.exceptions.misusing.MissingMethodInvocationException: </span><br><span class="line">when() requires an argument which has to be &#x27;a method call on a mock&#x27;.</span><br><span class="line">For example:</span><br><span class="line">    when(mock.getArticles()).thenReturn(articles);</span><br><span class="line"></span><br><span class="line">Also, this error might show up because:</span><br><span class="line">1. you stub either of: final/private/equals()/hashCode() methods.</span><br><span class="line">   Those methods *cannot* be stubbed/verified.</span><br><span class="line">   Mocking methods declared on non-public parent classes is not supported.</span><br><span class="line">2. inside when() you don&#x27;t call method on mock but on some other object.</span><br></pre></td></tr></table></figure><p>mockito에서 when 메소드의 인자값으로 ‘호출이 되는 메소드’를 넣어줘야하는데 static 메소드라 정상적으로 메소드를 인식하지 못하는거 같았습니다.</p><p>찾아보니 mockito를 이용해 static 메소드를 직접 모킹하는건 불가능하고 PowerMockito를 이용해야 한다고 나와있었습니다.<br>(&#42; Mockito 3.4.0 이후 버젼에서는 PowerMockito 없이도 static 메소드 모킹이 가능하다고 합니다. <a href="https://www.baeldung.com/mockito-mock-static-methods]">참고</a></p><p>&nbsp;<br>&nbsp;    </p><h2 id="PowerMocito를-이용해보자"><a href="#PowerMocito를-이용해보자" class="headerlink" title="PowerMocito를 이용해보자!"></a>PowerMocito를 이용해보자!</h2><p>PowerMocito는 PowerMock의 확장 API라고 합니다. 그래서 PowerMock과 PowerMock API Mockito를 둘다 추가를 해줘야합니다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line">testImplementation <span class="string">&quot;org.powermock:powermock-module-junit4:2.0.9&quot;</span>  </span><br><span class="line">testImplementation <span class="string">&quot;org.powermock:powermock-api-mockito2:2.0.9&quot;</span></span><br></pre></td></tr></table></figure><p>그리고 테스트 코드 클래스의 제일 상단에 아래 두개의 어노테이션을 추가해줘야합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(PowerMockRunner.class)</span>  </span><br><span class="line"><span class="meta">@PrepareForTest(&#123;Utils.class&#125;)</span> <span class="comment">// static 메소드가 호출 되는 클래스를 미리 준비하기 위함 (참고 3번째 링크)</span></span><br></pre></td></tr></table></figure><p>기존 테스트코드에 LocalData를 모킹하는 코드를 추가해줍니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LocalDate NOW = LocalDate.of(<span class="number">2021</span>, <span class="number">9</span> ,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isBeforeTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    LocalDate targetDate = LocalDate.of(<span class="number">2021</span>, <span class="number">9</span>, <span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Mocking</span></span><br><span class="line">    PowerMockito.mockStatic(LocalDate.class);</span><br><span class="line">    when(LocalDate.now()).thenReturn(NOW);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 클래스를 통째로 mocking하지 않고 원하는 static 메소드만 처리하고 싶은경우</span></span><br><span class="line">    <span class="comment">// PowerMockito.stub(PowerMockito.method(LocalDate.class, &quot;now&quot;)).toReturn(NOW);</span></span><br><span class="line"></span><br><span class="line">    assertThat(utils.isBeforeTarget(targetDate), is(<span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 하면 언제 실행을 해도 now() 호출했을때 2021년 9월 1일로 고정이 되어서, 테스트코드가 항상 Pass 하는걸 확인 할 수 있습니다.</p><p>사용된 코드는 아주 간단한 예제로 LocalDate의 함수를 이용한 코드를 테스트 하였지만.<br>PowerMockito를 이용하면 다른 static 메소드나, private 메소드도 테스트가 가능할걸로 생각 됩니다.</p><p>&nbsp;<br>&nbsp;</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.baeldung.com/mockito-mock-static-methods">https://www.baeldung.com/mockito-mock-static-methods</a></li><li><a href="https://www.baeldung.com/intro-to-powermock">https://www.baeldung.com/intro-to-powermock</a></li><li><a href="https://stackoverflow.com/questions/56430071/what-does-preparefortest-in-powermock-really-mean">https://stackoverflow.com/questions/56430071/what-does-preparefortest-in-powermock-really-mean</a></li><li><a href="https://github.com/Aoriseth/mock-LocalDate-now-java">https://github.com/Aoriseth/mock-LocalDate-now-java</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;발단&quot;&gt;&lt;a href=&quot;#발단&quot; class=&quot;headerlink&quot; title=&quot;발단&quot;&gt;&lt;/a&gt;발단&lt;/h2&gt;&lt;p&gt;얼마전 LocalDate를 이용한 테스트 케이스를 작성하다가 고민이 생겼습니다.&lt;br&gt;테스트할 함수는 파라미터로 받은 Loca
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kys9261.github.io/categories/Programming/Java/"/>
    
    
      <category term="java" scheme="https://kys9261.github.io/tags/java/"/>
    
      <category term="test" scheme="https://kys9261.github.io/tags/test/"/>
    
      <category term="powermock" scheme="https://kys9261.github.io/tags/powermock/"/>
    
  </entry>
  
  <entry>
    <title>SimpleDateFormat은 thread-safe하지 않습니다.</title>
    <link href="https://kys9261.github.io/2021/08/19/programming/java/simpledateformat-is-thread-unsafe/"/>
    <id>https://kys9261.github.io/2021/08/19/programming/java/simpledateformat-is-thread-unsafe/</id>
    <published>2021-08-19T04:27:46.000Z</published>
    <updated>2021-08-19T12:56:25.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><p>SonarQube를 이용해 코드의 취약점이나 잠재적 오류 발생 포인트를 확인하고 있는도중에 아래와 같은 오류 메시지를 발견하였습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/57820510-128e7000-77c8-11e9-9b06-142c46de5e04.png" alt="sonarqube 이미지"></p><p>이전에 작업하셨던 분이 String값을 Date 객체로 변환하기 위해 SimpleDateFormat을 쓰고,<br>모든 객체에서 참조하면 관리가 편해지고, 객체 생성을 안해도 되니까 static final을 이용해 만드신거 같습니다.</p><ul><li>다행이 사용되는 부분이 없었습니다.</li></ul><p>SonarQube에서는 저렇게 코드를 작성하는게 문제가 있다고 하는데 어떤문제가 있는지 한번 알아보도록 하겠습니다.<br>해당 에러의 구체적인 설명은 아래와 같이 나와있는데요 </p><p><img src="https://user-images.githubusercontent.com/7028715/57820756-fb9c4d80-77c8-11e9-8aeb-62fb986bb7d7.png" alt="sonqrqube 이미지2"></p><p>가장 윗줄에 <code>Non-thread-safe fields should not be static</code> 라고 적혀 있네요.<br><strong>스레드에서 안전하지 않은 필드로 static이 되면 안된다.</strong> 라는 말 같은데요 아래 설명을 더 읽어보면</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">자바 라이브러리의 모든 클래스는 thread-safe 하게 작성되지 않았습니다. 멀티 스레드 방식으로 이것들을 사용하면 런타임에서 exception 또는 데이터 문제를 야기할 가능성이 높습니다. </span><br><span class="line"></span><br><span class="line">Calendar, DateFormat, javax.xml.xpath.XPath, javax.xml.validation.SchemaFactory에 static을 사용할때 이런 이슈가 발생합니다.</span><br></pre></td></tr></table></figure><p>이런 설명과 함께 예제 코드까지 보여주고 있습니다.<br>결국 SimpleDateFormat을 멀티 스레드 환경에서 사용시에는 static 키워드를 사용하면 안된다고 하는건데 왜 쓰면 문제가 날지 궁금해졌습니다.</p><p>일단 SimpleDateFormat 클래에도 아래와 같은 설명이 있었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Date formats are not synchronized.</span></span><br><span class="line"><span class="comment"> * Date 포맷은 동기화 되지 않습니다.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * It is recommended to create separate format instances for each thread.</span></span><br><span class="line"><span class="comment"> * 각각의 스레드에서 분리된 포맷 인스턴스를 사용하길 추천합니다.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * If multiple threads access a format concurrently, it must be synchronized externally.</span></span><br><span class="line"><span class="comment"> * 만약 멀티 스레드에서 동시에 접근하는경우 외부 동기 처리가 필요합니다.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h1><p>그럼 SimpleDateFormat을 멀티 스레드에서 사용했을때 어떤 문제가 발생하는지 한번 테스트를 해 보도록 하겠습니다.</p><p>SimpleDateFormat을 static으로 만들어주고</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br></pre></td></tr></table></figure><p>스레드 안에서 String으로 입력된 날짜를 파싱하는 그런 형태로 테스트를 진행을 해보았는데요</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String date = <span class="string">&quot;20210819&quot;</span>;</span><br><span class="line">System.out.println(seq + <span class="string">&quot; : &quot;</span> + DATE_FORMAT.parse(date));</span><br></pre></td></tr></table></figure><p>아래와같은 형태의 NumberFormatException 이 발생을 하였고</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> java.lang.NumberFormatException: multiple points</span><br><span class="line"><span class="number">2.</span> java.lang.NumberFormatException: For input string: <span class="string">&quot;E.2919E2&quot;</span></span><br><span class="line"><span class="number">3.</span> java.lang.NumberFormatException: For input string: <span class="string">&quot;E.2919&quot;</span></span><br><span class="line"><span class="number">4.</span> java.lang.NumberFormatException: For input string: <span class="string">&quot;E&quot;</span></span><br><span class="line"><span class="number">5.</span> java.lang.NumberFormatException: For input string: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>같은 날짜를 파싱함에도 불구하고 비정상적으로 파싱이 되는 경우도 있었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> : Sat Aug <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> KST <span class="number">2220</span></span><br><span class="line"><span class="number">0</span> : Thu Aug <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> KST <span class="number">2021</span></span><br><span class="line"><span class="number">1</span> : Thu Nov <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> KST <span class="number">2359</span></span><br><span class="line"><span class="number">2</span> : Thu Nov <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> KST <span class="number">2359</span></span><br><span class="line"><span class="number">3</span> : Thu Nov <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> KST <span class="number">2359</span></span><br><span class="line"><span class="number">3</span> : Sun Nov <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> KST <span class="number">2001</span></span><br></pre></td></tr></table></figure><p>정확하게 어느포인트에서 문제가 발생하는지 알고싶었지만 stackTrace를 따라서 디버깅도 해보고 했는데 정확하게 어느포인트가 문제인지는 확인하기 어려웠습니다 ㅠㅠ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NumberFormatException: multiple points</span><br><span class="line">at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:<span class="number">1890</span>)</span><br><span class="line">at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:<span class="number">110</span>)</span><br><span class="line">at java.lang.Double.parseDouble(Double.java:<span class="number">538</span>)</span><br><span class="line">at java.text.DigitList.getDouble(DigitList.java:<span class="number">169</span>)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2089</span>)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">1869</span>)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br></pre></td></tr></table></figure><h1 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h1><ol><li><p>가장 간단한건 매번 SimpleDateFormat을 만들어서 사용하는것입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parseDate</span><span class="params">(String date)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleDateFormat.parse(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>synchronized 사용</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(DATE_FORMAT) &#123;</span><br><span class="line">    System.out.println(seq + <span class="string">&quot; : &quot;</span> + DATE_FORMAT.parse(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DateTimeFormatter 사용<br>DateTimeFormatter를 사용하면 LocalDate 형태로 파싱가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">System.out.println(seq + <span class="string">&quot; : &quot;</span> + LocalDate.parse(date, Utils.dateTimeFormatter));</span><br></pre></td></tr></table></figure></li></ol><p>위와같은 형태로 위에서 발생한 문제들을 해결할 수 있을것으로 생각된다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/6840803/">https://stackoverflow.com/questions/6840803/</a></li><li><a href="https://knight76.tistory.com/entry/%EB%B3%91%EB%A0%AC-%EC%93%B0%EB%A0%88%EB%93%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%8B%9C-Thread-Safety-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EC%8A%B5%EA%B4%80-%EA%B0%96%EA%B8%B0">https://knight76.tistory.com/entry/%EB%B3%91%EB%A0%AC-%EC%93%B0%EB%A0%88%EB%93%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%8B%9C-Thread-Safety-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EC%8A%B5%EA%B4%80-%EA%B0%96%EA%B8%B0</a></li><li><a href="https://kldp.org/node/36904">https://kldp.org/node/36904</a></li><li><a href="https://www.callicoder.com/java-simpledateformat-thread-safety-issues/">https://www.callicoder.com/java-simpledateformat-thread-safety-issues/</a></li><li><a href="http://wonwoo.ml/index.php/post/1759">http://wonwoo.ml/index.php/post/1759</a></li><li><a href="https://d2.naver.com/helloworld/645609">https://d2.naver.com/helloworld/645609</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;설명&quot;&gt;&lt;a href=&quot;#설명&quot; class=&quot;headerlink&quot; title=&quot;설명&quot;&gt;&lt;/a&gt;설명&lt;/h1&gt;&lt;p&gt;SonarQube를 이용해 코드의 취약점이나 잠재적 오류 발생 포인트를 확인하고 있는도중에 아래와 같은 오류 메시지를 발견하였
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kys9261.github.io/categories/Programming/Java/"/>
    
    
      <category term="java" scheme="https://kys9261.github.io/tags/java/"/>
    
      <category term="simpledateformat" scheme="https://kys9261.github.io/tags/simpledateformat/"/>
    
      <category term="thread" scheme="https://kys9261.github.io/tags/thread/"/>
    
      <category term="thread-safe" scheme="https://kys9261.github.io/tags/thread-safe/"/>
    
  </entry>
  
  <entry>
    <title>맥 알프레드(Alfred) 혹은 스폿라이트(Spotlight)에서 앱 검색이 안될때</title>
    <link href="https://kys9261.github.io/2020/02/29/mac/mac-spotlight-doesnt-show-application/"/>
    <id>https://kys9261.github.io/2020/02/29/mac/mac-spotlight-doesnt-show-application/</id>
    <published>2020-02-29T10:19:54.000Z</published>
    <updated>2021-10-20T15:01:19.544Z</updated>
    
    <content type="html"><![CDATA[<p>저는 항상 맥에서 어플리케이션을 실행할때 Alfred를 이용해서 실행하는 편입니다. 아래 이미지처럼 알프레드를 열고 앞에 두세글자만 입력하고 엔터를 누르면 앱을 실행할 수 있어서 아주 편하게 사용하고 있었는데요.</p><p><img src="https://user-images.githubusercontent.com/7028715/75605804-81f00900-5b29-11ea-86db-3ffe9b14dfc4.png" alt="알프레드에서 카카오톡을 열때"></p><p>새로 맥을 구입하고 이것 저것 셋팅을 하던중에 제가 뭘 잘못 건드렸는지 알프레드의 검색에서 Application 폴더에 있는 어플리케이션이 검색이 되지 않았습니다. </p><p>기본앱인 터미널이나 키체인등 은 검색이 되는데 추가로 설치한 앱은 검색이 되지 않았죠.</p><p>Spotlight에서도 마찬가지로 검색이 되지 않았는데요.<br>알프레드가 Spotlight에서 만든 인덱싱을 이용해 검색을 지원해주다보니 Spotlight에서 검색이 안되면 Alfred에서도 물론 검색이 안되는거 같았습니다.</p><p>애플 지원 사이트에 있는 <a href="https://support.apple.com/ko-kr/HT201716">Mac에서 Spotlight 인덱스를 재구성하는 방법</a> 이라는 공식 문서를 보고 따라해도 정상화 되지는 않았고.</p><p>터미널을 이용해 인덱스 재구성을 실행하였어도 동일하게 검색은 안되었습니다.</p><p>그러던중 드디어 해결 방법을 찾았습니다.</p><p>방법은 터미널에 들어가서 아래 4개의 명령어를 순서대로 입력하면 됩니다.</p><ol><li>Spotlight 기능을 끈다.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mdutil -a -i off </span><br></pre></td></tr></table></figure></li><li>Spotlight의 인덱스 메타파일을 언로드 한다.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist </span><br></pre></td></tr></table></figure></li><li>언로드한 파일을 다시 로드한다.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</span><br></pre></td></tr></table></figure></li><li>Spotlight를 다시 켠다.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mdutil -a -i on</span><br></pre></td></tr></table></figure></li></ol><p>위 와 같이 진행했더니 정상적으로 알프레드에서도 어플리케이션 검색이 되는걸 확인했습니다!!</p><p>참고 : <a href="https://apple.stackexchange.com/a/368075">https://apple.stackexchange.com/a/368075</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;저는 항상 맥에서 어플리케이션을 실행할때 Alfred를 이용해서 실행하는 편입니다. 아래 이미지처럼 알프레드를 열고 앞에 두세글자만 입력하고 엔터를 누르면 앱을 실행할 수 있어서 아주 편하게 사용하고 있었는데요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h
      
    
    </summary>
    
      <category term="Mac" scheme="https://kys9261.github.io/categories/Mac/"/>
    
      <category term="Tips" scheme="https://kys9261.github.io/categories/Mac/Tips/"/>
    
    
      <category term="mac" scheme="https://kys9261.github.io/tags/mac/"/>
    
      <category term="macos" scheme="https://kys9261.github.io/tags/macos/"/>
    
      <category term="catalina" scheme="https://kys9261.github.io/tags/catalina/"/>
    
      <category term="spotlight" scheme="https://kys9261.github.io/tags/spotlight/"/>
    
      <category term="alfred" scheme="https://kys9261.github.io/tags/alfred/"/>
    
  </entry>
  
  <entry>
    <title>숫자 리터럴에 구분자로 밑줄(_) 사용 가능</title>
    <link href="https://kys9261.github.io/2019/07/10/programming/java/number-literals-can-use-underscore-for-a-punctuation-mark/"/>
    <id>https://kys9261.github.io/2019/07/10/programming/java/number-literals-can-use-underscore-for-a-punctuation-mark/</id>
    <published>2019-07-10T04:55:42.000Z</published>
    <updated>2020-02-29T08:13:45.901Z</updated>
    
    <content type="html"><![CDATA[<p>Java 프로젝트를 보면서 어떤 기능구현을 할때 다른분들은 어떻게 구현을 했을지 궁금해서 github나 구글에 항상 비슷한 기능 또는 서비스를 하는 프로젝트를 찾아보고는 하는데요.</p><p>이번에 다른분들의 프로젝트를 찾아보다가 처음보는 사용법이 있어서 저건 뭔가 한번 찾아보았고 오늘은 그걸한번 소개해볼까 합니다. (저만 처음보는거 일수도…)<br>자세한 내용은 Oracle의 문서에도 나와있습니다. <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html">링크</a></p><p>우리가 숫자를 쓸때 구분기호로 ,를 많이 씁니다.<br>예를들어 백만원을 적는다고 하면 <code>1000000</code> 이렇게 적는것 보다는 <code>1,000,000</code> 이렇게 적는게<br>눈에 확 들어오고 빠르게 얼마인지 확인 할수 있죠.</p><p>Java에서도 숫자를 사용할때 쉽게 알아볼수 있도록 Java 7 이후 버젼부터 밑줄(_)을 이용한 구분자 사용이 가능합니다.</p><p>아래 예제코드를 보면 구분자를 사용하지 않을땐 변수명에 숫자의 크기가 적혀있지 않는 경우 한눈에 확인하기가 어려운데요.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 구분자 사용하지 않음</span></span><br><span class="line"><span class="keyword">int</span> millionInt = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">long</span> billionLong = <span class="number">1000000000L</span>;</span><br><span class="line"><span class="keyword">float</span> fiFloat = <span class="number">3.141592F</span>;</span><br><span class="line"><span class="keyword">double</span> fiDouble = <span class="number">3.1415926535</span>;</span><br></pre></td></tr></table></figure><p>아래 코드처럼 구분자를 넣어주면 좀더 보기 쉽게 사용할 수 있습니다.<br>(물론 결과값은 위 코드와 동일합니다.)</p><p>다만 구분자의 위치는 개발자가 임의로 적을수 있어서 int에는 숫자 3개 간격으로, long에는 2개 간격으로 해도 전혀 문제되지는 않습니다만. 기본적으로 평소에 콤마를 구분자로 사용할때 처럼 3개 간격으로 구분자를 넣는게 제일 좋을거 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> millionInt = <span class="number">1_000_000</span>;</span><br><span class="line"><span class="comment">// 아래처럼 해도 문제는 없지만 보기가 불편합니다.</span></span><br><span class="line"><span class="keyword">long</span> billionLong = <span class="number">10_00_00_00_00L</span>;</span><br><span class="line"><span class="keyword">float</span> fiFloat = <span class="number">3.14_15_92F</span>;</span><br><span class="line"><span class="keyword">double</span> fiDouble = <span class="number">3.1_41_59_26_53_5</span>;</span><br></pre></td></tr></table></figure><p>아래는 밑줄 구분자가 사용되면 안되는 위치를 작성한건데요, 아래코드 처럼 작성하면 에러가 발생하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> millionInt1 = 1_000_000_;        <span class="comment">// 숫자의 맨 끝에 구분자가 오면 안됩니다.</span></span><br><span class="line"><span class="keyword">int</span> millionInt2 = _1000_000;         <span class="comment">// 숫자의 맨 앞에 구분자가 오면 안됩니다.</span></span><br><span class="line"><span class="keyword">long</span> billionLong = 10_00_00_00_00_L; <span class="comment">// 접미사 L앞에 구분자가 오면 안됩니다.</span></span><br><span class="line"><span class="keyword">float</span> fiFloat1 = <span class="number">3.</span>14_15_92_F;       <span class="comment">// 접미사 F앞에 구분자가 오면 안됩니다.</span></span><br><span class="line"><span class="keyword">float</span> fiFloat2 = <span class="number">3.</span>_141592F;         <span class="comment">// 소수점의 뒤에 구분자가 오면 안됩니다.</span></span><br><span class="line"><span class="keyword">double</span> fiDouble = 3_<span class="number">.141592</span>;         <span class="comment">// 소수점의 앞에 구분자가 오면 안됩니다.</span></span><br></pre></td></tr></table></figure><p>위와 같은 케이스는 사용이 불가능하고 문서에서는 <code>In positions where a string of digits is expected<br></code> 이 케이스에서도 사용하면 안된다 라고 하는데<br>이 케이스는 정확하게 뭔지를 잘 모르겠지만 예상으로는 숫자가 적을때(한눈에 알아볼 수 있을때) 사용하지 말아라 라고 하는거 같습니다. </p><p>예를들어 <code>int ten = 1_0;</code> 이렇게 한눈에 알아볼수 있는 숫자에 구분자를 넣지 말아라 라고 하는거 같습니다. (이렇게 사용할때는 에러가 발생은 하지 않는데 권장사항 같습니다.)</p><p>아직까지 제가 Java에서 제공해주는 기능중에 모르는게 너무 많은거 같아서 반성을 해봅니다.<br>Java 버젼별로 제공해주는 기능에 대해서도 한번 공부 해야겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 프로젝트를 보면서 어떤 기능구현을 할때 다른분들은 어떻게 구현을 했을지 궁금해서 github나 구글에 항상 비슷한 기능 또는 서비스를 하는 프로젝트를 찾아보고는 하는데요.&lt;/p&gt;
&lt;p&gt;이번에 다른분들의 프로젝트를 찾아보다가 처음보는 사용
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kys9261.github.io/categories/Programming/Java/"/>
    
    
      <category term="java" scheme="https://kys9261.github.io/tags/java/"/>
    
      <category term="numeric" scheme="https://kys9261.github.io/tags/numeric/"/>
    
      <category term="underscore" scheme="https://kys9261.github.io/tags/underscore/"/>
    
      <category term="punctuation" scheme="https://kys9261.github.io/tags/punctuation/"/>
    
  </entry>
  
  <entry>
    <title>NPM 패키지를 Github에서 설치하기</title>
    <link href="https://kys9261.github.io/2019/07/03/programming/etc/npm-package-install-from-github/"/>
    <id>https://kys9261.github.io/2019/07/03/programming/etc/npm-package-install-from-github/</id>
    <published>2019-07-03T14:18:18.000Z</published>
    <updated>2020-01-18T17:06:50.939Z</updated>
    
    <content type="html"><![CDATA[<p>어제 저녁에(7월 2일 11시쯤) 마침 Vue.js를 공부하면서 패키지를 설치해야할 일이 있었습니다.<br>그래서 구글에서 해당 모듈을 검색해 사용법을 보기위해서 npm 사이트에 접속을 했는데요<br>평소처럼 정상적으로 페이지로 이동되는게 아니고 아래 이미지와 같이 502 오류페이지로 이동되었습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/60599933-4100f280-9dea-11e9-81eb-05d5b34203e6.png" alt="npm error img"></p><p>502 Bad Gateway 페이지로 이동을 했는데요 아래에 cloudflare 라고 적혀있는거보니<br>클라우드 서비스를 지원하는 cloudflare회사에 뭔가 장애가 생긴거 같은데 npm 사이트도 영향을 받고 있는거 같았습니다. </p><p>트위터를 보아하니 저랑 비슷한 상황에 놓인 개발자가 전세계 있구나 라는 안도의(?) 한숨을 내쉬며 패키지를 설치할 방법을 찾아보았습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/60600213-b8cf1d00-9dea-11e9-9921-0acc1384fa7d.png" alt="트위터 동향"></p><p>해당 이슈로인해서 npm install 명령어를 통한 모듈 설치도 timeout이 나면서 설치가 불가능했는데요.<br>그렇다고 모듈 설치를 하지 않고 복구될때까지 기다리자니 언제까지 기다려야 할지도 모르고 해서<br>직접 설치 할수있는 방법은 없는지 찾아보게 되었는데요</p><p>대부분의 npm 패키지는 github 레파지토리에도 올라가있는데요 처음엔 해당 레파지토리를 받아서<br>node_module 폴더에 넣으면 되려나 생각을 했는데 평소처럼 npm install 로 패키지를 설치할때 제가 모르는 다른 셋팅을 npm 에서 적용할지도 모른다는 생각에 해당 방법은 하지 않는 방향으로 정하고</p><p>스택오버플로우에서 <a href="https://stackoverflow.com/questions/17509669/how-to-install-an-npm-package-from-github-directly">How to install an npm package from GitHub directly?</a> 라는 제목의 질문글을 발견하였습니다.<br>제가 찾고 있는 방법과 똑같아서 내용을 확인해보았는데요. 너무나 쉬운 방법으로 github로부터 패키지를 다운받아 설치할 수 있었습니다. </p><h2 id="설치-방법"><a href="#설치-방법" class="headerlink" title="설치 방법"></a>설치 방법</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm 서버로부터 설치</span></span><br><span class="line">npm install vue-moment</span><br><span class="line"></span><br><span class="line"><span class="comment"># github로 부터 설치</span></span><br><span class="line">npm install https://github.com/brockpetrie/vue-moment</span><br></pre></td></tr></table></figure><p>그냥 패키지 이름대신 해당 패키지의 github 주소를 적어주면 github에서 패키지를 받아와 설치합니다.<br>허무하게도 쉬운 방법이었지만 언젠가 npm 서버에 또 문제가 발생해도 패키지 설치할때 전혀 문제가 없을거 같습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;어제 저녁에(7월 2일 11시쯤) 마침 Vue.js를 공부하면서 패키지를 설치해야할 일이 있었습니다.&lt;br&gt;그래서 구글에서 해당 모듈을 검색해 사용법을 보기위해서 npm 사이트에 접속을 했는데요&lt;br&gt;평소처럼 정상적으로 페이지로 이동되는게 아니고
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Etc" scheme="https://kys9261.github.io/categories/Programming/Etc/"/>
    
    
      <category term="npm" scheme="https://kys9261.github.io/tags/npm/"/>
    
      <category term="node" scheme="https://kys9261.github.io/tags/node/"/>
    
      <category term="install" scheme="https://kys9261.github.io/tags/install/"/>
    
      <category term="github" scheme="https://kys9261.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab Runner로 SonarQube 분석 자동화 하기</title>
    <link href="https://kys9261.github.io/2019/05/22/programming/devops/gitlab-runner-connect-with-sonarqube/"/>
    <id>https://kys9261.github.io/2019/05/22/programming/devops/gitlab-runner-connect-with-sonarqube/</id>
    <published>2019-05-22T02:22:16.000Z</published>
    <updated>2020-01-18T17:06:50.938Z</updated>
    
    <content type="html"><![CDATA[<p>이전 포스팅을 통해서 리눅스 서버에 Gitlab, Sonarqube를 설치하고 수동으로 스크립트를 실행해 프로젝트를 Sonarqube를 이용해 정적분석하는 것까지 해보았습니다.</p><p>하지만 매번 수동으로 스크립트를 실행하면 매우 번거롭겠죠?<br>그래서 이번엔 Gitlab Runner를 이용해 Gitlab에 Merge Request(Github의 Pull Request와 같음)가 뜨면 자동으로 정적분석을 실행해 확인하도록 연동해보는 작업을 해보도록 하겠습니다.</p><p>각 페이지마다 Gitlab Dosc의 링크를 걸어놓았습니다. ubuntu외에 다른 운영체제 또는 docker등 다른 형태로 Gitlab Runner를 설치하시려는 분들은 참고하시면 될거 같습니다.</p><h3 id="Gitlab-Runner-소개-공식-문서-링크"><a href="#Gitlab-Runner-소개-공식-문서-링크" class="headerlink" title="Gitlab Runner 소개 - 공식 문서 링크"></a>Gitlab Runner 소개 - <a href="https://docs.gitlab.com/runner/">공식 문서 링크</a></h3><p>처음엔 Gitlab에 있는 레파지토리를 SonarQube로 정적분석을 자동적으로 수행하기 위해서 어떤 방법이 있는지 찾아보던중 Runner라는것을 알게되었습니다.<br>처음엔 Runner가 어떤 역할을 하는건지 이해하기는 어려웠지만 지금은 아주 조금이라도 알게 된거 같습니다.</p><p>공식 사이트에 Runner의 소개를 보면 아래와 같이 설명하고 있습니다.</p><blockquote><p>작업을 실행하고 Gitlab에 결과를 다시 보내는데 사용되는 오픈소스 프로젝트입니다. </p></blockquote><p>조금더 풀어쓰면 개발자가 작성한 스크립트를 Runner가 실행 후 결과를 gitlab에 보내는 역할을 한다고 보시면 될거 같습니다.</p><h3 id="Gitlab-Runner-설치-공식-문서-링크"><a href="#Gitlab-Runner-설치-공식-문서-링크" class="headerlink" title="Gitlab Runner 설치 - 공식 문서 링크"></a>Gitlab Runner 설치 - <a href="https://docs.gitlab.com/runner/#install-gitlab-runner">공식 문서 링크</a></h3><p>Gitlab Runner를 설치하는 방법은 여러가지가 있지만 제일 간단하고 빠르게 설치하는 방법은 다음과 같습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitlab 공식 레파지토리를 추가합니다.</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># apt-get을 이용해 runner를 설치합니다.</span></span><br><span class="line">sudo apt-get install gitlab-runner</span><br></pre></td></tr></table></figure><p>설치는 끝났습니다. 아주 간단하죠???<br>특정 버젼의 runner설치는 <a href="https://docs.gitlab.com/runner/install/linux-repository.html#installing-the-runner">링크</a>에 들어가보시면 확인할 수 있습니다.</p><h3 id="Gitlab-Runner-등록-공식-문서-링크"><a href="#Gitlab-Runner-등록-공식-문서-링크" class="headerlink" title="Gitlab Runner 등록 - 공식 문서 링크"></a>Gitlab Runner 등록 - <a href="https://docs.gitlab.com/runner/register/index.html">공식 문서 링크</a></h3><p>이제는 Gitlab과 Runner를 서로 연결 시켜줘야합니다.<br>연결 하기 전에 설치한 Gitlab사이트에 들어가서 runner연결을 위한 정보를 확인해야합니다.</p><p>프로젝트 레파지토리 -&gt; 왼쪽 메뉴 제일 하단의 Settings 메뉴 CI/CD -&gt; Runners settings 항목 Expand 버튼 클릭</p><p>이동 후 에는 아래와 같은 화면이 보일텐데요 이미지 하단의 <strong>Setup a specific Runner manually</strong>에 있는<br>URL주소와, 토큰값을 미리 복사해둡니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/58063544-a9d53800-7bb9-11e9-805b-2afede9a26b2.png"></p><p>다시 터미널로 돌아와서</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># runner 등록 실행.</span></span><br><span class="line">sudo gitlab-runner register</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행되면 아래와 같이 설정값 입력을 해야합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 복사한 URL을 입력해줍니다.</span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line"></span><br><span class="line"><span class="comment"># 복사한 토큰 값을 입력해줍니다.</span></span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Runner 설명을 입력해줍니다. gitlab에서 runner를 식별하기 위한 설명 입력입니다. (나중에 변경가능)</span></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Runner 태그를 입력해줍니다. 같은 태그를 가진 runner를 동시에 실행 가능하게끔 해준다고 합니다. (나중에 변경가능)</span></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line"></span><br><span class="line"><span class="comment"># 태그되지 않은 빌드를 실행할거냐? 라고 묻는거 같은데 사실 잘 모르겠습니다. (태그안따면 진짜 빌드 안되는기능인지는 나중이 확인해보도록 하겠..)</span></span><br><span class="line"><span class="comment"># default가 false니까 false로 진행합니다.</span></span><br><span class="line">Whether to run untagged builds [<span class="literal">true</span>/<span class="literal">false</span>]:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 런너를 현재 프로젝트에만 잠글꺼냐? 라고 물어보는건데 잠그다의 의미가 현재 프로젝트에서만 사용가능하게끔 할꺼냐 라는 의미로 받아들이면 될거 같습니다.</span></span><br><span class="line"><span class="comment"># 우선 해당 런너는 다른 프로젝트에서 사용하지 않을것이기에 default 값인 true로 진행합니다.</span></span><br><span class="line">Whether to lock the Runner to current project [<span class="literal">true</span>/<span class="literal">false</span>]:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행자(?) 선택을 합니다. 프로젝트를 빌드할때 사용할 방식을 선택하는거라 보면 될거같습니다.</span></span><br><span class="line"><span class="comment"># 여기서는 shell을 선택합니다.</span></span><br><span class="line"><span class="comment"># https://docs.gitlab.com/runner/executors/</span></span><br><span class="line">Please enter the executor: virtualbox, docker-ssh+machine, docker-ssh, parallels, ssh, docker+machine, kubernetes, docker, shell:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 문구가 나오면 등록 완료!!</span></span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">&#x27;s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure><p>등록이 완료된 후 Runners Settings 페이지를 다시 열어보면 아래와 같이 러너가 등록이 된걸 확인 할 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/58070232-3b04d880-7bd3-11e9-87c7-43b98755dc42.png"></p><h3 id="Gitlab-Script-작성-공식-문서-링크"><a href="#Gitlab-Script-작성-공식-문서-링크" class="headerlink" title="Gitlab Script 작성 - 공식 문서 링크"></a>Gitlab Script 작성 - <a href="https://docs.gitlab.com/ee/ci/yaml/">공식 문서 링크</a></h3><p>이제 Gitlab과 Gitlab Runner와 연동은 모두 끝났습니다.<br>마지막으로 Runner가 어떤 작업을 수행해야하는지 명시해주는 스크립트 작성을 해보도록 하겠습니다. 스크립트 작성시 사용되는 키워드가 여러개가 있어서<br>이번 포스팅에서 모드 다루기는 어려울거 같구요.</p><p>이번 포스팅에선 신규 Merge Request(Github의 Pull Request와 동일합니다.)가 발생했을때 Runner를 수행하는 스크립트를 작성해보도록 하겠습니다.</p><p>우선 파일이름은 <strong>.gitlab-ci.yml</strong> 로 만드시고 아래와 같은 스크립트를 작성하시면 되는데요</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sonarqube_job:</span><br><span class="line">  script: ./gradlew sonarqube -Dsonar.host.url=http://127.0.0.1:9000/sonar -Dsonar.login=ABCDEFGHIJKLMNOPQR</span><br><span class="line">  only: </span><br><span class="line">  - master</span><br><span class="line">  - merge_requests</span><br><span class="line">  tags: </span><br><span class="line">  - front-dev</span><br></pre></td></tr></table></figure><p>위 스크립트를 간단하게 설명하자면 다음과 같습니다.  </p><p>sonarqube_job : job이름<br>script : 수행할 스크립트<br>only : master에 커밋이 push되거나, merge_request요청이 들어왔을때만 해당 작업을 수행한다.<br>tag : front-dev 태그를 가지는 런너들에서 수행한다.  </p><p>* 참고로 gitlab 버젼에 따라서 일부 키워드가 실행되지 않을 수 있습니다.<br>(Gitlab 11.6 버젼부터 merge_requests키워드가 동작합니다. <a href="https://docs.gitlab.com/ee/ci/merge_request_pipelines/">링크</a>)</p><p>이제 작성된 스크립트를 프로젝트에 포함시키고 push 합니다.<br>push가 완료되면 이 이후부터 master브랜치로 merge request(pull request)가 발생하면 자동적으로 runner가 스크립트를 수행해서 sonarqube로 분석을 요청합니다. </p><p>제가 스크립트를 작성하면서 이렇게도 저렇게도 해보면서 확인한 내용중에 아래 두가지는 알고있으면 좋을거 같아서 적어두었습니다.</p><ol><li>스크립트는 커밋이 push되면 무조건 동작합니다.</li><li>target 브랜치가 최소 1개 존재해야 합니다.</li></ol><p>이 2가지 입니다. 처음 merge request가 요청들어올때만 실행하고 싶어서 only 키워드에 merge_requests만 넣어놨었는데 그렇게 하니까 <strong>No stages / jobs for this pipeline.</strong> 에러가 나면서 pipeline 실행이 불가능합니다.<br>그래서 <strong>- master</strong> 를 추가해서 2번의 항목을 만족시켰더니 정상적으로 수행은 됩니다.</p><p>다만 그럴경우에 1번의 이유로 master에 push가 들어올때도 스크립트가 동작하게 되는데요.<br>이 포스팅에서는 해당 부분을 인지하고 넘어갔지만 실제로 업무에 사용할땐 저렇게 하면 불필요하게 스크립트가 많이 수행되는거 같아서 스크립트 수행 단계를 각각 나눠서 구성하면 merge request가 발생할때만 sonarqube에 분석을 요청하게끔 만들 수 있을거 같습니다. <a href="https://docs.gitlab.com/ee/ci/merge_request_pipelines/#configuring-pipelines-for-merge-requests">참고</a></p><p>위 작업들이 모두다 끝나면 CI/CD 메뉴의 Pipelines에 아래 이미지처럼 동작이 정상적으로 수행되었는지의 유무를 확인 할 수 있고, 수동으로 Pipeline을 동작 시킬 수 도 있습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/58141482-7e685100-7c7e-11e9-9699-bf4e080367dc.png"></p><p>참고 </p><ul><li><a href="https://taetaetae.github.io/2018/02/08/jenkins-sonar-github-integration/">https://taetaetae.github.io/2018/02/08/jenkins-sonar-github-integration/</a></li><li><a href="https://namioto.github.io/2018/07/16/gitlab-ci%EB%A1%9C-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/">https://namioto.github.io/2018/07/16/gitlab-ci%EB%A1%9C-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</a></li><li><a href="https://medium.com/@speedforcerun/sonarqube-with-gitlab-ci-setup-stepbystep-java-maven-version-7e131dce0bb1">https://medium.com/@speedforcerun/sonarqube-with-gitlab-ci-setup-stepbystep-java-maven-version-7e131dce0bb1</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이전 포스팅을 통해서 리눅스 서버에 Gitlab, Sonarqube를 설치하고 수동으로 스크립트를 실행해 프로젝트를 Sonarqube를 이용해 정적분석하는 것까지 해보았습니다.&lt;/p&gt;
&lt;p&gt;하지만 매번 수동으로 스크립트를 실행하면 매우 번거롭겠죠
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="DevOps" scheme="https://kys9261.github.io/categories/Programming/DevOps/"/>
    
    
      <category term="ubuntu" scheme="https://kys9261.github.io/tags/ubuntu/"/>
    
      <category term="GitLab" scheme="https://kys9261.github.io/tags/GitLab/"/>
    
      <category term="gitlab runner" scheme="https://kys9261.github.io/tags/gitlab-runner/"/>
    
      <category term="runner" scheme="https://kys9261.github.io/tags/runner/"/>
    
      <category term="sonarqube" scheme="https://kys9261.github.io/tags/sonarqube/"/>
    
  </entry>
  
  <entry>
    <title>자바 웹 프로그래밍 Next Step - 4. HTTP 웹 서버 구현을 통해 HTTP 이해하기</title>
    <link href="https://kys9261.github.io/2019/05/13/programming/study/book-nextstep/java-web-programming-next-step-5/"/>
    <id>https://kys9261.github.io/2019/05/13/programming/study/book-nextstep/java-web-programming-next-step-5/</id>
    <published>2019-05-13T03:36:25.000Z</published>
    <updated>2020-01-18T17:06:50.941Z</updated>
    
    <content type="html"><![CDATA[<p>이전 장에서 요구사항 6번은 동영상이 빠져있는데 그 부분은 박재성님께서 구현한 코드를 통해서 확인 가능할거 같습니다. <a href="https://github.com/slipp/web-application-server/blob/was-step1-bad-version/src/main/java/webserver/RequestHandler.java">여기</a>에서 확인할 수 있습니다.  </p><p>백재성님께서 구현한 코드를 보기전에 저는 책을 보고 직접 구현해보았기 때문에 위 링크에서 확인 가능한 코드와 제가 구현한 코드는 조금 다른 부분이 있습니다.</p><p>우선 박재성님께서 구현한 코드는 아래와 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;/user/list&quot;</span>.equals(url)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!logined) &#123;</span><br><span class="line">        responseResource(out, <span class="string">&quot;/user/login.html&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collection&lt;User&gt; users = DataBase.findAll();</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&quot;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;td&gt;&quot;</span> + user.getUserId() + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;td&gt;&quot;</span> + user.getName() + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;td&gt;&quot;</span> + user.getEmail() + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(<span class="string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] body = sb.toString().getBytes();</span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">    response200Header(dos, body.length);</span><br><span class="line">    responseBody(dos, body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이번엔 제가 구현한 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&quot;/user/list&quot;</span>)) &#123;</span><br><span class="line">    Map&lt;String, String&gt; cookies = HttpRequestUtils.parseCookies(headerMap.get(<span class="string">&quot;Cookie&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span>(cookies.get(<span class="string">&quot;logined&quot;</span>) == <span class="keyword">null</span> || !Boolean.parseBoolean(cookies.get(<span class="string">&quot;logined&quot;</span>))) &#123;</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">        response302Header(dos);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        Collection&lt;User&gt; userList = DataBase.findAll();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user : userList) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;&lt;th scope=\&quot;row\&quot;&gt;&quot;</span>+idx+<span class="string">&quot;&lt;/th&gt;&lt;td&gt;&quot;</span>+user.getUserId()+<span class="string">&quot;&lt;/td&gt; &lt;td&gt;&quot;</span>+user.getName()+<span class="string">&quot;&lt;/td&gt; &lt;td&gt;&quot;</span>+user.getEmail()+<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&lt;a href=\&quot;#\&quot; class=\&quot;btn btn-success\&quot; role=\&quot;button\&quot;&gt;수정&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String fileData = <span class="keyword">new</span> String(Files.readAllBytes(<span class="keyword">new</span> File(<span class="string">&quot;./webapp&quot;</span> + url).toPath()) );</span><br><span class="line">        fileData = fileData.replace(<span class="string">&quot;%user_list%&quot;</span>, URLDecoder.decode(sb.toString(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">        <span class="keyword">byte</span>[] body = fileData.getBytes();</span><br><span class="line">        response200Header(dos, body.length);</span><br><span class="line">        responseBody(dos, body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>박재성님께서는 공통적으로 사용될만한 로그인 확인 부분을 따로 빼서 체크 하셨는데, 저는 따로 제외처리 하지 않았네요.<br>구현할때 공통적으로 들어갈만한 부분을 미리 따로 빼서 구현하면 훨씬더 좋지 않을까 라고 생각을 했구요<br>StringBuilder를 이용해서 테이블을 생성할때 아무래도 제가 구현한 부분이 가독성이 더 떨어지는거 같습니다.</p><p>그 외에 박재성님께서는 테이블만 구현해서 간단하게 뷰를 구현하셨지만 저는 list.html 파일에 한줄 추가 하는 형태로 구현을 했습니다. (박재성님께서 작성하신 다른 브랜치 또는 다른 곳에서는 list.html에 추가하는 형태로 하셨을 수 도 있습니다)</p><h3 id="4-2-이전-장에서-구현한-웹서버의-이론적인-부분을-다뤄봅니다"><a href="#4-2-이전-장에서-구현한-웹서버의-이론적인-부분을-다뤄봅니다" class="headerlink" title="4.2 이전 장에서 구현한 웹서버의 이론적인 부분을 다뤄봅니다."></a>4.2 이전 장에서 구현한 웹서버의 이론적인 부분을 다뤄봅니다.</h3><h4 id="요구사항1-index-html-응답하기"><a href="#요구사항1-index-html-응답하기" class="headerlink" title="요구사항1 - index.html 응답하기"></a>요구사항1 - index.html 응답하기</h4><p>HTTP를 이용해 데이터를 주고받기 위해서는 아래와 같은 형테로 데이터를 주고 받습니다.  </p><p><img src="https://mdn.mozillademos.org/files/13827/HTTPMsgStructure2.png" alt="이미지1"><br>출처 :<a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Messages">https://developer.mozilla.org/ko/docs/Web/HTTP/Messages</a></p><p>요청 데이터는 Request-Line, Header, Body로 구성되어 있고<br>응답 데이터는 Status-Line, Header, Body 로 구성되어 있습니다.</p><p>Request-Line에는 HTTP 메소드 - URI - HTTP 버전 으로 구성되어 있습니다.<br>Header에는 Key : Value형태로 값이 들어가있고, 여러개의 값을 쉼표(,)를 이용해 전달 할 수 있습니다.<br>ex) Accept-Encoding: gzip, deflate, sdch</p><p>Status-Line은 HTTP 버전 - 상태코드<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> - 응답 구문 으로 구성되어 있습니다.</p><h4 id="요구사항2-GET-방식으로-회원가입하기"><a href="#요구사항2-GET-방식으로-회원가입하기" class="headerlink" title="요구사항2 - GET 방식으로 회원가입하기"></a>요구사항2 - GET 방식으로 회원가입하기</h4><p>회원가입 요청시에 URI는 다음과 같습니다. /user/create?userId=test&amp;password=password&amp;name=tester …<br>여기서 /user/create는 path라 부르고, ?이후 key=value&amp;key=value&amp;… 형태로 전달되는 값은 QueryString 이라고 부릅니다.</p><p>GET방식은 사용자가 입력한 데이터가 브라우저 URL에 노출되고, 요청 데이터의 길이 제한이 있으므로 사용자가 입력한 데이터를 서버에 전송할때는 적합하지 않습니다.</p><h4 id="요구사항-3-POST-방식으로-회원가입하기"><a href="#요구사항-3-POST-방식으로-회원가입하기" class="headerlink" title="요구사항 3 - POST 방식으로 회원가입하기"></a>요구사항 3 - POST 방식으로 회원가입하기</h4><p>GET방식에서 POST방식으로 요청을 전송할경우 사용자가 입력한 데이터가 쿼리스트링대신 body에 담겨 전달됩니다.<br>Header에 Content-Length라는 필드 이름으로 body에 담긴 데이터의 길이가 전송됩니다.</p><p>요구사항 3번에서는 헤더에 포함되어있는 Content-Length값을 구해서 본문의 길이를 구하고, 그 길이만큼 본문을 Map&lt;String, String&gt;형태로 변환하면 됩니다.<br>본문을 읽는 기능은 IOUtils.readData()를 사용하면 됩니다.</p><p>HTTP 스펙은 GET, POST 이외에 PUT, DELETE, OPTIONS 등의 메소드를 지원하지만 HTML은 GET과 POST만 사용가능하도록 지원하고 있습니다.<br>GET, POST 메소드 외의 것들은 AJAX를 이용해 사용 가능합니다.</p><p>GET은 서버에서 데이터를 조회할때, POST는 서버의 상태를 변경하는 작업을 할때 사용한다.</p><h4 id="요구사항-4-302-status-code-적용"><a href="#요구사항-4-302-status-code-적용" class="headerlink" title="요구사항 4 - 302 status code 적용"></a>요구사항 4 - 302 status code 적용</h4><p>특정 동작을 수행후 페이지 이동을 처리할때 URL을 변경해서 처리하면 브라우저에 이전 페이지에 대한 정보를 가지고 있어서 뒤로가기를 하게되면 동작이 다시 수행될 가능성이 있습니다.<br>따라서 response 헤더에 상태값을 302로 설정해서 보내면 브라우저에서 자동으로 페이지를 이동시킨다.<br><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Status/302">https://developer.mozilla.org/ko/docs/Web/HTTP/Status/302</a></p><p>헤더는 아래와 같이 작성하면 되는데 책에는 302 Redirect로 되어있다.<br>HTTP프로토콜 문서에는 302 Found로 되어있는데, Redirect동작을 수행하므로 어떤걸 사용해도 동작하는데 문제는 없을거 같습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Location: https://www.naver.com</span><br></pre></td></tr></table></figure><p>참고로 Redirect를 수행하는 코드가 301 Moved Permanently도 있다고합니다.<br>301, 302 상태코드의 차이점에 대해서 알아보고 포스팅 하도록 하겠습니다.</p><p>그리고 Redirect의 경우 브라우저에서 새로운 위치로 이동을 요청하므로 요청이 2개가 발생하게 된다.<br><img src="https://cdn.app.compendium.com/uploads/user/e7c690e8-6ff9-102a-ac6d-e4aebca50425/c3cad7e2-7cbe-4b55-882e-5169b97305c7/Image/48cf523ced423ad1c045bcb51c48f1c9/allowed_redirects.png" alt="302 처리 이미지"><br>출처 : <a href="https://blogs.oracle.com/ebstech/secure-oracle-e-business-suite-122-with-allowed-redirects">https://blogs.oracle.com/ebstech/secure-oracle-e-business-suite-122-with-allowed-redirects</a></p><h4 id="요구사항-5-로그인하기"><a href="#요구사항-5-로그인하기" class="headerlink" title="요구사항 5 - 로그인하기"></a>요구사항 5 - 로그인하기</h4><p>HTTP는 클라이언트와 서버간 요청을 주고받고 나서 연결을 끊는 <a href="https://ko.wikipedia.org/wiki/%EB%AC%B4%EC%83%81%ED%83%9C_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C">무상태 프로토콜(stateless protocol)</a> 이라고도 부릅니다.<br>따라서 서버가 클라이언트를 식별할 수 없다는 문제가 있는데요<br>예를 들어서 쇼핑몰에서 상품을 장바구니에 담는 요청을 서버로 날리고 요청이 끊긴 후 장바구니 리스트로 이동하면 서버는 어떤 클라이언트가 장바구니에 어떤 상품을 담았는지 식별이 불가능 하기때문에 비어있는것처럼 보이겠죠. 이런 문제가 발생할 가능성이 있기때문에 서버가 클라이언트를 식별할 수 있는 방법이 필요한데요 이번 요구사항에서는 쿠키를 이용해 클라이언트를 식별하는 정보를 저장하도록 했습니다.</p><p>클라이언트가 서버로 로그인 요청을 보내면 응답값의 헤더에 Set-Cookie라는 이름으로 어떤 정보를 저장할지 정해서 클라이언트에 넘겨주면<br>클라이언트에서 해당 값을 저장하고 있다가 다음번 요청때 Cookie를 불러와서 요청을 보내게 됩니다.</p><h4 id="요구사항-6-사용자-목록-출력"><a href="#요구사항-6-사용자-목록-출력" class="headerlink" title="요구사항 6 - 사용자 목록 출력"></a>요구사항 6 - 사용자 목록 출력</h4><p>요구사항 5에서 구현된 내용은 로그인시 쿠키를 설정하는 내용이었는데, 요구사항 6에서는 저장된 쿠키값을 서버에서 식별해 값에 따라 동작을 하게끔 구현하는 내용입니다. 클라이언트로부터 요청이 들어올때 요청 헤더의 Cookie값을 읽고 그 값에 맞는 동작을 수행하면 됩니다.</p><h4 id="요구사항-7-CSS-지원하기"><a href="#요구사항-7-CSS-지원하기" class="headerlink" title="요구사항 7 - CSS 지원하기"></a>요구사항 7 - CSS 지원하기</h4><p>모든 요청에 대한 응답에는 응답의 데이터가 어떤 형태의 데이터인지 정의 할수 있는 Content-Type라는 헤더가 있습니다.<br>이전까지 구현했던 내용에서는 모든 Content-Type의 데이터를 text/html로 설정해서 보냈습니다.<br>이렇게 되면 클라이언트에서 CSS파일을 요청했을때에도 Content-Type이 text/html이므로 CSS가 정상적으로 적용되지 않는 문제가 있습니다.<br>이와 같은 문제를 해결하기 위해서 CSS파일 요청시에 Content-Type을 text/css로 설정해서 보내면 정상적으로 동작합니다.</p><p>CSS뿐만아니고 JS, 이미지등 다양한 타입의 데이터도 Content-Type을 맞춰서 설정해야 정상적으로 동작 할거 같습니다.</p><p>다음단계의 실습을 진행하기위해서는 기존 코드에서 브랜치를 따서 작업해야합니다.</p><ul><li><a href="https://www.youtube.com/watch?v=VeTjDYl7UVs">eclipse와 터미널에서 remote branch checkout 및 변경하는 방법</a></li></ul><h3 id="4-3-추가-학습-자료"><a href="#4-3-추가-학습-자료" class="headerlink" title="4.3 추가 학습 자료"></a>4.3 추가 학습 자료</h3><ul><li><a href="http://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html">http://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=6876538">프로가 되기 위한 웹 기술 입문 / 2012년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8657832">그림으로 배우는 HTTP &amp; Network Basic / 2015년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8509980">HTTP 완벽 가이드 / 2014년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=13920339">성공과 실패를 결정하는 1%의 네트워크 원리 / 2018년</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://tools.ietf.org/html/rfc7231#section-6.1</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이전 장에서 요구사항 6번은 동영상이 빠져있는데 그 부분은 박재성님께서 구현한 코드를 통해서 확인 가능할거 같습니다. &lt;a href=&quot;https://github.com/slipp/web-application-server/blob/was-step1
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="nextstep" scheme="https://kys9261.github.io/tags/nextstep/"/>
    
  </entry>
  
  <entry>
    <title>[프로그래머스] 웹 백엔드 시스템 구현 온라인 스터디</title>
    <link href="https://kys9261.github.io/2019/05/09/programming/study/programmers-web-backend-study/"/>
    <id>https://kys9261.github.io/2019/05/09/programming/study/programmers-web-backend-study/</id>
    <published>2019-05-09T14:25:50.000Z</published>
    <updated>2020-01-18T17:06:50.941Z</updated>
    
    <content type="html"><![CDATA[<p>얼마전 프로그래머스 사이트에서 <a href="https://programmers.co.kr/learn/courses/9872">웹 백엔드 시스템 스터디</a>를 시작했습니다.<br>혼자서 업무를 진행하면서 코드리뷰나 저보다 잘하는 분들의 코드를 보면서 공부할 수 있는 기회가 없었는데 온라인으로도 참여 가능하고 좋은 기회일거 같아서 신청하게 되었습니다.  </p><p>현재 수업이 진행중이긴 하지만 매주 진행되는 수업에서 제가 몰랐던것, 새로 알게되었던것, 공부가 필요한 부분에 대해서 정리를 해둬야 나중에라도 인지하고 공부하고 블로그에 정리해둘 수 있을거 같아서 이 포스팅을 작성하게 되었습니다.</p><h2 id="1주차"><a href="#1주차" class="headerlink" title="1주차"></a>1주차</h2><ul><li>Spring Security 인증(Authentication) - 신원을 증명 </li><li>Spring Security 인가(Authorization) - 권한을 부여</li><li>Spring Security 인증 처리 흐름 공부</li><li>AccessDecisionVoter 동작 원리</li><li>JWT</li><li>구글 구아바(Guava)</li><li>아파치 커먼즈(Commons) - ClassUtils</li><li>자바 람다 &amp; 함수형 인터페이스 (<a href="http://tcpschool.com/java/java_lambda_concept">http://tcpschool.com/java/java_lambda_concept</a>)</li><li>RequestMatcher <a href="https://docs.spring.io/spring-security/site/docs/4.2.13.BUILD-SNAPSHOT/apidocs/org/springframework/security/web/util/matcher/RequestMatcher.html">링크</a></li><li>생성자 주입(Constructor Injection)</li><li>ToStringBuilder / ToStringStyle</li><li>생성자에 여러 변수값이 들어갈때 같은 타입의 변수나 객체가 연속으로 들어가지 않게끔하자 -&gt; 같은 타입이 연속으로 있을때 값을 바꿔 넣거나 잘못 넣을 경우가 있으므로 비 연속적으로 들어가면 그러한 경우를 최소화 시킬 수 있다(권장)</li><li>여러 데이터가 같은 변수명을 사용할때 제네릭의 멀티타입 파라미터(Id&lt;R, V&gt;)를 이용해 클래스와 값을 넣게끔해서 타입 구분을 명확하게 할수있도록 한다.</li></ul><h2 id="2주차"><a href="#2주차" class="headerlink" title="2주차"></a>2주차</h2><ul><li>swagger</li><li>좋은 비지니스 로직을 개발하는 방법</li></ul><h2 id="3주차"><a href="#3주차" class="headerlink" title="3주차"></a>3주차</h2><ul><li>AWS S3</li><li>Guava Event Bus</li><li>ControllerAdvice</li></ul><h2 id="4주차"><a href="#4주차" class="headerlink" title="4주차"></a>4주차</h2><ul><li>web push</li></ul><h2 id="5주차"><a href="#5주차" class="headerlink" title="5주차"></a>5주차</h2><ul><li>kafka</li><li>MSA</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;얼마전 프로그래머스 사이트에서 &lt;a href=&quot;https://programmers.co.kr/learn/courses/9872&quot;&gt;웹 백엔드 시스템 스터디&lt;/a&gt;를 시작했습니다.&lt;br&gt;혼자서 업무를 진행하면서 코드리뷰나 저보다 잘하는 분들의 코드를
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="프로그래머스" scheme="https://kys9261.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"/>
    
      <category term="programmers" scheme="https://kys9261.github.io/tags/programmers/"/>
    
      <category term="온라인스터디" scheme="https://kys9261.github.io/tags/%EC%98%A8%EB%9D%BC%EC%9D%B8%EC%8A%A4%ED%84%B0%EB%94%94/"/>
    
      <category term="백엔드" scheme="https://kys9261.github.io/tags/%EB%B0%B1%EC%97%94%EB%93%9C/"/>
    
      <category term="backend" scheme="https://kys9261.github.io/tags/backend/"/>
    
      <category term="web" scheme="https://kys9261.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>[GoogleChart] 툴팁 깜빡임 문제 해결</title>
    <link href="https://kys9261.github.io/2019/05/03/programming/etc/googlechart-tooltip-flickering/"/>
    <id>https://kys9261.github.io/2019/05/03/programming/etc/googlechart-tooltip-flickering/</id>
    <published>2019-05-03T14:54:01.000Z</published>
    <updated>2021-10-29T15:20:46.696Z</updated>
    
    <content type="html"><![CDATA[<p>구글 차트를 사용하다보면 차트의 끝부분과 툴팁이 만나는 지점에 커서를 올리면 아래 그림처럼 툴팁이 빠르게 깜빡입니다.<br><img src="https://user-images.githubusercontent.com/7028715/57085554-63698780-6d37-11e9-82f6-38ea825f202c.gif" alt="Flickering"></p><p>기능에는 크게 문제가 없어보이지만 아무래도 깜빡이지 않게 하는게 좀더 완벽해 보이기도 하고, 이슈로 파악될 수 있기때문에 위 문제를 해결해보겠습니다.</p><p>저도 위 문제로 해결책을 찾다가 StackOverflow에 해외의 선배 개발자님께서 <a href="https://stackoverflow.com/questions/37902708/google-charts-tooltip-flickering">해결책</a>을 올려주신걸 보았습니다.  </p><p>아주 쉽게 해결을 할 수 있는데요 CSS에 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svg &gt; g &gt; g<span class="selector-pseudo">:last-child</span> &#123; <span class="attribute">pointer-events</span>: none &#125;</span><br></pre></td></tr></table></figure><p>위 코드만 추가해주면 됩니다.<br>pointer-events는 해당 요소에 이벤트를 설정할 수 있는 속성인데 해당부분을 none으로 설정하므로서 이벤트가 발생하지 않게 처리해주는거 같습니다.</p><p>위 CSS를 적용하고 다시 확인하면 기대했던것 처럼 툴팁이 깜빡 거리지 않는걸 확인할 수 있습니다.</p><iframe scrolling="no" width="900" height="500" src="https://jsfiddle.net/tpud4j2q/2/embedded/result,html,css,js/dark" frameborder="0" loading="lazy" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;구글 차트를 사용하다보면 차트의 끝부분과 툴팁이 만나는 지점에 커서를 올리면 아래 그림처럼 툴팁이 빠르게 깜빡입니다.&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7028715/57085554
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Etc" scheme="https://kys9261.github.io/categories/Programming/Etc/"/>
    
    
      <category term="구글차트" scheme="https://kys9261.github.io/tags/%EA%B5%AC%EA%B8%80%EC%B0%A8%ED%8A%B8/"/>
    
      <category term="googlechart" scheme="https://kys9261.github.io/tags/googlechart/"/>
    
      <category term="tooltip" scheme="https://kys9261.github.io/tags/tooltip/"/>
    
      <category term="툴팁깜빡임" scheme="https://kys9261.github.io/tags/%ED%88%B4%ED%8C%81%EA%B9%9C%EB%B9%A1%EC%9E%84/"/>
    
      <category term="flickering" scheme="https://kys9261.github.io/tags/flickering/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu에 SonarQube 설치하기</title>
    <link href="https://kys9261.github.io/2019/05/02/programming/devops/how-to-install-sonarqube-on-ubuntu/"/>
    <id>https://kys9261.github.io/2019/05/02/programming/devops/how-to-install-sonarqube-on-ubuntu/</id>
    <published>2019-05-02T03:29:34.000Z</published>
    <updated>2020-01-18T17:06:50.938Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서 혼자서 프로젝트를 진행하다보면 코드에 문제가 거나나 취약점 혹은 잠재적 에러 발상 부분에 대해서 스스로 파악하고 해결해야하는 문제점을 가지고 있습니다.<br>저도 항상 그 부분때문에 배포하고 나서도 생각하지도 못한 NPE로 인해서 재 배포하는 일도 빈번했습니다.<br>물론 완벽하게 예외처리를하고, 입력값에 대한 철저한 검증을 했다만 막을 수 있었겠지만 혼자서 완벽하게 처리하기에는 아직 경험과 실력이 부족한거 같습니다.</p><p>그래서 이번에는 SonarQube 정적 분석툴을 이용해 제가 작업한 소스코드에 어떤부분이 잠재적으로 오류를 발생하는지, 어떻게 수정하면 좋을지 등에 대한 피드백을 받기로 했습니다.<br>우선 SonarQube 대한 자세한 내용은 아래 글을 참고하면 좋을거 같구요<br>이번 포스팅에선 Ubuntu에 SonarQube 설치하는 방법에 대해서 작성해보려고 합니다.</p><ul><li><a href="https://medium.com/@joypinkgom/%EC%86%8C%EC%8A%A4-%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D%EB%8F%84%EA%B5%AC-sonarqube-%EB%A6%AC%EC%84%9C%EC%B9%AD-9d48fc62b01f">https://medium.com/@joypinkgom/%EC%86%8C%EC%8A%A4-%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D%EB%8F%84%EA%B5%AC-sonarqube-%EB%A6%AC%EC%84%9C%EC%B9%AD-9d48fc62b01f</a></li><li><a href="https://www.popit.kr/%EB%82%B4%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EB%B7%B0%ED%95%B4%EC%A4%80%EB%8B%A4%EB%A9%B4-by-sonarqube/">https://www.popit.kr/%EB%82%B4%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EB%B7%B0%ED%95%B4%EC%A4%80%EB%8B%A4%EB%A9%B4-by-sonarqube/</a></li></ul><hr><h2 id="1-Download"><a href="#1-Download" class="headerlink" title="1. Download"></a>1. Download</h2><p>우선 SonarQube <a href="https://www.sonarqube.org/downloads/">다운로드 페이지</a>로 이동해서 설치하려는 버젼의 압축파일 링크를 복사합니다.<br>저는 LTS 버젼인 6.7.7 버젼을 설치 했습니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/56943727-c9011c80-6b5b-11e9-9104-23109727256e.png" alt="링크주소 복사"></p><p>복사된 주소를 ubuntu 서버 터미널에서 wget을 이용해 다운받습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 다운로드</span></span><br><span class="line">wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-6.7.7.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip파일 압축 해제를 위한 unzip 설치</span></span><br><span class="line">sudo apt-get install unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip파일 압축 해제</span></span><br><span class="line">unzip sonarqube-6.7.7.zip</span><br></pre></td></tr></table></figure><h2 id="2-JDK-설치"><a href="#2-JDK-설치" class="headerlink" title="2. JDK 설치"></a>2. JDK 설치</h2><p>SonarQube를 사용하려면 서버에 JDK도 설치 되어있어야 합니다만. 지원하는 JDKsms Open JDK 8 버젼만 지원합니다. <a href="https://docs.sonarqube.org/latest/requirements/requirements/">참고</a></p><p>그래서 Open JDK 8 버젼을 설치합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Open JDK 8 설치</span></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java 환경변수 설정</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=$(readlink -f /usr/bin/javac | sed <span class="string">&quot;s:/bin/javac::&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 환경변수 설정 내용 확인</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><h2 id="3-Database-셋팅"><a href="#3-Database-셋팅" class="headerlink" title="3. Database 셋팅"></a>3. Database 셋팅</h2><p>SonarQube에는 MS-SQL, Oracle, PostgreSQL, MySQL을 지원하는거 같은데 MySQL은 권장하지 않는다고 합니다.(데이터 센터 에디션은 아예 MySQL을 지원하지 않는다고 합니다.)</p><p>그래서 여기서는 PostgreSQL을 이용해 셋팅을 해보도록 하겠습니다.<br>(저도 PostgreSQL은 처음이라 좀 셋팅이 어설플 수 있습니다.)</p><p>PostgreSQL 셋팅은 아래와 같이 작업합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># postgresql을 설치합니다.</span></span><br><span class="line">sudo apt-get install postgresql</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgres로 계정을 바꿔줍니다.</span></span><br><span class="line">sudo -i -u postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgresql의 쉘 커맨드를 실행합니다.</span></span><br><span class="line">psql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 계정을 생성하고 비밀번호를 설정해줍니다.</span></span><br><span class="line">CREATE USER kys9261 WITH ENCRYPTED PASSWORD <span class="string">&#x27;password123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># sonar라는 DB를 생성하고, kys9261 계정을 관리자(?)로 할당합니다.</span></span><br><span class="line"><span class="comment"># 테이블 이름은 변경하셔도 되지만 SonarQube에서 사용되는 기본 DB 이름은 sonar입니다.</span></span><br><span class="line">create database sonar owner kys9261;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 쉘 커맨드를 종료합니다.</span></span><br><span class="line">CTRL + C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원래 계정으로 돌아갑니다.</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="4-SonarQube-셋팅"><a href="#4-SonarQube-셋팅" class="headerlink" title="4. SonarQube 셋팅"></a>4. SonarQube 셋팅</h2><p>이제 SonarQube 셋팅 후 실행하는 단계만 남았습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SonarQube 설정 파일을 수정합니다.</span></span><br><span class="line">vi <span class="variable">$HOME</span>/sonarqube-6.7.7/conf/sonar.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16번 17번 주석을 해제후 DB셋팅시 만든 계정에 정보를 입력해줍니다.</span></span><br><span class="line">sonar.jdbc.username=kys9261</span><br><span class="line">sonar.jdbc.password=password123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 39번 줄의 주석을 해제해줍니다.</span></span><br><span class="line">sonar.jdbc.url=jdbc:postgresql://localhost/sonar</span><br></pre></td></tr></table></figure><h2 id="5-SonarQube-실행"><a href="#5-SonarQube-실행" class="headerlink" title="5. SonarQube 실행"></a>5. SonarQube 실행</h2><p>이제 SonarQube를 실행해보겠습니다.<br><code>cd $HOME/sonarqube-6.7.7/conf</code>로 이동해서 보면 여러 운영체제의 실행폴더가 있는데요<br>그중에서 linux-x86-64 폴더로 들어갑니다(linux-x86-32 도 있는데 OS에 맞춰서 들어가시면 될거 같아요)  </p><p>실행할때 추가적인 옵션에 따라서 그냥 실행 혹은 중단, 재시작, 상태확인, 콘솔 출력 등의 작업을 수행할 수 있는데요<br>설치후 최초 실행하는거라서 저는 항상 정상적으로 실행되는지 궁금해서 콘솔 출력 옵션을 추가해서 실행합니다.<br>(옵션 목록 : console | start | stop | restart | status | dump)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기본적인 SonarQube 실행</span></span><br><span class="line">./sonar.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># SonarQube 실행과 콘솔 출력</span></span><br><span class="line">./sonar.sh console start</span><br></pre></td></tr></table></figure><p>SonarQube가 정상적으로 실행이 되었다면 웹브라우저를 통해 접속해보겠습니다.<br>SonarQube의 기본 포트는 9000번 이구요 변경하고 싶다고 하시면 sonar.properties 파일에서 변경 가능합니다.</p><h2 id="6-SonarQube와-프로젝트-연동"><a href="#6-SonarQube와-프로젝트-연동" class="headerlink" title="6. SonarQube와 프로젝트 연동"></a>6. SonarQube와 프로젝트 연동</h2><p>http://서버의IP:9000 로 접속하시면 SonarQube 페이지가 노출됩니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/57053861-b86fb400-6ccb-11e9-9dcb-aacfe76e1e27.png" alt="Sonarqube 접속페이지"></p><p>로그인을 할때는 ID : admin / PW : admin으로 접속하시고 관리자 페이지에서 계정추가 및 관리를 해주시면 됩니다.</p><p>최초 로그인하면 연결된 프로젝트가 없어서 튜토리얼이 진행되면서 프로젝트 연동을 도와줍니다.<br><img src="https://user-images.githubusercontent.com/7028715/57053943-6ed39900-6ccc-11e9-894b-9c5bd9d4716c.png" alt="첫번째 튜토리얼"></p><p>튜토리얼 1번에 Token의 이름을 입력하시고 Generate 버튼을 누르시면 토큰이 생성됩니다.<br>(토큰은 프로젝트 식별을 위해 사용되는거 같습니다.)</p><p><img src="https://user-images.githubusercontent.com/7028715/57054054-14870800-6ccd-11e9-8c47-8911ea5e4357.png" alt="토큰생성"><br>토큰 생성 완료 후 Continue 버튼을 누르시면 다음 튜토리얼로 넘어갑니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/57054209-0eddf200-6cce-11e9-909c-ce209b3a8543.png" alt="프로젝트 연동"><br>프로젝트를 연동하기 위해 선택해야 하는 부분이 있는데요 우선 프로젝트가 어떤 언어로 개발되었는지, 빌드툴은 Maven을 쓰는지 Gradle을 쓰는지 선택을 하면 오른쪽에 연동할때 필요한 스크립트 및 플러그인 코드가 나옵니다.</p><p>저는 Spring에 Gradle을 사용하고 있어서 위와 같이 선택하였구요.<br>첫번째 코드는 프로젝트의 build.gradle파일에 추가해주시면 됩니다.  </p><p>두번째 스크립트는 터미널을 열고 프로젝트가 위치한 폴더로 이동후 터미널에 입력하면 해당 프로젝트를 SonarQube와 연동하게 됩니다.<br>정상적으로 연동이 완료되면 아래 이미지와 같이 연동된 프로젝트가 노출되고요 여러가지 버그, 취약점등에 대해 확인할 수 있습니다.<br><img src="https://user-images.githubusercontent.com/7028715/57055284-70ee2580-6cd5-11e9-960d-438d8c1dcf58.png" alt="연동완료"></p><p>다음번에는 이전 포스팅에서 작업한 Gitlab과 SonarQube를 연동해서 PR이 요청되면 자동으로 SonarQube의 정적분석을 실행해서 결과를 알려주는 방법에 대해 소개해 보겠습니다.</p><hr><p><strong>참고 링크</strong></p><ul><li><a href="https://zetawiki.com/wiki/%EC%9A%B0%EB%B6%84%ED%88%AC_PostgreSQL_%EC%84%A4%EC%B9%98">https://zetawiki.com/wiki/%EC%9A%B0%EB%B6%84%ED%88%AC_PostgreSQL_%EC%84%A4%EC%B9%98</a></li><li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=61899197">https://www.lesstif.com/pages/viewpage.action?pageId=61899197</a></li><li><a href="http://postgresql.kr/docs/9.3/tutorial-accessdb.html">http://postgresql.kr/docs/9.3/tutorial-accessdb.html</a></li><li><a href="https://all-record.tistory.com/181">https://all-record.tistory.com/181</a></li><li><a href="https://confluence.curvc.com/pages/viewpage.action?pageId=6160585">https://confluence.curvc.com/pages/viewpage.action?pageId=6160585</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;회사에서 혼자서 프로젝트를 진행하다보면 코드에 문제가 거나나 취약점 혹은 잠재적 에러 발상 부분에 대해서 스스로 파악하고 해결해야하는 문제점을 가지고 있습니다.&lt;br&gt;저도 항상 그 부분때문에 배포하고 나서도 생각하지도 못한 NPE로 인해서 재 배
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="DevOps" scheme="https://kys9261.github.io/categories/Programming/DevOps/"/>
    
    
      <category term="ubuntu" scheme="https://kys9261.github.io/tags/ubuntu/"/>
    
      <category term="SonarQube" scheme="https://kys9261.github.io/tags/SonarQube/"/>
    
      <category term="소나큐브" scheme="https://kys9261.github.io/tags/%EC%86%8C%EB%82%98%ED%81%90%EB%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu에 GitLab 설치하기</title>
    <link href="https://kys9261.github.io/2019/04/12/programming/devops/how-to-install-gitlab-on-ubuntu/"/>
    <id>https://kys9261.github.io/2019/04/12/programming/devops/how-to-install-gitlab-on-ubuntu/</id>
    <published>2019-04-12T06:00:51.000Z</published>
    <updated>2020-01-18T17:06:50.938Z</updated>
    
    <content type="html"><![CDATA[<p>대부분의 개발팀 에서는 개발하고 있는 프로젝트의 소스를 VCS(Version Control Systems)을 이용해서 관리하고, 협업할때 사용을 합니다. 대표적으로 SVN(Subversion), Git이 있죠.  </p><p>주로 우리가 오픈소스 프로젝트를 하거나 개인프로젝트를 진행할때는 Github을 많이 사용하고, Private 레파지토리도 무제한이라서 스타트업 또는 회사에서도 Github을 이용해 소스코드를 관리 하는 곳도 있습니다.<br>하지만 제가 경험한 회사들은 일단 다른 회사의 서버(Github, Bitbucket, GitLab 등등)에 우리 회사에서 진행한 프로젝트의 소스코드(자산) 을 업로드 하는걸 좋아하지는 않습니다. 혹시모를 보안상의 이유나, 장애발생시 대처가 어렵다는 이유인것 같은데요.</p><p>그래서 저희팀도 자체적으로 VCS서버를 운영을 하고 있습니다. 설치형 Git(Self-Hosted)서버는 GitLab, Bitbucket(<del>이거 둘만 알고있습니다</del>) 이 있는데요 Bitbucket은 자체 서버에 설치하더라도 무조건 유료인데, GitLab Core 버젼(?)은 무료로 제공하고 있어서 GitLab 선정 된거 같습니다. (제가 설치한건 아니라 정확한 이유는 모르겠….)</p><p>아무튼 오늘은 ubuntu 서버에 GitLab 직접 설치해 보도록 하겠습니다.</p><p>우선 GitLab은 Community Edition이랑 Enterprise Edition으로 구분이 되어있구요<br>CE는 무료, EE는 유료 이렇게 구분하면 좀 쉽게 구분할 수 있고<br>EE가 유료인만큼 조금 더 다양한 기능이 있습니다. <a href="https://about.gitlab.com/pricing/self-managed/feature-comparison/">기능 비교</a></p><p>EE로 설치하셔도 라이센스를 구매하지 않으신경우엔 CE와 동일하게 사용 가능한거 같습니다.<br>Gitlab을 쓰다가 나중에라도 라이센스 구매를 할 계획이 있으시다면 무조건 EE를 설치해주세요.<br>(CE로 설치하면 라이센스 적용시 EE로 재 설치 하셔야합니다.)</p><ul><li><a href="https://about.gitlab.com/install/#ubuntu?version=ce">Community Edition 설치</a></li><li><a href="https://about.gitlab.com/install/#ubuntu?version=ee">Enterprise Edition 설치</a></li><li><a href="https://docs.gitlab.com/ee/user/admin_area/license.html">Enterprise Edition에 라이센스 적용</a></li></ul><p>이 글에서는 Enterprise Edition으로 설치해보도록 하겠습니다.</p><h2 id="Enterprise-Edition으로-설치"><a href="#Enterprise-Edition으로-설치" class="headerlink" title="Enterprise Edition으로 설치"></a>Enterprise Edition으로 설치</h2><p>GitLab Installation 사이트에 보면 아래 사진처럼 엄청 다양한 형태로 GitLab을 설치할수 있게 제공을 해주는데 Omnibus package installation 항목 중 가장 왼쪽 상단에 ubuntu 를 선택하면 ubuntu에서 설치하는 방법에 대해서 나오는데 설치 방법이 엄청 쉽습니다. (요 방법은 EE로 설치됩니다.)</p><img src="https://user-images.githubusercontent.com/7028715/56017429-2f9fd100-5d3a-11e9-83fd-c802b270919c.png"><ol><li><p>패키지 매니저 업데이트 후 GitLab설치시 필요한 패키지를 설치합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y curl openssh-server ca-certificates</span><br></pre></td></tr></table></figure><p>위 패키지를 설치한 후 가이드에는 이메일 전송을 위해 postfix 패키지를 설치하라고 하지만<br>사내에서 제공중인 SMTP 서버를 사용하기 위해 해당 패키지 설치는 skip하겠습니다.</p></li><li><p>GitLab 패키지 설치 저장소를 추가합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure><p>| sudo bash 가 어떤 역할을 하는 명령어 인지 정확하게 몰라서 검색해 봤더니 저랑 같은 궁금증을 가졌던 사람이 reddit에 있었습니다.<br>답변으로는 <code>curl로 해당 .sh 파일을 받아오고 파이프 명령어를 이용해 바로 sudo 권한으로 bash를 이용해 해당 파일을 실행시킨다</code> 라고 답변이 적혀 있네요.<br>아마 저 쉘 스크립트 파일에 GitLab 설치를 위한 스크립트가 작성 되어 있는거 같습니다.<br>(열어봤는데 뭔지 잘 모르겠어요…)</p></li><li><p>GitLab 설치하기<br>설치하기 전에 GitLab에 연결할 도메인이 있으면 EXTERNAL_URL에 해당 도메인을,<br>없으면 해당 서버의 IP를 입력해주셔야 합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo EXTERNAL_URL=<span class="string">&quot;https://gitlab.example.com&quot;</span> apt-get install gitlab-ee</span><br><span class="line"></span><br><span class="line"><span class="comment">#저는 도메인도 없고, 인증서 설치를 하지 않아 아래와 같은 형태로 제 서버의 IP주소를 이용해 설치했습니다.</span></span><br><span class="line">sudo EXTERNAL_URL=<span class="string">&quot;http://192.168.0.1&quot;</span> apt-get install gitlab-ee</span><br></pre></td></tr></table></figure></li></ol><p>1번 부터 3번까지 정상적으로 잘 진행되었으면 GitLab이 정상적으로 설치된것 입니다.<br>3번에서 입력한 도메인 또는 IP를 입력하면 비밀번호 변경 페이지가 바로 나오는데요</p><p>root계정의 비밀번호를 설정하는 페이지이고, 비밀번호 설정 후 로그인 페이지에서<br>Username은 root, Password는 방금 설정하신 비밀번호를 이용해 로그인 하시면 됩니다.</p><p>이 이후부터는 특별한 설정을 하지 않아도 Github처럼 레파지토리를 생성하고, 프로젝트를 푸시하는 등의 기능을 모두 사용 가능합니다.</p><hr><p><strong>참고</strong></p><ol><li><a href="https://www.reddit.com/r/linuxquestions/comments/70ialz/what_does_sudo_bash_do/">https://www.reddit.com/r/linuxquestions/comments/70ialz/what_does_sudo_bash_do/</a></li><li><a href="https://askubuntu.com/questions/857476/what-is-the-use-purpose-of-the-ca-certificates-package">https://askubuntu.com/questions/857476/what-is-the-use-purpose-of-the-ca-certificates-package</a></li><li><a href="https://about.gitlab.com/install/#ubuntu">https://about.gitlab.com/install/#ubuntu</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;대부분의 개발팀 에서는 개발하고 있는 프로젝트의 소스를 VCS(Version Control Systems)을 이용해서 관리하고, 협업할때 사용을 합니다. 대표적으로 SVN(Subversion), Git이 있죠.  &lt;/p&gt;
&lt;p&gt;주로 우리가 오픈소
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="DevOps" scheme="https://kys9261.github.io/categories/Programming/DevOps/"/>
    
    
      <category term="ubuntu" scheme="https://kys9261.github.io/tags/ubuntu/"/>
    
      <category term="GitLab" scheme="https://kys9261.github.io/tags/GitLab/"/>
    
      <category term="git" scheme="https://kys9261.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>자바 웹 프로그래밍 Next Step - 3. 개발 환경 구축 및 웹 서버 실습 요구사항</title>
    <link href="https://kys9261.github.io/2019/04/02/programming/study/book-nextstep/java-web-programming-next-step-4/"/>
    <id>https://kys9261.github.io/2019/04/02/programming/study/book-nextstep/java-web-programming-next-step-4/</id>
    <published>2019-04-02T11:53:25.000Z</published>
    <updated>2021-08-16T12:29:50.358Z</updated>
    
    <content type="html"><![CDATA[<p>3장부터 12장 까지는 하나의 프로젝트를 단계적으로 수행하는 형태로 진행됩니다.</p><p>질문과 답변을 받는 웹 서비스를 구현하는게 목표이고, 이번 장 에서는 요구사항 확인, 웹 어플리케이션의 개밣 환경 구축 그리고 서버 실습 환경을 구축 해보도록 합니다.</p><h3 id="3-1-서비스-요구사항"><a href="#3-1-서비스-요구사항" class="headerlink" title="3.1 서비스 요구사항"></a>3.1 서비스 요구사항</h3><ul><li>질문/답변 게시판에 처음 접근하면 질문 목록을 볼 수 있다.</li><li>질문 목록 화면에서 회원가입, 로그인, 로그아웃, 개인정보 수정이 가능하고 질문하기 화면으로 이동 가능</li><li>질문 목록 화면에서 각 질문 제목을 클릭하면 각질문의 상세보기 화면으로 이동</li><li>상세보기 화면에서는 답변을 추가하고, 질문과 답변의 수정/삭제가 가능</li></ul><h3 id="3-2-개발-환경-구축"><a href="#3-2-개발-환경-구축" class="headerlink" title="3.2 개발 환경 구축"></a>3.2 개발 환경 구축</h3><p>프로젝트를 진행하기 위해 github 저장소 로부터 프로젝트를 clone 하고 적용하는 방법에 대한 영상은 아래에 있습니다.</p><ul><li><a href="https://www.youtube.com/watch?v=xid_GG8kL_w">eclipse에서 git 저장소와 연결 및 import를 통한 로컬 개발 환경 세팅</a></li><li><a href="https://www.youtube.com/watch?v=5hjYe_PggJI">터미널에서 git clone 및 eclipse로 프로젝트 import</a></li></ul><p>아래는 저장소 링크인데요 책에 있는 링크로 들어가 제공해주는 코드를 보았는데 이클립스에서 실행하고 빌드 툴은 메이븐을 사용하는 프로젝트여서<br>제가 평소 개발하는 방식에 맞춰서 인텔리j와 그래들에서 동작하는 프로젝트로 커스텀을 했습니다. 미흡한 부분이 있을 수 있다는거 참고 부탁드립니다.</p><ul><li>3 ~ 6장 실습 저장소 : <a href="https://github.com/slipp/web-application-server">기존 - 이클립스,메이븐</a> / <a href="https://github.com/kys9261/nextstep-book-study/tree/master/web-application-server-raw">커스텀 - 인텔리j, 그래들</a></li><li>6 ~ 12장 실습 저장소 : <a href="https://github.com/slipp/jwp-book">기존 - 이클립스,메이븐</a> / <a href="https://github.com/kys9261/nextstep-book-study/tree/master/jwp-basic-raw">커스텀 - 인텔리j, 그래들</a></li></ul><h3 id="3-3-원격-서버에-배포"><a href="#3-3-원격-서버에-배포" class="headerlink" title="3.3 원격 서버에 배포"></a>3.3 원격 서버에 배포</h3><p>로컬환경에서 개발된 어플리케이션을 원격서버 배포하는 방법에 대해 나와있는데 이건 본인이 따로 서버를 가지고 있다면 그걸 이용해도 되고,<br>따로 없다면 <a href="https://aws.amazon.com/ko/free">AWS</a> 를 이용해 웹 서버를 구축해도 된다.<br>AWS를 이용한 서버 구축은 <a href="https://opentutorials.org/module/1946">오픈 튜토리얼 수업</a>을 참고하자.</p><h4 id="배포-순서"><a href="#배포-순서" class="headerlink" title="배포 순서"></a>배포 순서</h4><ol><li>서버에 접속 후 계정의 Home 디렉토리에 Github 저장소를 clone한다.</li><li>clone한 디렉토리로 이동해 아래 명령어를 입력해 프로젝트를 빌드한다.<br>Gradle : <code>./gradlew clean build</code><br>Maven : <code>mvn clean package</code>  </li><li>빌드가 끝나면 아래 명령어를 실행한다. $PORT는 1024보다 큰 숫자를 지정한다.<br>Gradle : <code>./gradlew run --args=$PORT &</code><br>Maven : <code>java -cp target/classes:target/dependency/* webserver.WebServer $PORT &</code></li><li>$PORT를 8080으로 했다면, <code>curl <a href="http://localhost:8080/">http://localhost:8080</a></code>을 실행해 Hello World 메시지가 찍히는지 확인한다.</li></ol><h5 id="배포-과정-참고-영상"><a href="#배포-과정-참고-영상" class="headerlink" title="배포 과정 참고 영상"></a>배포 과정 참고 영상</h5><ul><li><a href="https://www.youtube.com/watch?v=dWGzApCuF9M">자바, 메이븐 설치 및 설정</a></li><li><a href="https://www.youtube.com/watch?v=N8iLAuAo-Qw">HTTP 웹서버 코드 빌드 및 배포</a></li></ul><h5 id="리눅스-터미널-참고-자료"><a href="#리눅스-터미널-참고-자료" class="headerlink" title="리눅스, 터미널 참고 자료"></a>리눅스, 터미널 참고 자료</h5><ul><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7112622">리눅스 커맨드라인 완벽 입문서 / 2013년</a></li><li><a href="https://www.youtube.com/watch?v=JbH-xzD7IkE">All about dev. on Ubuntu</a></li></ul><h2 id="프로젝트-실습"><a href="#프로젝트-실습" class="headerlink" title="프로젝트 실습"></a>프로젝트 실습</h2><h4 id="요구사항-1-index-html-응답하기-영상"><a href="#요구사항-1-index-html-응답하기-영상" class="headerlink" title="요구사항 1 - index.html 응답하기 (영상)"></a>요구사항 1 - index.html 응답하기 <a href="https://www.youtube.com/watch?v=xHQ0X_Ails4">(영상)</a></h4><p>책에 있는 요구사항을 간단하게 요약 후 직접 구현해보기로 합니다.<br>직접 구현 후에 영상을 한번 보면 박재성님의 설명과 함께 내가 구현한 내용을 비교해보는것도 도움이 되었습니다.</p><p><a href="http://localhost:8080/index.html">http://localhost:8080/index.html</a> 로 접속했을때 webapp폴더의 index.html이 노출되게끔 한다.</p><table><thead><tr><th align="left">힌트</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left">1단계</td><td align="left">- InputStream을 한 줄 단위로 읽기 위해 BufferedReader를 생성<br>- BufferedReader.readLine() 메소드로 한줄씩 HTTP 요청 정보를 읽음<br>- 헤더 마지막 체크는 while (!””.equals(line)) {} 으로 확인 가능<br>- line이 null 값일때 처리. if (inle == null) { return; }</td></tr><tr><td align="left">2단계</td><td align="left">- HTTP 요청 정보의 첫 라인에서 요청 URL을 추출한다.<br>- line.split(“ “)을 활용한다.</td></tr><tr><td align="left">3단계</td><td align="left">- 요청 URL에 해당하는 파일을 webapp디렉토리에서 읽어서 전달한다.<br>- byte[] body = Files.readAllBytes(new File(“./webapp” + url).toPath());</td></tr></tbody></table><p>위의 요구사항과 힌트를 가지고 RequestHandler의 run 메소드를 수정했습니다.<br>아래 코드는 아직 리팩토링 하기 전에 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    InputStream in = connection.getInputStream();</span><br><span class="line">    OutputStream out = connection.getOutputStream()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BufferedReader를 이용해 헤더 값을 읽는다.</span></span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 헤더의 첫번째 줄에는 요청방식, 요청URL, 프로토콜과 버전이 공백을 사이에 두고 들어온다.  ex.  GET /index.html HTTP/1.1</span></span><br><span class="line">    String line = bufferedReader.readLine();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 헤더가 null일경우 응답하지 않는다.</span></span><br><span class="line">    <span class="keyword">if</span>(line == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 헤더 첫번째 줄을 공백을 기준으로 자른다.</span></span><br><span class="line">    String[] splited = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 잘라진 값중 2번째 (index는 1번)에 URL 데이터가 들어있다.</span></span><br><span class="line">    String url = splited[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// line이 &quot;&quot; 일때 까지 반복하면서 line</span></span><br><span class="line">    <span class="comment">// 헤더 데이터를 출력하기 위함임 -&gt; 굳이 필요 없음</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="string">&quot;&quot;</span>.equals(line)) &#123;</span><br><span class="line">        log.info(line);</span><br><span class="line">        line = bufferedReader.readLine();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">    <span class="comment">// URL 해당하는 파일을 가지고와서 byte array로 변환 후 body에 넣어준다.</span></span><br><span class="line">    <span class="keyword">byte</span>[] body = Files.readAllBytes(<span class="keyword">new</span> File(<span class="string">&quot;./webapp&quot;</span> + url).toPath());</span><br><span class="line">    response200Header(dos, body.length);</span><br><span class="line">    responseBody(dos, body);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에 요구사항을 구현하기전에 try-catch문이 처음 보는 형태여서 검색을 해보았습니다. <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br>try-catch-resources라고 불리는건데 자바7부터 추가 되었으며 try 선언시 괄호 안에 close가 필요한 리소스를 넣어주면 try-catch가 종료되면서 자동으로 close() 메소드를 호출해 준다고 합니다.<br>처음보는 형태라 조금 당황했지만 한편으로는 Java의 신규기능에 대해서도 학습 해야할거 같습니다.</p><p>위에서 URL 데이터를 가져오기위해 첫번째 헤더를 split하는 부분은 HttpRequestUtils 클래스에 함수로 따로 빼서 리팩토링 할 예정입니다.<br>&nbsp;  </p><h4 id="요구사항-2-GET-방식으로-회원가입-하기-영상"><a href="#요구사항-2-GET-방식으로-회원가입-하기-영상" class="headerlink" title="요구사항 2 - GET 방식으로 회원가입 하기 (영상)"></a>요구사항 2 - GET 방식으로 회원가입 하기 <a href="https://www.youtube.com/watch?v=ioOGE8qTa94">(영상)</a></h4><p>회원가입 메뉴를 클릭하면 <a href="http://localhost:8080/user/form.html">http://localhost:8080/user/form.html</a> 로 이동하면서 회원가입 할 수 있도록 구현하는것이 목표고 아래와 같은 형태로 입력한 값이 서버에 전달되게 해야합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user/create?userId=javajigi&amp;password=password&amp;name=JaeSung&amp;email=javajigi%40slipp.net</span><br></pre></td></tr></table></figure><p>사용자가 입력한 값을 파싱해 model.User 클래스에 저장합니다.</p><table><thead><tr><th align="left">힌트</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left"></td><td align="left">- HTTP 요청의 첫번째 라인에서 요청 URL을 추출한다.<br>- 요청 URL에서 접근 경로와 이름=값 으로 전달되는 데이터를 추출해 User 클래스에 담는다.<br>- 단위 테스트를 통해 효과적인 개발을 한다.<br>- 이름=값 파싱은 util.HttpRequestUtils 클래스의 parseQueryString() 메소드를 이용한다.<br>- 요청 URL과 QueryString을 분리한다. subString 사용</td></tr></tbody></table><p>index.html에서 회원가입 버튼을 눌러 나오는 form에 정보를 입력하고 회원가입 버튼을 누르면 정상적으로 서버에 요청되는것을 확인하였습니다. (혹시라도 html 쪽 구현도 해야하나 한번 확인을 위해)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String url = HttpRequestUtils.getUrl(line);</span><br><span class="line"><span class="keyword">if</span>(url.startsWith(<span class="string">&quot;/user/create&quot;</span>)) &#123;</span><br><span class="line">    Map&lt;String, String&gt; queryStringMap = HttpRequestUtils.parseQueryString(HttpRequestUtils.getQueryString(url));</span><br><span class="line">    User user = <span class="keyword">new</span> User(queryStringMap.get(<span class="string">&quot;userId&quot;</span>), queryStringMap.get(<span class="string">&quot;password&quot;</span>), queryStringMap.get(<span class="string">&quot;name&quot;</span>), queryStringMap.get(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="comment">// TODO User 객체 처리</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우선은 <strong>/user/create</strong>로 URL이 시작될때 URL의 뒷부분인 QueryString 값을 가져와서 parseQueryString 메소드를 이용해<br>각각의 값을 User 객체 생성자에 param값으로 넣어주었습니다.</p><p>데이터 베이스 연동 및 User객체 생성 이후의 처리는 다른 요구사항을 처리해 나가면서 어떻게 할지 고민해봐야 할거 같습니다.</p><h4 id="요구사항-3-POST-방식으로-회원가입-하기-영상"><a href="#요구사항-3-POST-방식으로-회원가입-하기-영상" class="headerlink" title="요구사항 3 - POST 방식으로 회원가입 하기 (영상)"></a>요구사항 3 - POST 방식으로 회원가입 하기 <a href="https://www.youtube.com/watch?v=q5bvPKbc_RM">(영상)</a></h4><p><a href="http://localhost:8080/user/form.html">http://localhost:8080/user/form.html</a> 파일의 from 태스 method를 get에서 post로 수정 후 정상적인 회원가입 처리</p><table><thead><tr><th align="left">힌트</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left"></td><td align="left">- POST로 데이터 전송시 데이터는 body에 담긴다.<br>- HTTP body는 헤더 이후 빈 공백을 가지는 한 줄 다음부터 시작한다.<br>- body에 들어있는 데이터는 key=value 형태를 가진다.<br>- BufferedReader에서 body 데이터는 util.IOUtils 클래스의 readData 메소드를 활용한다.<br>- body의 길이는 헤더의 Content-Length 값이다.</td></tr></tbody></table><p>우선 webapp/user/form.html 파일의 78번째 줄에 있는 form 태그의 method를 post로 변경합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 변경전 코드 : &lt;form name=&quot;question&quot; method=&quot;get&quot; action=&quot;/user/create&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;question&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/create&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그 다음 요구사항에 맞게 코드를 추가합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String url = HttpRequestUtils.getUrl(line);</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; headerMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">while</span>(!<span class="string">&quot;&quot;</span>.equals(line)) &#123;</span><br><span class="line">    line = bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">    String[] splitedHeader = line.split(<span class="string">&quot;: &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(splitedHeader.length == <span class="number">2</span>) &#123;</span><br><span class="line">        headerMap.put(splitedHeader[<span class="number">0</span>], splitedHeader[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(url.startsWith(<span class="string">&quot;/user/create&quot;</span>)) &#123;</span><br><span class="line">    String bodyData = IOUtils.readData(bufferedReader, Integer.parseInt(headerMap.get(<span class="string">&quot;Content-Length&quot;</span>)));</span><br><span class="line">    Map&lt;String, String&gt; queryStringMap = HttpRequestUtils.parseQueryString(bodyData);</span><br><span class="line">    User user = <span class="keyword">new</span> User(queryStringMap.get(<span class="string">&quot;userId&quot;</span>), queryStringMap.get(<span class="string">&quot;password&quot;</span>), queryStringMap.get(<span class="string">&quot;name&quot;</span>), queryStringMap.get(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="comment">// TODO User 객체 처리</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요구사항 1번에서 Header 데이터를 확인해보기위해 while문을 이용해 출력을 했는데, 이번엔 그 코드를 이용해 Header의 데이터를 한줄씩 불러와서 key-value형태로 Map에 저장하도록 구현하였습니다.<br>/user/create URL로 요청이 들어올때 IOUtils.readData() 메소드에 헤더정보를 가지고 있는 bufferedReader와, Content-Length 데이터를 넘겨주면 bodyData를 return 해줍니다.</p><p>여기서 readData 메소드는 <a href="https://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html#read(char[],%20int,%20int)">BufferedReader 클래스의 read 메소드</a>를 이용해 구현되었고, read 메소드가 2가지가 있는데 param값이 필요한 메소드를 사용하고 있습니다. 해당 메소드는 bufferedReader에 있는 값을 입력받은 길이만큼 잘라서 배열에 넣는 메소드 입니다.<br>Content-Length는 body 데이터의 길이를 나타내기 때문에 bufferedReader에서 body에 해당하는 부분을 Content-Length 길이만큼 자르면 body 데이터가 됩니다.  </p><p>참고로 IOUtils.readData 메소드 호출시 넘겨주는 bufferedReader는 body가 시작되는 시점이어야 합니다.<br>힌트의 두번재 쭐에 나와있는것 처럼 헤더가 모두 끝나고 한줄 이후 부터 body가 시작되기 때문에 while문에서 header를 모두 읽고나면<br>자연스레 bufferedReader는 body가 시작되는 지점이 됩니다.</p><p>처음엔 while을 돌면서 Content-Length가 포함된 라인까지만 확인하고 바로 readData를 호출했더니 정상적으로 body데이터를 가져오는 문제가 있었는데<br>위의 내용을 알지 못한채로 진행해서 발생한 문제였습니다.</p><h4 id="요구사항-4-302-status-code-적용-영상"><a href="#요구사항-4-302-status-code-적용-영상" class="headerlink" title="요구사항 4 - 302 status code 적용 (영상)"></a>요구사항 4 - 302 status code 적용 <a href="https://www.youtube.com/watch?v=vfCpgIJU2XU">(영상)</a></h4><p>현재까지 구현한 내용으로는 /user/create 요청시 따로 응답 처리를 해주지 않았으므로 페이지가 정상적으로 노출되지 않습니다.<br>회원가입을 완료하면 /index.html 페이지로 이동시켜봅시다.</p><table><thead><tr><th align="left">힌트</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left"></td><td align="left">- HTTP 응답 헤더를 200이 아니라 302 code를 사용한다.<br>- <a href="http://en.wikipedia.org/wiki/HTTP_302">http://en.wikipedia.org/wiki/HTTP_302</a> 참고</td></tr></tbody></table><p>302 코드<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>는 일시적으로 URL을 리다이렉트 되었음을 알려주는 응답코드이고, 헤더에 리다이렉트 시킬 URL을 작성하면<br>브라우저가 해당 URL로 리다이렉트 시킵니다.</p><p>프로젝트 템플릿을 열었을때 RequestHandler 클래스에 response200Header라는 메소드가 이미 구현되어 있었는데요 해당 메소드는 클라이언트에게 상태코드 200과 리스폰스 될 데이터의 길이(Content-Length)를 전달해서 정상적으로 요청이 진행되었음을 알려주도록 처리 하는 메소드 인데요.  </p><p>이번엔 200 코드 대신 302코드를 돌려줘야하니 response302Header라는 메소드를 추가로 만들고<br>/user/create로 요청이 들어왔을때 해당 메소드를 호출시켜주면 될거 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">response302Header</span><span class="params">(DataOutputStream dos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;HTTP/1.1 302 Found \r\n&quot;</span>);</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;Location: /index.html\r\n&quot;</span>);</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>힌트의 두번째 줄에 있는 링크를 참고해서 302 코드의 서버 리스폰스 값의 형태를 볼 수 있는데요 이걸 참고로 메소드를 만들었습니다. Location 값에 리다이렉트 시켜줄 URL을 넣으면 되는데요 해당 부분에 /index.html 대신 <a href="https://www.naver.com/">https://www.naver.com</a> 을 넣으면 /user/create 호출시 네이버 홈페이지로 리다이렉트 되는걸 확인하실 수 있습니다.</p><p>response302Header 메소드는 위와같의 구현하고 해당 메소드를 호출해주는 부분은 아래와 같이 구현합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(url.startsWith(<span class="string">&quot;/user/create&quot;</span>)) &#123;</span><br><span class="line">    String bodyData = IOUtils.readData(bufferedReader, Integer.parseInt(headerMap.get(<span class="string">&quot;Content-Length&quot;</span>)));</span><br><span class="line">    Map&lt;String, String&gt; queryStringMap = HttpRequestUtils.parseQueryString(bodyData);</span><br><span class="line">    User user = <span class="keyword">new</span> User(queryStringMap.get(<span class="string">&quot;userId&quot;</span>), queryStringMap.get(<span class="string">&quot;password&quot;</span>), queryStringMap.get(<span class="string">&quot;name&quot;</span>), queryStringMap.get(<span class="string">&quot;email&quot;</span>));</span><br><span class="line"></span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">    response302Header(dos);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">    <span class="keyword">byte</span>[] body = Files.readAllBytes(<span class="keyword">new</span> File(<span class="string">&quot;./webapp&quot;</span> + url).toPath());</span><br><span class="line">    response200Header(dos, body.length);</span><br><span class="line">    responseBody(dos, body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>else를 사용해서 클라이언트에 돌려줄 리스폰스 값을 다르게 설정해줄 수 있게 구현했는데요.<br>DataOutputStream이 중복으로 쓰여지는 부분도 있고, 클라이언트에 리스폰스 하는 기능을 하나의 메소드로 묶어서 처리할 수 있을거 같아서 위 코드도 리팩토링을 통해서 더 깔끔하게 구현 할 수 있을거 같습니다.</p><h4 id="요구사항-5-로그인하기-영상"><a href="#요구사항-5-로그인하기-영상" class="headerlink" title="요구사항 5 - 로그인하기 (영상)"></a>요구사항 5 - 로그인하기 <a href="https://www.youtube.com/watch?v=wWEW7aYS66A">(영상)</a></h4><p>로그인 메뉴를 클릭해서 /user/login.html으로 이동해 로그인을 시도해봅니다.<br>로그인이 성공하면 /index.html로, 실패하면 /user/login_failed.html로 이동시킵니다.  </p><p>요구사항 3번에서 진행한 회원가입된 사용자로 로그인 할 수 있게 처리해야하고, 로그인시 쿠키값에 로그인 상태를 유지하도록 한다.<br>로그인 성공시 logined=true, 로그인 실패시 logined=false를 이용한다. </p><table><thead><tr><th align="left">힌트</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left">1단계</td><td align="left">- 로그인 성공시 HTTP 응답 헤더에 Set-Cookie를 추가해 로그인 성공 여부를 전달한다.<br>- 이후 요청시 전달받은 Cookie값으로 로그인 유무를 판단한다.</td></tr><tr><td align="left">2단계</td><td align="left">- 회원가입한 데이터를 유지하기 위해 DataBase.addUser 메소드를 활용한다<br>- 아이디와 비밀번호가 같은지를 확인해서 로그인 처리를 해줍니다.</td></tr></tbody></table><p>이전에 회원가입 요구사항 처리시 TODO로 진행했던 부분을 DataBase 클래스의 addUser 메소드를 이용해 데이터를 저장하고, 로그인 URL로 요청이 들어오면 body에 들어온 id를 가지고 DataBase에 있는 데이터에서 조회 후 비밀번호가 일치하면 정상적으로 로그인되었다 처리하면 될거 같습니다.  그리고 response200Header에서 Set-Cookie 항목을 추가해서 넣어주면 이번 요구사항도 처리가 될거 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(url.equals(<span class="string">&quot;/user/login&quot;</span>)) &#123;</span><br><span class="line">    String bodyData = IOUtils.readData(bufferedReader, Integer.parseInt(headerMap.get(<span class="string">&quot;Content-Length&quot;</span>)));</span><br><span class="line">    Map&lt;String, String&gt; queryStringMap = HttpRequestUtils.parseQueryString(bodyData);</span><br><span class="line"></span><br><span class="line">    String cookie = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String redirectUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    User existUser = DataBase.findUserById(queryStringMap.get(<span class="string">&quot;userId&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(existUser == <span class="keyword">null</span> || !existUser.getPassword().equals(queryStringMap.get(<span class="string">&quot;password&quot;</span>))) &#123;</span><br><span class="line">        cookie = <span class="string">&quot;logined=false&quot;</span>;</span><br><span class="line">        redirectUrl = <span class="string">&quot;/user/login_failed.html&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cookie = <span class="string">&quot;logined=true&quot;</span>;</span><br><span class="line">        redirectUrl = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">    response302HeaderWithCookie(dos, redirectUrl, cookie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">response302HeaderWithCookie</span><span class="params">(DataOutputStream dos, String redirectUrl, String cookie)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;HTTP/1.1 302 Found \r\n&quot;</span>);</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;Location: &quot;</span> + redirectUrl + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;Set-Cookie: &quot;</span> + cookie + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        dos.writeBytes(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URL이 /user/login일때 처리를 별도로 해주기 위해서 else if로 분기 처리 하였습니다. 조건에 startWith대신 equals로 바꿨는데요 로그인페이지 호출은<br>‘/user/login.html’, 로그인 시도는 ‘/user/login’ 이어서 startWith로 처리하면 정상적으로 동작하지 않은 문제가 있어서 equals로 변경했습니다.</p><p>페이지 호출과 API 호출시에는 URL을 다르게 하던가, method 타입을 확인해서 GET 방식일땐 페이지 호출, POST 방식일땐 API 호출로 처리하는게 더 좋을거 같다는 생각입니다.</p><p>그리고 response 해줄때 책의 힌트에는 상태 코드가 200이어서 처음엔 response200HeaderWithCookie로 작업을 처리했는데요. 그러다보니 로그인 성공후 index.html로 이동시에 페이지는 변경되었으나 URL은 /user/login로 유지가 되는 상태가 발생해서 302 코드로 redirect 시켜주는 형태로 변경했습니다.<br>(강의 동영상에도 302코드로 구현되어 있습니다.)</p><p>그리고 로그인 실패시에는 /user/login_failed.html로 이동시켜야해서 response 메소드에 따로 redirect URL을 받아서 처리하게끔 구현하였습니다.</p><h4 id="요구사항-6-사용자-목록-출력-영상없음"><a href="#요구사항-6-사용자-목록-출력-영상없음" class="headerlink" title="요구사항 6 - 사용자 목록 출력 (영상없음)"></a>요구사항 6 - 사용자 목록 출력 (영상없음)</h4><p>사용자가 로그인 상태일경우 /user/list로 접근했을 때 사용자 목록을 출력한다. 로그인 하지 않은 상태면 /login.html로 이동한다.</p><table><thead><tr><th align="left">힌트</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left"></td><td align="left">- 로그인 상태 확인을 위한 Cookie 파싱은 HttpRequestUtils 클래스의 parseCookies() 메소드를 활용한다.<br>- String 값을 boolean 으로 변환하는 메소드는 Boolean.parseBoolean() 메소드를 활용한다.<br>- 자바 클래스중 StringBuilder를 활용해 사용자 목록을 출력하는 HTML을 동적으로 생성한 후 응답으로 보낸다.</td></tr></tbody></table><p>우선 URL이 /user/list일때 쿠키값을 받아와서 logined 라는 이름의 쿠키의 유/무, 있다면 false인지 true인지 확인을 해서 로그인 상태를 체크합니다.<br>로그인이 되어있는 상태면 DataBase 클래스의 findAll() 메소드를 이용해 저장된 데이터를 모두 가져오고, StringBuilder를 이용해 HTML코드를 만든뒤<br>webapp/user/list.html 파일의 유저 목록에 해당하는 부분에 append 시켜서 데이터로 넘겨주면 될거 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&quot;/user/list&quot;</span>)) &#123;</span><br><span class="line">    Map&lt;String, String&gt; cookies = HttpRequestUtils.parseCookies(headerMap.get(<span class="string">&quot;Cookie&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span>(cookies.get(<span class="string">&quot;logined&quot;</span>) == <span class="keyword">null</span> || !Boolean.parseBoolean(cookies.get(<span class="string">&quot;logined&quot;</span>))) &#123;</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">        response302Header(dos);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        Collection&lt;User&gt; userList = DataBase.findAll();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user : userList) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;&lt;th scope=\&quot;row\&quot;&gt;&quot;</span>+idx+<span class="string">&quot;&lt;/th&gt;&lt;td&gt;&quot;</span>+user.getUserId()+<span class="string">&quot;&lt;/td&gt; &lt;td&gt;&quot;</span>+user.getName()+<span class="string">&quot;&lt;/td&gt; &lt;td&gt;&quot;</span>+user.getEmail()+<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&lt;a href=\&quot;#\&quot; class=\&quot;btn btn-success\&quot; role=\&quot;button\&quot;&gt;수정&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String fileData = <span class="keyword">new</span> String(Files.readAllBytes(<span class="keyword">new</span> File(<span class="string">&quot;./webapp&quot;</span> + url).toPath()) );</span><br><span class="line">        fileData = fileData.replace(<span class="string">&quot;%user_list%&quot;</span>, URLDecoder.decode(sb.toString(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">        <span class="keyword">byte</span>[] body = fileData.getBytes();</span><br><span class="line">        response200Header(dos, body.length);</span><br><span class="line">        responseBody(dos, body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>slipp<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>슬립<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>slipp@sample.net<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>수정<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    %user_list%</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><p>webapp/user/list.html 파일에 기본적으로 2개의 샘플 유저 목록이 존재하고 있길래 그건 유지하고 그 이후에 추가하는 형태로 구현을 해보았습니다. 그래서 index값이 3부터 시작하게 설정하고, 각 유저의 데이터를 tr태그로 만들어서 StrinbBuilder에 추가하고<br>list.html에 StrinbBuilder로 만든 데이터를 추가해야 했어서 list.html에 tr태그가 들어가야할 위치에 %user_list% 문자열을 추가하고 해당 부분을 replace 해주는 식으로 구현을 했습니다. DataBase에 데이터가 들어갈때 한글과 특수문자는 encoding이 되어 들어가게 되어서 decoding 하지 않고 출력하면 한글이 깨져서 노출됩니다. 그래서 UTF-8로 decoding 해서 데이터를 만들어 주었습니다.</p><ul><li>encoding, decoding, UTF-8등 웹에서 Character Set을 다루는 방법에 대해서 좀더 정확하게 알아야할 필요가 있을거 같습니다. </li></ul><h4 id="요구사항-7-CSS-지원하기-영상"><a href="#요구사항-7-CSS-지원하기-영상" class="headerlink" title="요구사항 7 - CSS 지원하기 (영상)"></a>요구사항 7 - CSS 지원하기 <a href="https://www.youtube.com/watch?v=pQhCqu_nQjc">(영상)</a></h4><p>지금까지 프로젝트를 하면서 모든 페이지는 아래와 같이 CSS를 지원하지 않고 있었습니다.<br>이번 요구사항은 CSS를 적용해보는 것입니다.<br><img src="https://user-images.githubusercontent.com/7028715/55387949-56f1e380-556d-11e9-81e1-bb91b0b68bfd.png" alt="CSS 미적용 이미지"></p><table><thead><tr><th align="left">힌트</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left"></td><td align="left">- 응답 헤더의 Content-Type를 text/html로 보내면 브라우저는 HTML파일로 인식하기 때문에 CSS가 작동하지 않음.<br>- CSS는 Content-Type을 text/css로 보내야한다. Content-Type은 확장자를 통해 구분하거나, 요청 헤더의 Accept를 활용할 수도 있다.</td></tr></tbody></table><p>힌트에서 나와있는거 같이 Response의 Content-Type을 text/css로 바꿔서 처리해주면 되고, CSS 요청은 헤더의 Accept를 확인해보면 될거 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">    <span class="keyword">byte</span>[] body = Files.readAllBytes(<span class="keyword">new</span> File(<span class="string">&quot;./webapp&quot;</span> + url).toPath());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(headerMap.get(<span class="string">&quot;Accept&quot;</span>).contains(<span class="string">&quot;text/css&quot;</span>))&#123;</span><br><span class="line">        response200HeaderWithCss(dos, body.length);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response200Header(dos, body.length);</span><br><span class="line">    &#125;</span><br><span class="line">    responseBody(dos, body);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">response200HeaderWithCss</span><span class="params">(DataOutputStream dos, <span class="keyword">int</span> lengthOfBodyContent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dos.writeBytes(<span class="string">&quot;HTTP/1.1 200 OK \r\n&quot;</span>);</span><br><span class="line">    dos.writeBytes(<span class="string">&quot;Content-Type: text/css;charset=utf-8\r\n&quot;</span>);</span><br><span class="line">    dos.writeBytes(<span class="string">&quot;Content-Length: &quot;</span> + lengthOfBodyContent + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    dos.writeBytes(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS요청은 URL을 가지고 분기처리 하는 부분에서 else에 해당하고 responseHeader를 구성하는 메소드를 호출하는 부분에서 헤더의 Accept를 가지고와서 text/css가 존재하는지 여부를 판단해 response200HeaderWithCss() 메소드를 호출해주면 아래와 같이 정상적으로 이미지가 노출됩니다.</p><p><img src="https://user-images.githubusercontent.com/7028715/55390266-cec20d00-5571-11e9-9b8c-a88618b50552.png" alt="CSS 적용 이미지"></p><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><p>이로써 3장의 웹 서버 실습 요구사항을 모두 적용했는데요 각 요구사항을 직접 작업해보고 동영상 강의를 들으면서 부족한점을 보충 하는 식으로 진행했습니다.<br>위에 있는 코드는 아직 리팩토링 하기 전 코드라서 전체 코드로 보면 지저분하지만 리팩토링을 한번 전체적으로 해놓고 테스트 코드도 한번 추가하고, 샘플에서는 img 호출은 없었는데 img호출시에는 어떻게 처리되는지도 보아야 할거 같습니다.<br>그 외에도 진행하면서 StringBuffer, StringBuilder, Header, Status Code등 뭔지는 알고 있지만 정확하게 설명을 하거나, 자유자재로 사용하기 어려운 부분에 대해서는 따로 추가 공부를 하는 시간을 가지는게 좋을거 같습니다.<br>위에서 작업한 코드는 <a href="https://github.com/kys9261/nextstep-book-study/tree/master/web-application-server-study">여기</a>에 있습니다.</p><h3 id="Github-공부"><a href="#Github-공부" class="headerlink" title="Github 공부"></a>Github 공부</h3><ul><li><a href="http://backlogtool.com/git-guide/kr">누구나 쉽게 이해할 수 있는 Git 입문</a></li><li><a href="https://rogerdudler.github.io/git-guide/index.ko.html">Git 설치 간편 안내서</a></li><li><a href="https://www.slideshare.net/ibare/dvcs-git">Git의 commit과 push의 개념</a></li><li><a href="https://www.slideshare.net/ibare/dvcs-git">Git 심화 공부</a></li><li><a href="http://try.github.io/">Git 15분만에 배우는 실습</a></li><li><a href="https://learngitbranching.js.org/">브랜치 rebase 등을 배우는 실습</a></li><li><a href="https://opentutorials.org/course/1492">생활 코딩 Git 강좌</a></li><li><a href="http://dogfeet.github.io/articles/2012/progit.html">progit, 공짜책</a></li><li><a href="https://www.sourcetreeapp.com/">GUI 도구</a></li></ul><h3 id="Maven-공부"><a href="#Maven-공부" class="headerlink" title="Maven 공부"></a>Maven 공부</h3><ul><li><a href="https://www.slipp.net/wiki/pages/viewpage.action?pageId=10420233">메이븐 도구 학습</a></li><li><a href="https://www.youtube.com/watch?v=Eg1Ebl_KNFg">빌드 도구 설명, 메이븐 프로젝트 생성, 의존성 관리</a></li><li><a href="https://www.youtube.com/watch?v=A8h1y-qXCbU">부모 pom, 기본 디렉토리 설정, 메이븐 기본 명령어</a></li><li><a href="https://www.youtube.com/watch?v=58yiJQU0xEY">메이븐 phase, goal, 플러그인 설정 재정의</a></li><li><a href="https://www.youtube.com/watch?v=ovpVzUaQtSM">slipp 프로젝트에 메이븐 적용</a></li></ul><h3 id="로깅"><a href="#로깅" class="headerlink" title="로깅"></a>로깅</h3><p>로그레벨은 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR 순입니다. 로그 레벨이 높을수록 출력메시지가 적고, 낮을수록 더 많은 로그가 출력된다.<br>ex. 로그레벨로 TRACE로 설정하면 모든 로그레벨에 해당하는 로그가 다 출력됩니다.</p><p>일반적으로 로그를 사용할때 <code>log.debug(&quot;Debug : &quot;+ log);</code> 이런 형태로 문자열과 변수를 더해서 출력하는 형태인데 이런 코드는 불필요한 리소스를 낭비하게 합니다.(문자열을 더하는 비용은 많은 리소스를 잡아먹습니다.) SLF4J는 이런 단점을 보완하기 위해 아래의 형태로 로그를 구현할 수 있도록 메소드를 제공합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.debug(<span class="string">&quot;Debug : &#123;&#125;&quot;</span>, log);</span><br></pre></td></tr></table></figure><p>이런 형태로 사용이 가능하고 로그 레벨이 debug 보다 상위 레벨일때 debug 로그를 출력하지 않도록 처리한다.</p><p>이클립스에서는 Log4j, SLF4J 라이브러리별 템플릿을 설정해서 로그 설정하는 코드를 쉽고 빠르게 입력할 수 있게 해준다.<br>(intellij에서도 live template에 설정해 놓으면 빠르게 사용 가능할듯 합니다.)</p><ul><li><a href="https://www.youtube.com/watch?v=TcKEGh7KShI">logging framework 개념 및 기본 설정</a></li><li><a href="https://www.youtube.com/watch?v=040Y3MBNnyw">logging framework 추가 설정 및 eclipse 설정</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://multifrontgarden.tistory.com/192</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://developer.mozilla.org/ko/docs/Web/HTTP/Status/302</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3장부터 12장 까지는 하나의 프로젝트를 단계적으로 수행하는 형태로 진행됩니다.&lt;/p&gt;
&lt;p&gt;질문과 답변을 받는 웹 서비스를 구현하는게 목표이고, 이번 장 에서는 요구사항 확인, 웹 어플리케이션의 개밣 환경 구축 그리고 서버 실습 환경을 구축 해
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="nextstep" scheme="https://kys9261.github.io/tags/nextstep/"/>
    
  </entry>
  
  <entry>
    <title>자바 웹 프로그래밍 Next Step - 2. 문자열 계산기 구현을 통한 테스트와 리팩토링</title>
    <link href="https://kys9261.github.io/2019/03/26/programming/study/book-nextstep/java-web-programming-next-step-3/"/>
    <id>https://kys9261.github.io/2019/03/26/programming/study/book-nextstep/java-web-programming-next-step-3/</id>
    <published>2019-03-26T12:51:34.000Z</published>
    <updated>2020-01-18T17:06:50.940Z</updated>
    
    <content type="html"><![CDATA[<p>2장은 문자열 계산기 구현을 통한 테스트와 리팩토링 입니다.</p><p>사실 저는 부끄럽게도 단한번도 테스트 코드를 작성해본적이 없는데요.<br>프로그래밍을 하면서 테스트는 했겠지만 테스트 코드를 이용해서가 아닌 IDE의 디버깅 툴과, 결과값 출력을 확인하는 방식으로 진행해 왔는데 최근 들어서는 테스트 코드를 작성하면서 개발하는게 실수로 인해 서비스에 문제가 발생하거나, 다른 예외 상황에 대해 생각해 볼 수 있게끔 해주는거 같아서 필요성을 느끼고는 있었으나 실제로 업무에 적용하지는 못하고 있었는데 이 책을 공부하면서 테스트 코드 작성에 익숙해지고 실무에서도 자유롭게 사용할 수 있게끔 되었으면 좋겠습니다.</p><h3 id="junit-기본-사용법"><a href="#junit-기본-사용법" class="headerlink" title="junit 기본 사용법"></a>junit 기본 사용법</h3><p>시작하기전에 junit4에 대한 사용법을 익혀봅니다, 책에 있는 링크는 Youtube가 변경되어서 그런가 정상적으로 영상이 안나와서 <a href="https://youtu.be/tyZMdwT3rlY">여기</a>에서 보면 정상적으로 영상을 확인 가능하고요.<br>영상에는 책에서 간단하게 소개하는 junit4에 대해서 다루고 있습니다.  </p><p>책에서 간단하게 소개되는 junit annotation은</p><ul><li>@Test      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 단위 테스트를 정의함</li><li>@Before    &nbsp;- 각 단위테스트 실행 전 실행되는 함수를 정의함 (@Test가 붙은 각각의 함수가 실행되기전 실행됨)</li><li>@After     &nbsp;&nbsp;&nbsp;&nbsp;- 각 단위테스트 실행 후 실행되는 함수를 정의함 (@Test가 붙은 각각의 함수가 실행되고 나서  실행됨)</li></ul><p>이정도 이고, 함수는</p><ul><li>assertEquals() - 값이 같은지 확인</li><li>assertTrue()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 값이 true인지 확인</li><li>assertFalse()&nbsp;&nbsp;&nbsp;&nbsp;- 값이 false인지 확인</li><li>assertNull()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 값이 null인지 확인</li></ul><p>이정도 인데 이거 외에도 다른 annotation과 함수들이 있으므로 다음번에 따로 포스팅 하기로 하겠습니다.<br>&nbsp;</p><h3 id="문자열-계산기-요구사항"><a href="#문자열-계산기-요구사항" class="headerlink" title="문자열 계산기 요구사항"></a>문자열 계산기 요구사항</h3><p>문자열 계산기를 구현하기 앞서 무선 요구사항을 먼저 확인해보겠습니다.</p><ul><li>쉼표 또는 콜론을 구분자로 가지는 문자열을 전달하는 경우 구분자로 분리한 각 숫자의 합을 반환</li><li>1번의 쉼표 또는 콜론외에 커스텀 구분자를 지정할수 있고, ‘//‘와 ‘\n’사이의 문자를 커스텀 구분자로 사용</li><li>숫자 값이 음수일때 RuntimeException 처리 해야함</li></ul><p>구현전 요구사항을 더 작은 단위로 나눠 테스트할 경우의 수를 생각해보는게 좋다고 하는데요<br>어떤 테스트케이스를 생각해보는게 좋을까 생각해보다가 아래와 같은 테스트 케이스를 생각해보습니다.<br>(더 작은단위로 쪼개라는게 <strong>더 디테일하게 테스트 케이스를 생각해보자</strong> 라고 받아들였습니다.)</p><ul><li>쉼표 또는 콜론 외에 다른 구분자가 들어올 때 (커스텀구분자로 정의 하지 않은 상태에서)</li><li>커스텀 구분자로 정의 했으나 각숫자를 다른 구분자로 구분했을 때</li><li>숫자와 구분자 외에 다른 문자가 포함되어있을 때 (숫자 앞,뒤에 공백이 들어가는 경우도 포함)</li></ul><p>위와 같은 테스트 케이스를 생각했고, 요구사항에 맞춰 개발하고 리팩토링 하면서 테스트 케이스를 하나씩 추가해보도록 하겠습니다.</p><p>그리고 코드를 작성하고, 리팩토링을 할때 아래의 기준에 맞춰서 개발하는게 일정수준으로 깔끔한 코드를 구현할 수 있다고 하고,<br>완벽하게 기준에 맞춰서 구현할 수 는 없지만 최대한 노력하면서 구현하는게 좋다고 합니다.</p><ul><li>메소드가 한 가지 책임만 가지도록 구현한다.</li><li>들여쓰기 깊이를 1단계로 유지한다. (중첩문 사용을 지양하자 라는 뜻)</li><li>else를 사용하지 말아라.</li></ul><p>위에 나와있는 요구사항과 생각해본 테스트 케이스를 토대로 단위테스트 코드를 작성해 보았습니다.<br>(책에 나와있는 테스트 코드외에 몇개를 더 추가했는데, 혹시라도 더 추가하면 좋을만한게 있으면 코멘트 달아주세요!)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCalculatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringCalculator stringCalculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringCalculator = <span class="keyword">new</span> StringCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 입력된 문자열값이 빈 문자열 일때</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramStringEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">0</span>, stringCalculator.add(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 입력된 문자열값이 null일때</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramStringNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">0</span>, stringCalculator.add(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 쉼표 또는 콜론으로 구분자를 가진 문자열 계산</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">6</span>, stringCalculator.add(<span class="string">&quot;1,2,3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커스텀 구분자를 가진 문자열 계산</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sumCustomSeparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">6</span>, stringCalculator.add(<span class="string">&quot;//;\n1;2;3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 문자열에 음수값이 있을때</span></span><br><span class="line">    <span class="meta">@Test(expected = RuntimeException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramStringNegative</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">        stringCalculator.add(<span class="string">&quot;1,-1,3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 커스텀 구분자를 정하지 않고, 쉼표 또는 콜론 구분자가 아닐때</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramInvalidSeparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">0</span>, stringCalculator.add(<span class="string">&quot;1/2/3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 입력된 문자열에 숫자 앞뒤 공백이 있을때</span></span><br><span class="line">    <span class="meta">@Test(expected = NumberFormatException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramWhiteSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringCalculator.add(<span class="string">&quot;1, 2,3 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 입력된 문자열에 숫자 앞뒤 공백이 있을때</span></span><br><span class="line">    <span class="meta">@Test(expected = NumberFormatException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramWhiteSpace2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringCalculator.add(<span class="string">&quot;//;\n1 ; 2; 3 ;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>맨 아래 paramWithSpace는 문자열에 공백이 있을 경우 trim()을 이용해 공백 제거 후 처리를 해도 되지만<br>NumberFormatException 이 발생하는 것으로 개발을 했고,<br>테스트 할때 아래 코드처럼 input값을 2개 종류로 확인하고 싶었으나 가장 위에서 실행된 케이스만 실행되고 종료되었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 입력된 문자열에 숫자 앞뒤 공백이 있을때</span></span><br><span class="line"><span class="meta">@Test(expected = NumberFormatException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramWhiteSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringCalculator.add(<span class="string">&quot;1, 2,3 &quot;</span>);             <span class="comment">// 이 코드만 실행 되고 테스트 종료됨</span></span><br><span class="line">    stringCalculator.add(<span class="string">&quot;//;\n1 ; 2; 3 ;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그래서 따로 분리를 해놨는데 한개의 테스트 케이스 함수내에서 여러개의 조건을 실행하는 방법에 대해 확인을 해봐야 할거 같습니다.</p><p>그럼 이번에는 요구사항에 맞는 동작을 수행하고, 모든 테스트 케이스를 통과하는 코드를 작성해보겠습니다.<br>아래 코드는 위 작성된 테스트 케이스를 모두 pass하는 코드이나 리팩토링을 하기 전 상태입니다.<br>책에서는 리팩토링과 테스트 케이스 작성이 동시에 진행이 되었는데 요구사항을 더 작은 단위로 나눠서 테스트할 경우의 수를 생각하다보니 테스트 케이스를 먼저 작성하고 실행 코드를 개발하게 되었습니다.<br>(테스트코드를 이용한 개발 경험이 부족해 원래 이렇게 진행되는게 맞는건진 잘 모르겠습니다)</p><p>아래는 구현된 add 함수 입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 빈 문자열 확인</span></span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span> || text.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 문자에 구분자 확인</span></span><br><span class="line">        String[] splitTextArr = <span class="keyword">null</span>;</span><br><span class="line">        Matcher m = Pattern.compile(<span class="string">&quot;//(.)\n(.*)&quot;</span>).matcher(text);</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            splitTextArr = m.group(<span class="number">2</span>).split(m.group(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(text.contains(<span class="string">&quot;,&quot;</span>) || text.contains(<span class="string">&quot;:&quot;</span>)) &#123;</span><br><span class="line">            splitTextArr = text.split(<span class="string">&quot;,|:&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 구분자 조건에 만족하지 않음</span></span><br><span class="line">        <span class="keyword">if</span> (splitTextArr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 배열에서 숫자 변환후 합산</span></span><br><span class="line">        <span class="keyword">int</span> addNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;splitTextArr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 음수값 확인</span></span><br><span class="line">            <span class="keyword">if</span> (Integer.valueOf(splitTextArr[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addNumber += Integer.valueOf(splitTextArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> addNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>부분적으로 주석을 간단하게 적어 두었는데요.<br>주석들을 기준으로 add함수 1개에서 여러개의 함수로 나뉘어지면서 리팩토링 할 예정입니다.<br>그리고 책에서도 심하다 싶을정도로 리팩토링을 한 이유는 리팩토링을 하는 연습을 하기 위함이라고 합니다.<br>&nbsp;  </p><p>리팩토링 진행하면서 생각해본 내용을 적어보자면  </p><ol><li>StringUtils의 사용</li></ol><p>아래 코드는 문자열 text가 주어지면 null 이거나 “” 일때 0을 리턴하게 되어있는데요.<br>if문에서 조건을 commons-lang라이브러리의 StringUtils클래스에 있는 <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html#isEmpty-java.lang.CharSequence-">isEmpty</a> 함수를 이용해서 처리해도 될거 같다는 생각을 했습니다.</p><p>다만 라이브러리를 따로 추가해줘야해서 여기서는 사용하지는 않았습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 빈 문자열 확인</span></span><br><span class="line"><span class="keyword">if</span> (text == <span class="keyword">null</span> || text.isEmpty()) &#123;   <span class="comment">// if (StringUtils.isEmpty(text)) 동일한 동작</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Exception 처리</li></ol><p>음수를 식별하는 함수는 아래와 같이 구현했습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">checkNegative</span><span class="params">(String numberText)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = Integer.parseInt(numberText);</span><br><span class="line">    <span class="keyword">if</span>(number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>구분자로 나눈 문자열 배열에서 한개씩 param값으로 넘겨서 int 형변환을 시켜주고 음수 판단을 처리하는 부분인데요.<br>음수일때 RuntimeException을 발생하게 구현했습니다. 여기까지는 별로 고민할 부분이 없었는데요  </p><p>테스트 케이스 코드중에 문자열에 공백이 포함되어 있는 값이 들어올때 NumberFormatException 이 발생하는걸로 테스트 케이스를 작성했는데 위에 Integer.parseInt() 호출시에 numberText가 ‘ 1’, ‘2 ‘, ‘ 3 ‘이런식으로 앞뒤 어느 한군데라도 공백을 포함하고 있으면 Exception이 발생을 합니다.<br>음수 처리하는것 처럼 따로 Exception 발생 코드를 추가하지 않아도 말이죠.  </p><p>위 내용의 경우엔 요구사항에 없는 내용이라 어떻게 구현하던 상관은 없을거 같습니다만 그래도 try-catch를 통해서 예외처리를 하거나, 아예 param값으로 받은 numberText를 trim함수를 이용해 공백제거를 하는 식으로 구현을 해도 되었을거 같다는 생각을 했습니다. 공부용으로는 Exception을 발생하고 프로그램이 죽어도 괜찮겠지만, 실제 서비스에서는 Exception 발생 가능성이 있는 부분엔 예외처리를 통해서 프로그램이 끝까지 실행되게끔 처리하는게 좋다고 생각을 합니다.(<del>생각은 이렇게 하지만 업무에서 예외처리를 자주 빼먹는게 함정 입니다만</del>)</p><p>테스트 코드를 작성하고, 동작코드를 리팩토링 하면서 나온 코드는 아래와 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 빈 문자열 확인</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty(text)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 문자에 구분자 확인</span></span><br><span class="line">        String[] splitTextArr = textSeparate(text);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 구분자 조건에 만족하지 않음</span></span><br><span class="line">        <span class="keyword">if</span> (splitTextArr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 배열에서 숫자 변환후 합산</span></span><br><span class="line">        <span class="keyword">return</span> sum(parseToInt(textSeparate(text)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span> || text.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] textSeparate(String text) &#123;</span><br><span class="line">        String[] speratedArr = <span class="keyword">null</span>;</span><br><span class="line">        Matcher m = Pattern.compile(<span class="string">&quot;//(.)\n(.*)&quot;</span>).matcher(text);</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            speratedArr = m.group(<span class="number">2</span>).split(m.group(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(text.contains(<span class="string">&quot;,&quot;</span>) || text.contains(<span class="string">&quot;:&quot;</span>)) &#123;</span><br><span class="line">            speratedArr = text.split(<span class="string">&quot;,|:&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> speratedArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parseToInt(String[] textSeparatedArr) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] numberArr = <span class="keyword">new</span> <span class="keyword">int</span>[textSeparatedArr.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;textSeparatedArr.length; i++) &#123;</span><br><span class="line">            numberArr[i] = checkNegative(textSeparatedArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> numberArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">checkNegative</span><span class="params">(String numberText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = Integer.parseInt(numberText);</span><br><span class="line">        <span class="keyword">if</span>(number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers.length; i++) &#123;</span><br><span class="line">            sum += numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>챕터 2에 있는 내용을 제 스타일대로 조금 변형해서 공부하면서 기록 해보았습니다.<br>혹시라도 추가적으로 리팩토링을 했으면 좋겠다, 혹은 이런것도 생각해보면 좋겠다 하는게 있으면 언제든 댓글 달아주세요<br>저는 피드백에 항상 목이 말라있습니다.</p><p>위에서 사용한 코드는 <a href="https://github.com/kys9261/nextstep-book-study/tree/master/nextstep-2-stringcalculator">여기</a>에 있습니다.<br>&nbsp; </p><p><strong>추가학습자료</strong></p><ul><li><a href="https://goo.gl/2ny56W">테스트 주도 개발 : 고품질 쾌속개발을 위한 TDD 실천법과 도구 1장 공개자료</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7443642">테스트 주도개발 / 2014년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7047630">리팩토링 : 코드 품질을 개선하는 객체지향 사고법 / 2012년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=6053135">손에 잡히는 정규 표현식 / 2009년</a></li><li>정규표현식 연습 : <a href="http://regexr.com/">http://regexr.com</a></li><li><a href="https://www.youtube.com/watch?v=08YYZ0acYNE">문자열 계산기 구현 및 리팩토링 1단계</a></li><li><a href="https://www.youtube.com/watch?v=AAMap-pXXN4">문자열 계산기 구현 및 리팩토링 2단계</a></li><li><a href="https://www.youtube.com/watch?v=weE5PVX9D60">문자열 계산기 구현 및 리팩토링 3단계</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2장은 문자열 계산기 구현을 통한 테스트와 리팩토링 입니다.&lt;/p&gt;
&lt;p&gt;사실 저는 부끄럽게도 단한번도 테스트 코드를 작성해본적이 없는데요.&lt;br&gt;프로그래밍을 하면서 테스트는 했겠지만 테스트 코드를 이용해서가 아닌 IDE의 디버깅 툴과, 결과값 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="nextstep" scheme="https://kys9261.github.io/tags/nextstep/"/>
    
  </entry>
  
  <entry>
    <title>해커랭크 코딩테스트 main함수 돌아보기</title>
    <link href="https://kys9261.github.io/2019/03/21/programming/algorithm/codingTest/hackerrank-codingtest-input/"/>
    <id>https://kys9261.github.io/2019/03/21/programming/algorithm/codingTest/hackerrank-codingtest-input/</id>
    <published>2019-03-21T04:38:21.000Z</published>
    <updated>2020-01-18T17:06:50.938Z</updated>
    
    <content type="html"><![CDATA[<p>HackkerRank에서 알고리즘 테스트를 풀다보면 아래와 같은 기본 코드를 제공을 해줍니다.<br>다른 알고리즘 사이트(Codlity, Algospot 등등) 에서는 대부분 main함수 또는 구현할 함수만 선언해주는게 전부인거 같더라고요.</p><p>main 함수를 보아하니 테스트 케이스 입력과 결과 출력을 자동으로 처리해주기 위해서 제공을 해주는것 같은데<br>항상 문제풀때 main 함수는 잘 안보고 넘어가서 이번에 한번 어떻게 구현되어있나 한번 봐볼까 합니다.</p><p>참고로 문제마다 main함수의 구현내용이 input값에 따라 조금씩 다릅니다.<br>하지만 기본적으로 Scanner로 입력받고 BufferedWriter로 출력하는건 같은듯</p><h3 id="Jumping-on-the-Clouds"><a href="#Jumping-on-the-Clouds" class="headerlink" title="Jumping on the Clouds"></a>Jumping on the Clouds</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Complete the jumpingOnClouds function below.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jumpingOnClouds</span><span class="params">(<span class="keyword">int</span>[] c)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 결과값 출력을 위한 BufferedWriter를 생성해서 사용한다</span></span><br><span class="line">        <span class="comment">// OUTPUT_PATH에 결과값이 파일로 저장되고 그 파일로 정답 체크를 하는거 같음</span></span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(System.getenv(<span class="string">&quot;OUTPUT_PATH&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 입력값 샘플은 아래와 같다</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 7</span></span><br><span class="line"><span class="comment">        * 0 0 1 0 0 1 0</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 첫번재 값을 읽어들인다</span></span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">        * scanner.skip은 매개변수 값으로 패턴을 받는데 해당 패턴과 일치하는 값을 읽어들이면 해당 값은 Skip한다.</span></span><br><span class="line"><span class="comment">        * https://www.tutorialspoint.com/java/util/scanner_skip_pattern.htm</span></span><br><span class="line"><span class="comment">        * 줄바꿈이나 기타 불필요한 문자가 들어오면 skip 처리 하게끔 하려는 의도 같다.</span></span><br><span class="line"><span class="comment">        * (다음줄 받을때 scanner.nextLine() 대신 사용하는듯)</span></span><br><span class="line"><span class="comment">        * 상세한 설명은 https://stackoverflow.com/a/52111364</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        scanner.skip(<span class="string">&quot;(\r\n|[\n\r\u2028\u2029\u0085])?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// n크기의 int 배열을 만든다</span></span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 다음줄을 받아와 공백으로 잘라 배열에 넣는다.</span></span><br><span class="line">        String[] cItems = scanner.nextLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//위의 skip함수와 동일</span></span><br><span class="line">        scanner.skip(<span class="string">&quot;(\r\n|[\n\r\u2028\u2029\u0085])?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cItem은 String 배열이므로 다시 int형 배열로 변환(?) 한다.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cItem = Integer.parseInt(cItems[i]);</span><br><span class="line">            c[i] = cItem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 구현할 함수의 매개변수로 배열을 넘겨주고 return 받은 값을 저장한다.</span></span><br><span class="line">        <span class="keyword">int</span> result = jumpingOnClouds(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// result값을 String으로 변환후 bufferedWriter 쓰고</span></span><br><span class="line">        bufferedWriter.write(String.valueOf(result));</span><br><span class="line">        <span class="comment">// 줄바꿈 처리하고 --&gt; int값 1개만 버퍼에 넣는다면 줄바꿈 처리를 안해도 되지 않을까? (제거하고 실행했을때도 결과 차이는 없음)</span></span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        <span class="comment">// 버퍼를 닫는다</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scanner.skip을 이용해서 줄바꿈 부분을 처리하는 부분은 처음봤는데요.<br>대부분 scanner.nextLine()으로 처리하는거 같은데 줄바꿈 외에도 다른 input값에 대한 처리를 완벽하게 해주기 위함인가 싶기도 합니다.  </p><ul><li><a href="https://docs.oracle.com/javase/7/docs/api/java/io/BufferedWriter.html">BufferedWriter</a></li><li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html">Scanner</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HackkerRank에서 알고리즘 테스트를 풀다보면 아래와 같은 기본 코드를 제공을 해줍니다.&lt;br&gt;다른 알고리즘 사이트(Codlity, Algospot 등등) 에서는 대부분 main함수 또는 구현할 함수만 선언해주는게 전부인거 같더라고요.&lt;/p
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Algorithm" scheme="https://kys9261.github.io/categories/Programming/Algorithm/"/>
    
    
      <category term="코딩테스트" scheme="https://kys9261.github.io/tags/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
      <category term="hackerrank" scheme="https://kys9261.github.io/tags/hackerrank/"/>
    
      <category term="main" scheme="https://kys9261.github.io/tags/main/"/>
    
  </entry>
  
  <entry>
    <title>자바 웹 프로그래밍 Next Step - 두 번째 양파 껍질 벗기기</title>
    <link href="https://kys9261.github.io/2019/03/20/programming/study/book-nextstep/java-web-programming-next-step-2/"/>
    <id>https://kys9261.github.io/2019/03/20/programming/study/book-nextstep/java-web-programming-next-step-2/</id>
    <published>2019-03-20T06:53:25.000Z</published>
    <updated>2020-01-18T17:06:50.940Z</updated>
    
    <content type="html"><![CDATA[<p>이번 챕터(?)엔 본격적으로 프로그래밍을 학습하기 위해 앞으로의 학습목표에 대해 간단하게 프리뷰한다.<br>책에서도 몇장 안된다</p><p>두 번째 양파 껍질은 최소 1년 이상의 현장경험 (웹 개발 경험)이 있어야 학습 효과가 뛰어나다고 합니다.<br>이번 장에서는 아래의 내용을 학습합니다.</p><ul><li>좀 더 깔끔한 코드를 구현하는 방법과 관례에 대해 배우고, 객체지향 및 리팩토링 경험을 해봅니다.</li><li>빌드, 배포, 운영에 대한 경험을 합니다.</li><li>웹 어플리케이션을 지탱하는 기술, 보안, 성능에 대해 고민해봅니다.</li></ul><p>추천 도서</p><ul><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8064518">이펙티브 자바 2판 / 2014년</a> - 최근 3판이 나왔습니다.</li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8199825">성공으로 이끄는 팀 개발 실천 기술 / 2014년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8657832">그림으로 배우는 HTTP &amp; Network Basic / 2015년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=9252940">그림으로 공부하는 IT 인프라 구조 / 2015년</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이번 챕터(?)엔 본격적으로 프로그래밍을 학습하기 위해 앞으로의 학습목표에 대해 간단하게 프리뷰한다.&lt;br&gt;책에서도 몇장 안된다&lt;/p&gt;
&lt;p&gt;두 번째 양파 껍질은 최소 1년 이상의 현장경험 (웹 개발 경험)이 있어야 학습 효과가 뛰어나다고 합니다
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="nextstep" scheme="https://kys9261.github.io/tags/nextstep/"/>
    
  </entry>
  
  <entry>
    <title>codingTest-Practise</title>
    <link href="https://kys9261.github.io/2019/03/15/programming/algorithm/codingTest/codingTest-Practise/"/>
    <id>https://kys9261.github.io/2019/03/15/programming/algorithm/codingTest/codingTest-Practise/</id>
    <published>2019-03-15T10:25:58.000Z</published>
    <updated>2020-01-18T17:06:50.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="코딩-테스트-연습"><a href="#코딩-테스트-연습" class="headerlink" title="코딩 테스트 연습"></a><a href="https://github.com/kys9261/codingTest-practise">코딩 테스트 연습</a></h1><h3 id="Hackerrank"><a href="#Hackerrank" class="headerlink" title="Hackerrank"></a><a href="https://www.hackerrank.com/">Hackerrank</a></h3><h4 id="Interview-Preparation-Kit-gt-Warm-up-Challenges"><a href="#Interview-Preparation-Kit-gt-Warm-up-Challenges" class="headerlink" title="Interview Preparation Kit &gt; Warm-up Challenges"></a>Interview Preparation Kit &gt; Warm-up Challenges</h4><ul><li><a href="https://github.com/kys9261/daily-codingTest-practice/blob/master/hackerrank/interview-preparation-kit/warm-up%20challenges/sock-merchant.md">Sock Merchant</a></li><li><a href="https://github.com/kys9261/daily-codingTest-practice/blob/master/hackerrank/interview-preparation-kit/warm-up%20challenges/counting-valleys.md">Counting Valleys</a></li><li><a href="https://github.com/kys9261/daily-codingTest-practice/blob/master/hackerrank/interview-preparation-kit/warm-up%20challenges/jumping-on-the-clouds.md">Jumping on the Clouds</a></li><li><a href="https://github.com/kys9261/daily-codingTest-practice/blob/master/hackerrank/interview-preparation-kit/warm-up%20challenges/repeated-string.md">Repeated String</a></li></ul><h4 id="Interview-Preparation-Kit-gt-Arrays"><a href="#Interview-Preparation-Kit-gt-Arrays" class="headerlink" title="Interview Preparation Kit &gt; Arrays"></a>Interview Preparation Kit &gt; Arrays</h4><ul><li><a href="https://github.com/kys9261/daily-codingTest-practice/blob/master/hackerrank/interview-preparation-kit/arrays/2dArray-ds.md">2D Array - DS</a></li><li><a href="https://github.com/kys9261/daily-codingTest-practice/blob/master/hackerrank/interview-preparation-kit/arrays/arrays-left-rotation.md">Arrays: Left Rotation</a></li><li><a href="https://github.com/kys9261/daily-codingTest-practice/blob/master/hackerrank/interview-preparation-kit/arrays/new-year-chaos.md">New Year Chaos</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;코딩-테스트-연습&quot;&gt;&lt;a href=&quot;#코딩-테스트-연습&quot; class=&quot;headerlink&quot; title=&quot;코딩 테스트 연습&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/kys9261/codingTest-practise&quot;&gt;코딩
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Algorithm" scheme="https://kys9261.github.io/categories/Programming/Algorithm/"/>
    
    
      <category term="코딩테스트" scheme="https://kys9261.github.io/tags/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
      <category term="PS" scheme="https://kys9261.github.io/tags/PS/"/>
    
      <category term="알고리즘" scheme="https://kys9261.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>자바 웹 프로그래밍 Next Step - 1. 첫 번째 양파 껍질 벗기기</title>
    <link href="https://kys9261.github.io/2019/03/14/programming/study/book-nextstep/java-web-programming-next-step-1/"/>
    <id>https://kys9261.github.io/2019/03/14/programming/study/book-nextstep/java-web-programming-next-step-1/</id>
    <published>2019-03-14T14:41:12.000Z</published>
    <updated>2020-01-18T17:06:50.940Z</updated>
    
    <content type="html"><![CDATA[<p>1장 에서는 프로그래밍을 처음해보는 분들을 위한 가이드 라고 할 수 있을거 같다.</p><p>프론트엔드 개발자, 백엔드 개발자, 모바일 개발자등 직군에 대한 간략한 소개와<br>개발자가 알아두면 좋을 사이트들 (<a href="https://stackoverflow.com/">stackoverflow</a>같은)에 대한 소개 등에 대한 내용이라서</p><p>프로그래밍 경험이 있는 사람은 2장 으로 넘어가도 된다고 쓰여있다.</p><p><strong>1.5.2 책을 통한 학습</strong><br>개발을 공부하면서 참고하면 좋을 책을 몇가지 추천해주셨는데 제대로 읽어본책이 한권도 없는거 같아서 적어 놓고 나중에 이 책들도 공부를 하면 도움이 될거 같다.<br>(책 이름 옆에 출판년도를 참고용으로 적어두었다, 핵심 내용은 오래되어도 변하지 않지만 최신 내용 반영이 안되어있다는건 참고하자.)</p><ul><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=6876538">프로가 되기 위한 웹 기술 입문 / 2012년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8890588">자바스크립트 &amp; 제이쿼리 / 2015년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=6416286">웹 표준 가이드 / 2010년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=8142241">자바스크립트를 말하다 / 2014년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=1946431">자바 프로그래밍 / 2005년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7623127">열혈강의 자바 웹 개발 워크북 / 2014년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=9738902">SQL 첫걸음 / 2015년</a></li></ul><p><strong>1.6 학습 방법</strong></p><ol><li>필요한 부분부터 흡수한다.</li><li>대략적인 부분을 잡아서 조금씩 상세화 한다.</li><li>끝에서부터 차례대로 베껴간다.</li></ol><p>기타 추천 책</p><ul><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7317474">코딩을 지탱하는 기술 / 2013년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7046432">습관의 힘 / 2012년</a></li><li><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=2086588">이너 게임 / 2006년</a></li><li>[몰입의 즐거움 / 2010년](<a href="https://book.naver.com/bookdb/book_detail.nhn?bid=34057">https://book.naver.com/bookdb/book_detail.nhn?bid=34057</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1장 에서는 프로그래밍을 처음해보는 분들을 위한 가이드 라고 할 수 있을거 같다.&lt;/p&gt;
&lt;p&gt;프론트엔드 개발자, 백엔드 개발자, 모바일 개발자등 직군에 대한 간략한 소개와&lt;br&gt;개발자가 알아두면 좋을 사이트들 (&lt;a href=&quot;https://s
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="nextstep" scheme="https://kys9261.github.io/tags/nextstep/"/>
    
  </entry>
  
  <entry>
    <title>자바 웹 프로그래밍 Next Step - 0. 공부 시작</title>
    <link href="https://kys9261.github.io/2019/03/13/programming/study/book-nextstep/java-web-programming-next-step-0/"/>
    <id>https://kys9261.github.io/2019/03/13/programming/study/book-nextstep/java-web-programming-next-step-0/</id>
    <published>2019-03-13T13:56:57.000Z</published>
    <updated>2020-03-14T14:52:22.232Z</updated>
    
    <content type="html"><![CDATA[<p>얼마전 자바지기로 유명하신 박재성님 께서 진행 하신다는 <a href="https://edu.nextstep.camp/c/8fWRxNWU/">NextStep</a>이라는 강의를 알게 되었습니다.</p><p>커리큘럼을 보았을때 저에게 부족한 부분을 채울 수 있고, 온라인 코드 리뷰도 진행해서 회사를 다니면서 정말 간절하게 배우고 경험하고 싶었던 내용이라고 생각이 되었습니다.<br>그래서 무조건 신청해야겠다고 생각했는데 정작 수강신청날 카드결제가 잘 안되어서<br>(제 실수 입니다ㅠㅠ) 수강신청에 실패했습니다. 거의 2분만에 수강신청도 마감되는거 같더군요… ㅠㅠ</p><p>그래서 다음번 5기에는 꼭 해야겠다고 다짐하면서 혹시 NextStep을 이전에 들었던분들의 후기?<br>같은걸 듣고싶어서 찾아보다가 우연하게 박재성님이 쓰신 책을 발견했습니다.</p><p><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=11037465"><img src="https://bookthumb-phinf.pstatic.net/cover/110/374/11037465.jpg?type=m140&udate=20190204" alt="자바 웹 프로그래밍 Next Step (하나씩 벗겨가는 양파껍질 학습법)"></a></p><p>책 제목도 Next Step 이었고 내용을 간단하게 보니 제가 공부해야겠다고 생각했던 내용들 투성이었고,<br>강의 커리큘럼의 일부분도 포함되어있는거 같아서 다음번 강의 전까지 예습한다 생각하고<br>이 책을 읽어보자 라고 마음을 먹게 되었습니다.</p><p>앞으로 책을 읽으면서 알아야할 내용이나 필요한 내용을 간략하게 정리해둘 예정입니다.</p><p>그리고 얼마전 Next Step 강의의 온라인 리뷰를 하는 <a href="https://github.com/next-step/java-racingcar">Github 레파지토리</a>를 발견했는데요<br>학생들이 올린 내용에 코멘트를 달리고 피드백을 주시는게 너무 부러워 보이면서도<br>해당 피드백을 보면서 과제 내용을 정확하게 파악할 수 는 없지만<br>“나는 저런 피드백을 받았을때 어떻게 처리할까?”, “저 피드백의 내용은 공부를 해봐야겠다” 라는 생각이 들어서 해당 내용들도 짬짬히 공부해볼 생각입니다.  </p><p>&nbsp;&nbsp;<br><strong>2019-03-22 업데이트</strong></p><p>박재성님께서 책에 대한 내용을 정리하신 <a href="https://github.com/slipp/jwp-book">github 레파지토리</a>를 발견했습니다.<br>사실 정리라기 보다는 거의 책을 출판하기전에 쓰신거 마냥 책이랑 내용은 거의 동일합니다.  </p><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><h2 id="1장-첫-번째-양파-껍질-벗기기"><a href="#1장-첫-번째-양파-껍질-벗기기" class="headerlink" title="1장. 첫 번째 양파 껍질 벗기기"></a><a href="https://kys9261.github.io/2019/03/14/java-web-programming-next-step-1/">1장. 첫 번째 양파 껍질 벗기기</a></h2><p>1.1 대한민국 IT 개발자 직군의 종류<br>1.2 개발자들에게 유용한 웹사이트들<br>1.3 처음에 배워야 하는 것들<br>1.4 일단 시작해 보자<br>1.5 본격적으로 웹 프로그래밍에 도전하기<br>1.6 학습 방법<br>&nbsp;</p><h2 id="두번째-양파-껍질-벗기기"><a href="#두번째-양파-껍질-벗기기" class="headerlink" title="두번째 양파 껍질 벗기기"></a><a href="https://kys9261.github.io/2019/03/20/java-web-programming-next-step-2/">두번째 양파 껍질 벗기기</a></h2><h2 id="2장-문자열-계산기-구현을-통한-테스트와-리팩토링"><a href="#2장-문자열-계산기-구현을-통한-테스트와-리팩토링" class="headerlink" title="2장 문자열 계산기 구현을 통한 테스트와 리팩토링"></a><a href="https://kys9261.github.io/2019/03/20/java-web-programming-next-step-3/">2장 문자열 계산기 구현을 통한 테스트와 리팩토링</a></h2><p>2.1 main() 메소드를 활용한 테스트의 문제점<br>2.2 JUnit을 활용해 main() 메소드 문제점 극복<br>2.3 문자열 계산기 요구사항 및 실습<br>2.4 테스트와 리팩토링을 통한 문자열 계산기 구현<br>2.5 추가 학습 자료<br>&nbsp;</p><h2 id="3장-개발-환경-구축-및-웹-서버-실습-요구사항"><a href="#3장-개발-환경-구축-및-웹-서버-실습-요구사항" class="headerlink" title="3장 개발 환경 구축 및 웹 서버 실습 요구사항"></a>3장 개발 환경 구축 및 웹 서버 실습 요구사항</h2><p>3.1 서비스 요구사항<br>3.2 로컬 개발 환경 구축<br>3.3 원격 서버에 배포<br>3.4 웹 서버 실습<br>3.5 추가 학습 자료<br>&nbsp;</p><h2 id="4장-HTTP-웹-서버-구현을-통해-HTTP-이해하기"><a href="#4장-HTTP-웹-서버-구현을-통해-HTTP-이해하기" class="headerlink" title="4장 HTTP 웹 서버 구현을 통해 HTTP 이해하기"></a>4장 HTTP 웹 서버 구현을 통해 HTTP 이해하기</h2><p>4.1 동영상을 활용한 HTTP 웹 서버 실습<br>4.2 HTTP 웹 서버 구현<br>4.3 추가 학습 자료<br>&nbsp;</p><h2 id="5장-웹-서버-리팩토링-서블릿-컨테이너와-서블릿의-관계"><a href="#5장-웹-서버-리팩토링-서블릿-컨테이너와-서블릿의-관계" class="headerlink" title="5장 웹 서버 리팩토링, 서블릿 컨테이너와 서블릿의 관계"></a>5장 웹 서버 리팩토링, 서블릿 컨테이너와 서블릿의 관계</h2><p>5.1 HTTP 웹 서버 리팩토링 실습<br>5.2 웹 서버 리팩토링 구현 및 설명<br>5.3 서블릿 컨테이너, 서블릿/JSP를 활용한 문제 해결<br>5.4 추가 학습 자료<br>&nbsp;</p><h2 id="6장-서블릿-JSP를-활용해-동적인-웹-애플리케이션-개발하기"><a href="#6장-서블릿-JSP를-활용해-동적인-웹-애플리케이션-개발하기" class="headerlink" title="6장 서블릿/JSP를 활용해 동적인 웹 애플리케이션 개발하기"></a>6장 서블릿/JSP를 활용해 동적인 웹 애플리케이션 개발하기</h2><p>6.1 서블릿/JSP로 회원관리 기능 다시 개발하기<br>6.2 세션(HttpSession) 요구사항 및 실습<br>6.3 세션(HttpSession) 구현<br>6.4 MVC 프레임워크 요구사항 1단계<br>6.5 MVC 프레임워크 구현 1단계<br>6.6 쉘 스크립트를 활용한 배포 자동화<br>6.7 추가 학습 자료<br>&nbsp;</p><h2 id="7장-DB를-활용해-데이터를-영구적으로-저장하기"><a href="#7장-DB를-활용해-데이터를-영구적으로-저장하기" class="headerlink" title="7장 DB를 활용해 데이터를 영구적으로 저장하기"></a>7장 DB를 활용해 데이터를 영구적으로 저장하기</h2><p>7.1 회원 데이터를 DB에 저장하기 실습<br>7.2 DAO 리팩토링 실습<br>7.3 동영상을 활용한 DAO 리팩토링 실습<br>7.4 DAO 리팩토링 및 설명<br>7.5 추가 학습 자료<br>&nbsp;</p><h2 id="8장-AJAX를-활용해-새로고침-없이-데이터-갱신하기"><a href="#8장-AJAX를-활용해-새로고침-없이-데이터-갱신하기" class="headerlink" title="8장 AJAX를 활용해 새로고침 없이 데이터 갱신하기"></a>8장 AJAX를 활용해 새로고침 없이 데이터 갱신하기</h2><p>8.1 질문/답변 게시판 구현<br>8.2 AJAX 활용해 답변 추가, 삭제 실습<br>8.3 MVC 프레임워크 요구사항 2단계<br>8.4 MVC 프레임워크 구현 2단계<br>8.5 추가 학습 자료<br>&nbsp;</p><h2 id="9장-두-번째-양파-껍질을-벗기기-위한-중간-점검"><a href="#9장-두-번째-양파-껍질을-벗기기-위한-중간-점검" class="headerlink" title="9장 두 번째 양파 껍질을 벗기기 위한 중간 점검"></a>9장 두 번째 양파 껍질을 벗기기 위한 중간 점검</h2><p>9.1 자체 점검 요구사항(필수)<br>9.2 자체 점검 요구사항(선택)<br>9.3 자체 점검 확인<br>&nbsp;</p><h2 id="10장-새로운-MVC-프레임워크-구현을-통한-점진적-개선"><a href="#10장-새로운-MVC-프레임워크-구현을-통한-점진적-개선" class="headerlink" title="10장 새로운 MVC 프레임워크 구현을 통한 점진적 개선"></a>10장 새로운 MVC 프레임워크 구현을 통한 점진적 개선</h2><p>10.1 MVC 프레임워크 요구사항 3단계<br>10.2 MVC 프레임워크 구현 3단계<br>10.3 인터페이스가 다른 경우 확장성 있는 설계<br>10.4 배포 자동화를 위한 쉘 스크립트 개선<br>&nbsp;</p><h2 id="11장-의존관계-주입-이하-DI-을-통한-테스트하기-쉬운-코드-만들기"><a href="#11장-의존관계-주입-이하-DI-을-통한-테스트하기-쉬운-코드-만들기" class="headerlink" title="11장 의존관계 주입(이하 DI)을 통한 테스트하기 쉬운 코드 만들기"></a>11장 의존관계 주입(이하 DI)을 통한 테스트하기 쉬운 코드 만들기</h2><p>11.1 왜 DI가 필요한가?<br>11.2 DI를 적용하면서 쌓이는 불편함(불만)<br>11.3 불만 해소하기<br>11.4 DI 프레임워크 실습<br>11.5 DI 프레임워크 구현<br>11.6 추가 학습 자료<br>&nbsp;</p><h2 id="12장-확장성-있는-DI-프레임워크로-개선"><a href="#12장-확장성-있는-DI-프레임워크로-개선" class="headerlink" title="12장 확장성 있는 DI 프레임워크로 개선"></a>12장 확장성 있는 DI 프레임워크로 개선</h2><p>12.1 필드와 setter 메소드에 @Inject 기능 추가<br>12.2 필드와 setter 메소드 @Inject 구현<br>12.3 @Inject 개선<br>12.4 설정 추가를 통한 유연성 확보<br>12.5 외부 라이브러리 클래스를 빈으로 등록하기<br>12.6 초기화 기능 추가<br>12.7 인터페이스, DI, DI 컨테이너<br>12.8 웹 서버 도입을 통한 서비스 운영<br>&nbsp;  </p><h2 id="13장-세-번째-양파-껍질-벗기기"><a href="#13장-세-번째-양파-껍질-벗기기" class="headerlink" title="13장 세 번째 양파 껍질 벗기기"></a>13장 세 번째 양파 껍질 벗기기</h2><p>13.1 스프링과 ORM 프레임워크<br>13.2 성능과 보안<br>13.3 프론트엔드 학습<br>13.4 설계, 테스트, 리팩토링<br>13.5 빌드, 배포 자동화 및 지속적 통합<br>13.6 개발 문화 및 프로세스 학습</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;얼마전 자바지기로 유명하신 박재성님 께서 진행 하신다는 &lt;a href=&quot;https://edu.nextstep.camp/c/8fWRxNWU/&quot;&gt;NextStep&lt;/a&gt;이라는 강의를 알게 되었습니다.&lt;/p&gt;
&lt;p&gt;커리큘럼을 보았을때 저에게 부족한 부분
      
    
    </summary>
    
      <category term="Programming" scheme="https://kys9261.github.io/categories/Programming/"/>
    
      <category term="Study" scheme="https://kys9261.github.io/categories/Programming/Study/"/>
    
    
      <category term="책" scheme="https://kys9261.github.io/tags/%EC%B1%85/"/>
    
      <category term="자바" scheme="https://kys9261.github.io/tags/%EC%9E%90%EB%B0%94/"/>
    
      <category term="개발" scheme="https://kys9261.github.io/tags/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="공부" scheme="https://kys9261.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
      <category term="nextstep" scheme="https://kys9261.github.io/tags/nextstep/"/>
    
  </entry>
  
</feed>
